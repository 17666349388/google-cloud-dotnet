### YamlMime:ManagedReference
items:
- uid: Google.Apis.Requests.PageStreamer`4
  commentId: T:Google.Apis.Requests.PageStreamer`4
  id: PageStreamer`4
  parent: Google.Apis.Requests
  children:
  - Google.Apis.Requests.PageStreamer`4.#ctor(System.Action{`1,`3},System.Func{`2,`3},System.Func{`2,System.Collections.Generic.IEnumerable{`0}})
  - Google.Apis.Requests.PageStreamer`4.Fetch(`1)
  - Google.Apis.Requests.PageStreamer`4.FetchAllAsync(`1,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: PageStreamer<TResource, TRequest, TResponse, TToken>
  nameWithType: PageStreamer<TResource, TRequest, TResponse, TToken>
  fullName: Google.Apis.Requests.PageStreamer<TResource, TRequest, TResponse, TToken>
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis/Requests/PageStreamer.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: PageStreamer
    path: Src/Support/Google.Apis/Requests/PageStreamer.cs
    startLine: 56
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Requests
  summary: "\nA page streamer is a helper to provide both synchronous and asynchronous page streaming\nof a listable or queryable resource.\n"
  remarks: "\n<p>\nThe expected usage pattern is to create a single paginator for a resource collection,\nand then use the instance methods to obtain paginated results.\n</p>\n"
  example:
  - "\nTo construct a page streamer to return snippets from the YouTube v3 Data API, you might use code\nsuch as the following. The pattern for other APIs would be very similar, with the <code>request.PageToken</code>,\n<code>response.NextPageToken</code> and <code>response.Items</code> properties potentially having different names. Constructing\nthe page streamer doesn&apos;t require any service references or authentication, so it&apos;s completely safe to perform this\nin a type initializer.\n<pre><code>using Google.Apis.YouTube.v3;\nusing Google.Apis.YouTube.v3.Data;\n...\nprivate static readonly snippetPageStreamer = new PageStreamer&lt;SearchResult, SearchResource.ListRequest, SearchListResponse, string>(\n    (request, token) => request.PageToken = token,\n    response => response.NextPageToken,\n    response => response.Items);</code></pre>\n"
  syntax:
    content: >-
      public sealed class PageStreamer<TResource, TRequest, TResponse, TToken>
          where TRequest : IClientServiceRequest<TResponse> where TToken : class
    typeParameters:
    - id: TResource
      description: The type of resource being paginated
    - id: TRequest
      description: The type of request used to fetch pages
    - id: TResponse
      description: The type of response obtained when fetching pages
    - id: TToken
      description: >-
        The type of the &quot;next page token&quot;, which must be a reference type;

        a null reference for a token indicates the end of a stream of pages.
    content.vb: Public NotInheritable Class PageStreamer(Of TResource, TRequest As IClientServiceRequest(Of TResponse), TResponse, TToken As Class)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Google.Apis.Requests.PageStreamer(Of TResource, TRequest, TResponse, TToken)
  name.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken)
- uid: Google.Apis.Requests.PageStreamer`4.#ctor(System.Action{`1,`3},System.Func{`2,`3},System.Func{`2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:Google.Apis.Requests.PageStreamer`4.#ctor(System.Action{`1,`3},System.Func{`2,`3},System.Func{`2,System.Collections.Generic.IEnumerable{`0}})
  id: '#ctor(System.Action{`1,`3},System.Func{`2,`3},System.Func{`2,System.Collections.Generic.IEnumerable{`0}})'
  parent: Google.Apis.Requests.PageStreamer`4
  langs:
  - csharp
  - vb
  name: PageStreamer(Action<TRequest, TToken>, Func<TResponse, TToken>, Func<TResponse, IEnumerable<TResource>>)
  nameWithType: PageStreamer<TResource, TRequest, TResponse, TToken>.PageStreamer(Action<TRequest, TToken>, Func<TResponse, TToken>, Func<TResponse, IEnumerable<TResource>>)
  fullName: Google.Apis.Requests.PageStreamer<TResource, TRequest, TResponse, TToken>.PageStreamer(System.Action<TRequest, TToken>, System.Func<TResponse, TToken>, System.Func<TResponse, System.Collections.Generic.IEnumerable<TResource>>)
  type: Constructor
  source:
    remote:
      path: Src/Support/Google.Apis/Requests/PageStreamer.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: .ctor
    path: Src/Support/Google.Apis/Requests/PageStreamer.cs
    startLine: 77
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Requests
  summary: "\nCreates a paginator for later use.\n"
  example: []
  syntax:
    content: public PageStreamer(Action<TRequest, TToken> requestModifier, Func<TResponse, TToken> tokenExtractor, Func<TResponse, IEnumerable<TResource>> resourceExtractor)
    parameters:
    - id: requestModifier
      type: System.Action{{TRequest},{TToken}}
      description: >-
        Action to modify a request to include the specified page token.

        Must not be null.
    - id: tokenExtractor
      type: System.Func{{TResponse},{TToken}}
      description: >-
        Function to extract the next page token from a response.

        Must not be null.
    - id: resourceExtractor
      type: System.Func{{TResponse},System.Collections.Generic.IEnumerable{{TResource}}}
      description: >-
        Function to extract a sequence of resources from a response.

        Must not be null, although it can return null if it is passed a response which contains no

        resources.
    content.vb: Public Sub New(requestModifier As Action(Of TRequest, TToken), tokenExtractor As Func(Of TResponse, TToken), resourceExtractor As Func(Of TResponse, IEnumerable(Of TResource)))
  overload: Google.Apis.Requests.PageStreamer`4.#ctor*
  nameWithType.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken).PageStreamer(Action(Of TRequest, TToken), Func(Of TResponse, TToken), Func(Of TResponse, IEnumerable(Of TResource)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Requests.PageStreamer(Of TResource, TRequest, TResponse, TToken).PageStreamer(System.Action(Of TRequest, TToken), System.Func(Of TResponse, TToken), System.Func(Of TResponse, System.Collections.Generic.IEnumerable(Of TResource)))
  name.vb: PageStreamer(Action(Of TRequest, TToken), Func(Of TResponse, TToken), Func(Of TResponse, IEnumerable(Of TResource)))
- uid: Google.Apis.Requests.PageStreamer`4.Fetch(`1)
  commentId: M:Google.Apis.Requests.PageStreamer`4.Fetch(`1)
  id: Fetch(`1)
  parent: Google.Apis.Requests.PageStreamer`4
  langs:
  - csharp
  - vb
  name: Fetch(TRequest)
  nameWithType: PageStreamer<TResource, TRequest, TResponse, TToken>.Fetch(TRequest)
  fullName: Google.Apis.Requests.PageStreamer<TResource, TRequest, TResponse, TToken>.Fetch(TRequest)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Requests/PageStreamer.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Fetch
    path: Src/Support/Google.Apis/Requests/PageStreamer.cs
    startLine: 107
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Requests
  summary: "\nLazily fetches resources a page at a time.\n"
  example: []
  syntax:
    content: public IEnumerable<TResource> Fetch(TRequest request)
    parameters:
    - id: request
      type: '{TRequest}'
      description: >-
        The initial request to send. If this contains a page token,

        that token is maintained. This will be modified with new page tokens over time, and should not

        be changed by the caller. (The caller should clone the request if they want an independent object

        to use in other calls or to modify.) Must not be null.
    return:
      type: System.Collections.Generic.IEnumerable{{TResource}}
      description: A sequence of resources, which are fetched a page at a time. Must not be null.
    content.vb: Public Function Fetch(request As TRequest) As IEnumerable(Of TResource)
  overload: Google.Apis.Requests.PageStreamer`4.Fetch*
  nameWithType.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken).Fetch(TRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Requests.PageStreamer(Of TResource, TRequest, TResponse, TToken).Fetch(TRequest)
- uid: Google.Apis.Requests.PageStreamer`4.FetchAllAsync(`1,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Requests.PageStreamer`4.FetchAllAsync(`1,System.Threading.CancellationToken)
  id: FetchAllAsync(`1,System.Threading.CancellationToken)
  parent: Google.Apis.Requests.PageStreamer`4
  langs:
  - csharp
  - vb
  name: FetchAllAsync(TRequest, CancellationToken)
  nameWithType: PageStreamer<TResource, TRequest, TResponse, TToken>.FetchAllAsync(TRequest, CancellationToken)
  fullName: Google.Apis.Requests.PageStreamer<TResource, TRequest, TResponse, TToken>.FetchAllAsync(TRequest, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Requests/PageStreamer.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: FetchAllAsync
    path: Src/Support/Google.Apis/Requests/PageStreamer.cs
    startLine: 137
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Requests
  summary: "\nAsynchronously (but eagerly) fetches a complete set of resources, potentially making multiple requests.\n"
  example: []
  syntax:
    content: public Task<IList<TResource>> FetchAllAsync(TRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: '{TRequest}'
      description: >-
        The initial request to send. If this contains a page token,

        that token is maintained. This will be modified with new page tokens over time, and should not

        be changed by the caller. (The caller should clone the request if they want an independent object

        to use in other calls or to modify.) Must not be null.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TResource}}}
      description: A sequence of resources, which are fetched asynchronously and a page at a time.
    content.vb: Public Function FetchAllAsync(request As TRequest, cancellationToken As CancellationToken) As Task(Of IList(Of TResource))
  overload: Google.Apis.Requests.PageStreamer`4.FetchAllAsync*
  nameWithType.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken).FetchAllAsync(TRequest, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Requests.PageStreamer(Of TResource, TRequest, TResponse, TToken).FetchAllAsync(TRequest, System.Threading.CancellationToken)
references:
- uid: Google.Apis.Requests
  commentId: N:Google.Apis.Requests
  name: Google.Apis.Requests
  nameWithType: Google.Apis.Requests
  fullName: Google.Apis.Requests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Apis.Requests.PageStreamer`4.#ctor*
  commentId: Overload:Google.Apis.Requests.PageStreamer`4.#ctor
  name: PageStreamer
  nameWithType: PageStreamer<TResource, TRequest, TResponse, TToken>.PageStreamer
  fullName: Google.Apis.Requests.PageStreamer<TResource, TRequest, TResponse, TToken>.PageStreamer
  nameWithType.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken).PageStreamer
  fullName.vb: Google.Apis.Requests.PageStreamer(Of TResource, TRequest, TResponse, TToken).PageStreamer
- uid: System.Action{{TRequest},{TToken}}
  commentId: T:System.Action{`1,`3}
  parent: System
  definition: System.Action`2
  name: Action<TRequest, TToken>
  nameWithType: Action<TRequest, TToken>
  fullName: System.Action<TRequest, TToken>
  nameWithType.vb: Action(Of TRequest, TToken)
  fullName.vb: System.Action(Of TRequest, TToken)
  name.vb: Action(Of TRequest, TToken)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TToken
    nameWithType: TToken
    fullName: TToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TToken
    nameWithType: TToken
    fullName: TToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TResponse},{TToken}}
  commentId: T:System.Func{`2,`3}
  parent: System
  definition: System.Func`2
  name: Func<TResponse, TToken>
  nameWithType: Func<TResponse, TToken>
  fullName: System.Func<TResponse, TToken>
  nameWithType.vb: Func(Of TResponse, TToken)
  fullName.vb: System.Func(Of TResponse, TToken)
  name.vb: Func(Of TResponse, TToken)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TToken
    nameWithType: TToken
    fullName: TToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TToken
    nameWithType: TToken
    fullName: TToken
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TResponse},System.Collections.Generic.IEnumerable{{TResource}}}
  commentId: T:System.Func{`2,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`2
  name: Func<TResponse, IEnumerable<TResource>>
  nameWithType: Func<TResponse, IEnumerable<TResource>>
  fullName: System.Func<TResponse, System.Collections.Generic.IEnumerable<TResource>>
  nameWithType.vb: Func(Of TResponse, IEnumerable(Of TResource))
  fullName.vb: System.Func(Of TResponse, System.Collections.Generic.IEnumerable(Of TResource))
  name.vb: Func(Of TResponse, IEnumerable(Of TResource))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Requests.PageStreamer`4.Fetch*
  commentId: Overload:Google.Apis.Requests.PageStreamer`4.Fetch
  name: Fetch
  nameWithType: PageStreamer<TResource, TRequest, TResponse, TToken>.Fetch
  fullName: Google.Apis.Requests.PageStreamer<TResource, TRequest, TResponse, TToken>.Fetch
  nameWithType.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken).Fetch
  fullName.vb: Google.Apis.Requests.PageStreamer(Of TResource, TRequest, TResponse, TToken).Fetch
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Collections.Generic.IEnumerable{{TResource}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResource>
  nameWithType: IEnumerable<TResource>
  fullName: System.Collections.Generic.IEnumerable<TResource>
  nameWithType.vb: IEnumerable(Of TResource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResource)
  name.vb: IEnumerable(Of TResource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Google.Apis.Requests.PageStreamer`4.FetchAllAsync*
  commentId: Overload:Google.Apis.Requests.PageStreamer`4.FetchAllAsync
  name: FetchAllAsync
  nameWithType: PageStreamer<TResource, TRequest, TResponse, TToken>.FetchAllAsync
  fullName: Google.Apis.Requests.PageStreamer<TResource, TRequest, TResponse, TToken>.FetchAllAsync
  nameWithType.vb: PageStreamer(Of TResource, TRequest, TResponse, TToken).FetchAllAsync
  fullName.vb: Google.Apis.Requests.PageStreamer(Of TResource, TRequest, TResponse, TToken).FetchAllAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TResource}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<TResource>>
  nameWithType: Task<IList<TResource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<TResource>>
  nameWithType.vb: Task(Of IList(Of TResource))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of TResource))
  name.vb: Task(Of IList(Of TResource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
