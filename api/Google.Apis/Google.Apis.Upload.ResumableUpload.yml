### YamlMime:ManagedReference
items:
- uid: Google.Apis.Upload.ResumableUpload
  commentId: T:Google.Apis.Upload.ResumableUpload
  id: ResumableUpload
  parent: Google.Apis.Upload
  children:
  - Google.Apis.Upload.ResumableUpload.#ctor(System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)
  - Google.Apis.Upload.ResumableUpload.chunkSize
  - Google.Apis.Upload.ResumableUpload.ChunkSize
  - Google.Apis.Upload.ResumableUpload.ContentStream
  - Google.Apis.Upload.ResumableUpload.CreateFromUploadUri(System.Uri,System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)
  - Google.Apis.Upload.ResumableUpload.DefaultChunkSize
  - Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync(System.Net.Http.HttpResponseMessage)
  - Google.Apis.Upload.ResumableUpload.GetProgress
  - Google.Apis.Upload.ResumableUpload.InitiateSessionAsync(System.Threading.CancellationToken)
  - Google.Apis.Upload.ResumableUpload.MinimumChunkSize
  - Google.Apis.Upload.ResumableUpload.Options
  - Google.Apis.Upload.ResumableUpload.ProcessResponse(System.Net.Http.HttpResponseMessage)
  - Google.Apis.Upload.ResumableUpload.ProgressChanged
  - Google.Apis.Upload.ResumableUpload.Resume
  - Google.Apis.Upload.ResumableUpload.Resume(System.Uri)
  - Google.Apis.Upload.ResumableUpload.ResumeAsync
  - Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Threading.CancellationToken)
  - Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri)
  - Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri,System.Threading.CancellationToken)
  - Google.Apis.Upload.ResumableUpload.SendNextChunkAsync(System.IO.Stream,System.Threading.CancellationToken)
  - Google.Apis.Upload.ResumableUpload.Upload
  - Google.Apis.Upload.ResumableUpload.UploadAsync
  - Google.Apis.Upload.ResumableUpload.UploadAsync(System.Threading.CancellationToken)
  - Google.Apis.Upload.ResumableUpload.UploadSessionData
  langs:
  - csharp
  - vb
  name: ResumableUpload
  nameWithType: ResumableUpload
  fullName: Google.Apis.Upload.ResumableUpload
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ResumableUpload
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 42
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nMedia upload which uses Google&apos;s resumable media upload protocol to upload data.\n"
  remarks: "\nSee: https://developers.google.com/drive/manage-uploads#resumable for more information on the protocol.\n"
  example: []
  syntax:
    content: public abstract class ResumableUpload
    content.vb: Public MustInherit Class ResumableUpload
  inheritance:
  - System.Object
  derivedClasses:
  - Google.Apis.Upload.ResumableUpload`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Google.Apis.Upload.ResumableUpload.MinimumChunkSize
  commentId: F:Google.Apis.Upload.ResumableUpload.MinimumChunkSize
  id: MinimumChunkSize
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: MinimumChunkSize
  nameWithType: ResumableUpload.MinimumChunkSize
  fullName: Google.Apis.Upload.ResumableUpload.MinimumChunkSize
  type: Field
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: MinimumChunkSize
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 53
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Minimum chunk size (except the last one). Default value is 256*KB.
  example: []
  syntax:
    content: public const int MinimumChunkSize = 262144
    return:
      type: System.Int32
    content.vb: Public Const MinimumChunkSize As Integer = 262144
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Apis.Upload.ResumableUpload.DefaultChunkSize
  commentId: F:Google.Apis.Upload.ResumableUpload.DefaultChunkSize
  id: DefaultChunkSize
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: DefaultChunkSize
  nameWithType: ResumableUpload.DefaultChunkSize
  fullName: Google.Apis.Upload.ResumableUpload.DefaultChunkSize
  type: Field
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: DefaultChunkSize
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 56
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Default chunk size. Default value is 10*MB.
  example: []
  syntax:
    content: public const int DefaultChunkSize = 10485760
    return:
      type: System.Int32
    content.vb: Public Const DefaultChunkSize As Integer = 10485760
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Apis.Upload.ResumableUpload.#ctor(System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)
  commentId: M:Google.Apis.Upload.ResumableUpload.#ctor(System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)
  id: '#ctor(System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)'
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ResumableUpload(Stream, ResumableUploadOptions)
  nameWithType: ResumableUpload.ResumableUpload(Stream, ResumableUploadOptions)
  fullName: Google.Apis.Upload.ResumableUpload.ResumableUpload(System.IO.Stream, Google.Apis.Upload.ResumableUploadOptions)
  type: Constructor
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: .ctor
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 78
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nCreates a <xref href=\"Google.Apis.Upload.ResumableUpload\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: protected ResumableUpload(Stream contentStream, ResumableUploadOptions options)
    parameters:
    - id: contentStream
      type: System.IO.Stream
      description: The data to be uploaded. Must not be null.
    - id: options
      type: Google.Apis.Upload.ResumableUploadOptions
      description: The options for the upload operation. May be null.
    content.vb: Protected Sub New(contentStream As Stream, options As ResumableUploadOptions)
  overload: Google.Apis.Upload.ResumableUpload.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Google.Apis.Upload.ResumableUpload.CreateFromUploadUri(System.Uri,System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)
  commentId: M:Google.Apis.Upload.ResumableUpload.CreateFromUploadUri(System.Uri,System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)
  id: CreateFromUploadUri(System.Uri,System.IO.Stream,Google.Apis.Upload.ResumableUploadOptions)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: CreateFromUploadUri(Uri, Stream, ResumableUploadOptions)
  nameWithType: ResumableUpload.CreateFromUploadUri(Uri, Stream, ResumableUploadOptions)
  fullName: Google.Apis.Upload.ResumableUpload.CreateFromUploadUri(System.Uri, System.IO.Stream, Google.Apis.Upload.ResumableUploadOptions)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: CreateFromUploadUri
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 99
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nCreates a <xref href=\"Google.Apis.Upload.ResumableUpload\" data-throw-if-not-resolved=\"false\"></xref> instance for a resumable upload session which has already been initiated.\n"
  remarks: "\nSee https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload#start-resumable for more information about initiating\nresumable upload sessions and saving the session URI, or upload URI.\n"
  example: []
  syntax:
    content: public static ResumableUpload CreateFromUploadUri(Uri uploadUri, Stream contentStream, ResumableUploadOptions options = null)
    parameters:
    - id: uploadUri
      type: System.Uri
      description: The session URI of the resumable upload session. Must not be null.
    - id: contentStream
      type: System.IO.Stream
      description: The data to be uploaded. Must not be null.
    - id: options
      type: Google.Apis.Upload.ResumableUploadOptions
      description: The options for the upload operation. May be null.
    return:
      type: Google.Apis.Upload.ResumableUpload
      description: The instance which can be used to upload the specified content.
    content.vb: Public Shared Function CreateFromUploadUri(uploadUri As Uri, contentStream As Stream, options As ResumableUploadOptions = Nothing) As ResumableUpload
  overload: Google.Apis.Upload.ResumableUpload.CreateFromUploadUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Upload.ResumableUpload.Options
  commentId: P:Google.Apis.Upload.ResumableUpload.Options
  id: Options
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: ResumableUpload.Options
  fullName: Google.Apis.Upload.ResumableUpload.Options
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Options
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 132
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nGets the options used to control the resumable upload.\n"
  example: []
  syntax:
    content: protected ResumableUploadOptions Options { get; }
    parameters: []
    return:
      type: Google.Apis.Upload.ResumableUploadOptions
    content.vb: Protected ReadOnly Property Options As ResumableUploadOptions
  overload: Google.Apis.Upload.ResumableUpload.Options*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Google.Apis.Upload.ResumableUpload.ContentStream
  commentId: P:Google.Apis.Upload.ResumableUpload.ContentStream
  id: ContentStream
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ContentStream
  nameWithType: ResumableUpload.ContentStream
  fullName: Google.Apis.Upload.ResumableUpload.ContentStream
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ContentStream
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 140
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Gets or sets the stream to upload.
  example: []
  syntax:
    content: public Stream ContentStream { get; }
    parameters: []
    return:
      type: System.IO.Stream
    content.vb: Public ReadOnly Property ContentStream As Stream
  overload: Google.Apis.Upload.ResumableUpload.ContentStream*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Apis.Upload.ResumableUpload.chunkSize
  commentId: F:Google.Apis.Upload.ResumableUpload.chunkSize
  id: chunkSize
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: chunkSize
  nameWithType: ResumableUpload.chunkSize
  fullName: Google.Apis.Upload.ResumableUpload.chunkSize
  type: Field
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: chunkSize
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 175
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Change this value ONLY for testing purposes!
  example: []
  syntax:
    content: protected int chunkSize
    return:
      type: System.Int32
    content.vb: Protected chunkSize As Integer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Google.Apis.Upload.ResumableUpload.ChunkSize
  commentId: P:Google.Apis.Upload.ResumableUpload.ChunkSize
  id: ChunkSize
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ChunkSize
  nameWithType: ResumableUpload.ChunkSize
  fullName: Google.Apis.Upload.ResumableUpload.ChunkSize
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ChunkSize
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 182
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nGets or sets the size of each chunk sent to the server.\nChunks (except the last chunk) must be a multiple of <xref href=\"Google.Apis.Upload.ResumableUpload.MinimumChunkSize\" data-throw-if-not-resolved=\"false\"></xref> to be compatible with \nGoogle upload servers.\n"
  example: []
  syntax:
    content: public int ChunkSize { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ChunkSize As Integer
  overload: Google.Apis.Upload.ResumableUpload.ChunkSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.ProgressChanged
  commentId: E:Google.Apis.Upload.ResumableUpload.ProgressChanged
  id: ProgressChanged
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ProgressChanged
  nameWithType: ResumableUpload.ProgressChanged
  fullName: Google.Apis.Upload.ResumableUpload.ProgressChanged
  type: Event
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ProgressChanged
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 200
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Event called whenever the progress of the upload changes.
  example: []
  syntax:
    content: public event Action<IUploadProgress> ProgressChanged
    return:
      type: System.Action{Google.Apis.Upload.IUploadProgress}
    content.vb: Public Event ProgressChanged As Action(Of IUploadProgress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.GetProgress
  commentId: M:Google.Apis.Upload.ResumableUpload.GetProgress
  id: GetProgress
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: GetProgress()
  nameWithType: ResumableUpload.GetProgress()
  fullName: Google.Apis.Upload.ResumableUpload.GetProgress()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GetProgress
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 330
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nGet the current progress state.\n"
  example: []
  syntax:
    content: public IUploadProgress GetProgress()
    return:
      type: Google.Apis.Upload.IUploadProgress
      description: An IUploadProgress describing the current progress of the upload.
    content.vb: Public Function GetProgress As IUploadProgress
  overload: Google.Apis.Upload.ResumableUpload.GetProgress*
  seealso:
  - linkId: Google.Apis.Upload.ResumableUpload.ProgressChanged
    commentId: E:Google.Apis.Upload.ResumableUpload.ProgressChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.UploadSessionData
  commentId: E:Google.Apis.Upload.ResumableUpload.UploadSessionData
  id: UploadSessionData
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: UploadSessionData
  nameWithType: ResumableUpload.UploadSessionData
  fullName: Google.Apis.Upload.ResumableUpload.UploadSessionData
  type: Event
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: UploadSessionData
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 346
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nEvent called when an UploadUri is created. \nNot needed if the application program will not support resuming after a program restart.\n"
  remarks: "\nWithin the event, persist the UploadUri to storage.\nIt is strongly recommended that the full path filename (or other media identifier) is also stored so that it can be compared to the current open filename (media) upon restart.\n"
  example: []
  syntax:
    content: public event Action<IUploadSessionData> UploadSessionData
    return:
      type: System.Action{Google.Apis.Upload.IUploadSessionData}
    content.vb: Public Event UploadSessionData As Action(Of IUploadSessionData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.Upload
  commentId: M:Google.Apis.Upload.ResumableUpload.Upload
  id: Upload
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: Upload()
  nameWithType: ResumableUpload.Upload()
  fullName: Google.Apis.Upload.ResumableUpload.Upload()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Upload
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 380
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nUploads the content to the server. This method is synchronous and will block until the upload is completed.\n"
  remarks: "\nIn case the upload fails the <xref href=\"Google.Apis.Upload.IUploadProgress.Exception\" data-throw-if-not-resolved=\"false\"></xref> will contain the exception that\ncause the failure.\n"
  example: []
  syntax:
    content: public IUploadProgress Upload()
    return:
      type: Google.Apis.Upload.IUploadProgress
    content.vb: Public Function Upload As IUploadProgress
  overload: Google.Apis.Upload.ResumableUpload.Upload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.UploadAsync
  commentId: M:Google.Apis.Upload.ResumableUpload.UploadAsync
  id: UploadAsync
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: UploadAsync()
  nameWithType: ResumableUpload.UploadAsync()
  fullName: Google.Apis.Upload.ResumableUpload.UploadAsync()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: UploadAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 386
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Uploads the content asynchronously to the server.
  example: []
  syntax:
    content: public Task<IUploadProgress> UploadAsync()
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
    content.vb: Public Function UploadAsync As Task(Of IUploadProgress)
  overload: Google.Apis.Upload.ResumableUpload.UploadAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.UploadAsync(System.Threading.CancellationToken)
  commentId: M:Google.Apis.Upload.ResumableUpload.UploadAsync(System.Threading.CancellationToken)
  id: UploadAsync(System.Threading.CancellationToken)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: UploadAsync(CancellationToken)
  nameWithType: ResumableUpload.UploadAsync(CancellationToken)
  fullName: Google.Apis.Upload.ResumableUpload.UploadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: UploadAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 398
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Uploads the content to the server using the given cancellation token.
  remarks: "\nIn case the upload fails <xref href=\"Google.Apis.Upload.IUploadProgress.Exception\" data-throw-if-not-resolved=\"false\"></xref> will contain the exception that\ncause the failure. The only exception which will be thrown is \n<xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> which indicates that the task was canceled.\n"
  example: []
  syntax:
    content: public Task<IUploadProgress> UploadAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel operation.
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
    content.vb: Public Function UploadAsync(cancellationToken As CancellationToken) As Task(Of IUploadProgress)
  overload: Google.Apis.Upload.ResumableUpload.UploadAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.Resume
  commentId: M:Google.Apis.Upload.ResumableUpload.Resume
  id: Resume
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: Resume()
  nameWithType: ResumableUpload.Resume()
  fullName: Google.Apis.Upload.ResumableUpload.Resume()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Resume
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 426
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nResumes the upload from the last point it was interrupted. \nUse when resuming and the program was not restarted.\n"
  example: []
  syntax:
    content: public IUploadProgress Resume()
    return:
      type: Google.Apis.Upload.IUploadProgress
    content.vb: Public Function Resume As IUploadProgress
  overload: Google.Apis.Upload.ResumableUpload.Resume*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.Resume(System.Uri)
  commentId: M:Google.Apis.Upload.ResumableUpload.Resume(System.Uri)
  id: Resume(System.Uri)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: Resume(Uri)
  nameWithType: ResumableUpload.Resume(Uri)
  fullName: Google.Apis.Upload.ResumableUpload.Resume(System.Uri)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Resume
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 443
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nResumes the upload from the last point it was interrupted. \nUse when the program was restarted and you wish to resume the upload that was in progress when the program was halted. \nImplemented only for ContentStreams where .CanSeek is True.\n"
  remarks: "\nIn your application&apos;s UploadSessionData Event Handler, store UploadUri.AbsoluteUri property value (resumable session URI string value)\nto persistent storage for use with Resume() or ResumeAsync() upon a program restart.\nIt is strongly recommended that the FullPathFilename of the media file that is being uploaded is saved also so that a subsequent execution of the\nprogram can compare the saved FullPathFilename value to the FullPathFilename of the media file that it has opened for uploading.\nYou do not need to seek to restart point in the ContentStream file.\n"
  example: []
  syntax:
    content: public IUploadProgress Resume(Uri uploadUri)
    parameters:
    - id: uploadUri
      type: System.Uri
      description: VideosResource.InsertMediaUpload UploadUri property value that was saved to persistent storage during a prior execution.
    return:
      type: Google.Apis.Upload.IUploadProgress
    content.vb: Public Function Resume(uploadUri As Uri) As IUploadProgress
  overload: Google.Apis.Upload.ResumableUpload.Resume*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.ResumeAsync
  commentId: M:Google.Apis.Upload.ResumableUpload.ResumeAsync
  id: ResumeAsync
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ResumeAsync()
  nameWithType: ResumableUpload.ResumeAsync()
  fullName: Google.Apis.Upload.ResumableUpload.ResumeAsync()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ResumeAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 453
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nAsynchronously resumes the upload from the last point it was interrupted.\n"
  remarks: "\nYou do not need to seek to restart point in the ContentStream file.\n"
  example: []
  syntax:
    content: public Task<IUploadProgress> ResumeAsync()
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
    content.vb: Public Function ResumeAsync As Task(Of IUploadProgress)
  overload: Google.Apis.Upload.ResumableUpload.ResumeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Threading.CancellationToken)
  commentId: M:Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Threading.CancellationToken)
  id: ResumeAsync(System.Threading.CancellationToken)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ResumeAsync(CancellationToken)
  nameWithType: ResumableUpload.ResumeAsync(CancellationToken)
  fullName: Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ResumeAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 465
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nAsynchronously resumes the upload from the last point it was interrupted. \nUse when resuming and the program was not restarted.\n"
  remarks: "\nYou do not need to seek to restart point in the ContentStream file.\n"
  example: []
  syntax:
    content: public Task<IUploadProgress> ResumeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
    content.vb: Public Function ResumeAsync(cancellationToken As CancellationToken) As Task(Of IUploadProgress)
  overload: Google.Apis.Upload.ResumableUpload.ResumeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri)
  commentId: M:Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri)
  id: ResumeAsync(System.Uri)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ResumeAsync(Uri)
  nameWithType: ResumableUpload.ResumeAsync(Uri)
  fullName: Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ResumeAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 482
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nAsynchronously resumes the upload from the last point it was interrupted. \nUse when resuming and the program was restarted.\nImplemented only for ContentStreams where .CanSeek is True.\n"
  remarks: "\nIn your application&apos;s UploadSessionData Event Handler, store UploadUri.AbsoluteUri property value (resumable session URI string value)\nto persistent storage for use with Resume() or ResumeAsync() upon a program restart.\nIt is strongly recommended that the FullPathFilename of the media file that is being uploaded is saved also so that a subsequent execution of the\nprogram can compare the saved FullPathFilename value to the FullPathFilename of the media file that it has opened for uploading.\nYou do not need to seek to restart point in the ContentStream file.\n"
  example: []
  syntax:
    content: public Task<IUploadProgress> ResumeAsync(Uri uploadUri)
    parameters:
    - id: uploadUri
      type: System.Uri
      description: VideosResource.InsertMediaUpload UploadUri property value that was saved to persistent storage during a prior execution.
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
    content.vb: Public Function ResumeAsync(uploadUri As Uri) As Task(Of IUploadProgress)
  overload: Google.Apis.Upload.ResumableUpload.ResumeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri,System.Threading.CancellationToken)
  id: ResumeAsync(System.Uri,System.Threading.CancellationToken)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ResumeAsync(Uri, CancellationToken)
  nameWithType: ResumableUpload.ResumeAsync(Uri, CancellationToken)
  fullName: Google.Apis.Upload.ResumableUpload.ResumeAsync(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ResumeAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 500
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nAsynchronously resumes the upload from the last point it was interrupted. \nUse when the program was restarted and you wish to resume the upload that was in progress when the program was halted.\nImplemented only for ContentStreams where .CanSeek is True.\n"
  remarks: "\nIn your application&apos;s UploadSessionData Event Handler, store UploadUri.AbsoluteUri property value (resumable session URI string value)\nto persistent storage for use with Resume() or ResumeAsync() upon a program restart.\nIt is strongly recommended that the FullPathFilename of the media file that is being uploaded is saved also so that a subsequent execution of the\nprogram can compare the saved FullPathFilename value to the FullPathFilename of the media file that it has opened for uploading.\nYou do not need to seek to restart point in the ContentStream file.\n"
  example: []
  syntax:
    content: public Task<IUploadProgress> ResumeAsync(Uri uploadUri, CancellationToken cancellationToken)
    parameters:
    - id: uploadUri
      type: System.Uri
      description: VideosResource.InsertMediaUpload UploadUri property value that was saved to persistent storage during a prior execution.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
    content.vb: Public Function ResumeAsync(uploadUri As Uri, cancellationToken As CancellationToken) As Task(Of IUploadProgress)
  overload: Google.Apis.Upload.ResumableUpload.ResumeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Upload.ResumableUpload.InitiateSessionAsync(System.Threading.CancellationToken)
  commentId: M:Google.Apis.Upload.ResumableUpload.InitiateSessionAsync(System.Threading.CancellationToken)
  id: InitiateSessionAsync(System.Threading.CancellationToken)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: InitiateSessionAsync(CancellationToken)
  nameWithType: ResumableUpload.InitiateSessionAsync(CancellationToken)
  fullName: Google.Apis.Upload.ResumableUpload.InitiateSessionAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: InitiateSessionAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 601
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nInitiates the resumable upload session and returns the session URI, or upload URI.\nSee https://developers.google.com/drive/manage-uploads#start-resumable and\nhttps://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload#start-resumable for more information.\n"
  example: []
  syntax:
    content: public abstract Task<Uri> InitiateSessionAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Uri}
      description: "\nThe task containing the session URI to use for the resumable upload.\n"
    content.vb: Public MustOverride Function InitiateSessionAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Uri)
  overload: Google.Apis.Upload.ResumableUpload.InitiateSessionAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Google.Apis.Upload.ResumableUpload.ProcessResponse(System.Net.Http.HttpResponseMessage)
  commentId: M:Google.Apis.Upload.ResumableUpload.ProcessResponse(System.Net.Http.HttpResponseMessage)
  id: ProcessResponse(System.Net.Http.HttpResponseMessage)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ProcessResponse(HttpResponseMessage)
  nameWithType: ResumableUpload.ProcessResponse(HttpResponseMessage)
  fullName: Google.Apis.Upload.ResumableUpload.ProcessResponse(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ProcessResponse
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 607
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nProcess a response from the final upload chunk call.\n"
  example: []
  syntax:
    content: protected virtual void ProcessResponse(HttpResponseMessage httpResponse)
    parameters:
    - id: httpResponse
      type: System.Net.Http.HttpResponseMessage
      description: The response body from the final uploaded chunk.
    content.vb: Protected Overridable Sub ProcessResponse(httpResponse As HttpResponseMessage)
  overload: Google.Apis.Upload.ResumableUpload.ProcessResponse*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Google.Apis.Upload.ResumableUpload.SendNextChunkAsync(System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Upload.ResumableUpload.SendNextChunkAsync(System.IO.Stream,System.Threading.CancellationToken)
  id: SendNextChunkAsync(System.IO.Stream,System.Threading.CancellationToken)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: SendNextChunkAsync(Stream, CancellationToken)
  nameWithType: ResumableUpload.SendNextChunkAsync(Stream, CancellationToken)
  fullName: Google.Apis.Upload.ResumableUpload.SendNextChunkAsync(System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: SendNextChunkAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 613
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: Uploads the next chunk of data to the server.
  example: []
  syntax:
    content: protected Task<bool> SendNextChunkAsync(Stream stream, CancellationToken cancellationToken)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: <code>True</code> if the entire media has been completely uploaded.
    content.vb: Protected Function SendNextChunkAsync(stream As Stream, cancellationToken As CancellationToken) As Task(Of Boolean)
  overload: Google.Apis.Upload.ResumableUpload.SendNextChunkAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync(System.Net.Http.HttpResponseMessage)
  commentId: M:Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync(System.Net.Http.HttpResponseMessage)
  id: ExceptionForResponseAsync(System.Net.Http.HttpResponseMessage)
  parent: Google.Apis.Upload.ResumableUpload
  langs:
  - csharp
  - vb
  name: ExceptionForResponseAsync(HttpResponseMessage)
  nameWithType: ResumableUpload.ExceptionForResponseAsync(HttpResponseMessage)
  fullName: Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ExceptionForResponseAsync
    path: Src/Support/Google.Apis/Upload/ResumableUpload.cs
    startLine: 665
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Upload
  summary: "\nCreates a <xref href=\"Google.GoogleApiException\" data-throw-if-not-resolved=\"false\"></xref> instance using the error response from the server.\n"
  example: []
  syntax:
    content: protected Task<GoogleApiException> ExceptionForResponseAsync(HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The error response.
    return:
      type: System.Threading.Tasks.Task{Google.GoogleApiException}
      description: An exception which can be thrown by the caller.
    content.vb: Protected Function ExceptionForResponseAsync(response As HttpResponseMessage) As Task(Of GoogleApiException)
  overload: Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Google.Apis.Upload
  commentId: N:Google.Apis.Upload
  isExternal: false
  name: Google.Apis.Upload
  nameWithType: Google.Apis.Upload
  fullName: Google.Apis.Upload
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Google.Apis.Upload.ResumableUpload
  commentId: T:Google.Apis.Upload.ResumableUpload
  parent: Google.Apis.Upload
  isExternal: false
  name: ResumableUpload
  nameWithType: ResumableUpload
  fullName: Google.Apis.Upload.ResumableUpload
- uid: Google.Apis.Upload.ResumableUpload.#ctor*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.#ctor
  isExternal: false
  name: ResumableUpload
  nameWithType: ResumableUpload.ResumableUpload
  fullName: Google.Apis.Upload.ResumableUpload.ResumableUpload
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Google.Apis.Upload.ResumableUploadOptions
  commentId: T:Google.Apis.Upload.ResumableUploadOptions
  parent: Google.Apis.Upload
  isExternal: false
  name: ResumableUploadOptions
  nameWithType: ResumableUploadOptions
  fullName: Google.Apis.Upload.ResumableUploadOptions
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Google.Apis.Upload.ResumableUpload.CreateFromUploadUri*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.CreateFromUploadUri
  isExternal: false
  name: CreateFromUploadUri
  nameWithType: ResumableUpload.CreateFromUploadUri
  fullName: Google.Apis.Upload.ResumableUpload.CreateFromUploadUri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Google.Apis.Upload.ResumableUpload.Options*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.Options
  isExternal: false
  name: Options
  nameWithType: ResumableUpload.Options
  fullName: Google.Apis.Upload.ResumableUpload.Options
- uid: Google.Apis.Upload.ResumableUpload.ContentStream*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.ContentStream
  isExternal: false
  name: ContentStream
  nameWithType: ResumableUpload.ContentStream
  fullName: Google.Apis.Upload.ResumableUpload.ContentStream
- uid: Google.Apis.Upload.ResumableUpload.MinimumChunkSize
  commentId: F:Google.Apis.Upload.ResumableUpload.MinimumChunkSize
  parent: Google.Apis.Upload.ResumableUpload
  isExternal: false
  name: MinimumChunkSize
  nameWithType: ResumableUpload.MinimumChunkSize
  fullName: Google.Apis.Upload.ResumableUpload.MinimumChunkSize
- uid: Google.Apis.Upload.ResumableUpload.ChunkSize*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.ChunkSize
  isExternal: false
  name: ChunkSize
  nameWithType: ResumableUpload.ChunkSize
  fullName: Google.Apis.Upload.ResumableUpload.ChunkSize
- uid: System.Action{Google.Apis.Upload.IUploadProgress}
  commentId: T:System.Action{Google.Apis.Upload.IUploadProgress}
  parent: System
  definition: System.Action`1
  name: Action<IUploadProgress>
  nameWithType: Action<IUploadProgress>
  fullName: System.Action<Google.Apis.Upload.IUploadProgress>
  nameWithType.vb: Action(Of IUploadProgress)
  fullName.vb: System.Action(Of Google.Apis.Upload.IUploadProgress)
  name.vb: Action(Of IUploadProgress)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Upload.IUploadProgress
    name: IUploadProgress
    nameWithType: IUploadProgress
    fullName: Google.Apis.Upload.IUploadProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Upload.IUploadProgress
    name: IUploadProgress
    nameWithType: IUploadProgress
    fullName: Google.Apis.Upload.IUploadProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Upload.ResumableUpload.ProgressChanged
  commentId: E:Google.Apis.Upload.ResumableUpload.ProgressChanged
  parent: Google.Apis.Upload.ResumableUpload
  isExternal: false
  name: ProgressChanged
  nameWithType: ResumableUpload.ProgressChanged
  fullName: Google.Apis.Upload.ResumableUpload.ProgressChanged
- uid: Google.Apis.Upload.ResumableUpload.GetProgress*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.GetProgress
  isExternal: false
  name: GetProgress
  nameWithType: ResumableUpload.GetProgress
  fullName: Google.Apis.Upload.ResumableUpload.GetProgress
- uid: Google.Apis.Upload.IUploadProgress
  commentId: T:Google.Apis.Upload.IUploadProgress
  parent: Google.Apis.Upload
  isExternal: false
  name: IUploadProgress
  nameWithType: IUploadProgress
  fullName: Google.Apis.Upload.IUploadProgress
- uid: System.Action{Google.Apis.Upload.IUploadSessionData}
  commentId: T:System.Action{Google.Apis.Upload.IUploadSessionData}
  parent: System
  definition: System.Action`1
  name: Action<IUploadSessionData>
  nameWithType: Action<IUploadSessionData>
  fullName: System.Action<Google.Apis.Upload.IUploadSessionData>
  nameWithType.vb: Action(Of IUploadSessionData)
  fullName.vb: System.Action(Of Google.Apis.Upload.IUploadSessionData)
  name.vb: Action(Of IUploadSessionData)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Upload.IUploadSessionData
    name: IUploadSessionData
    nameWithType: IUploadSessionData
    fullName: Google.Apis.Upload.IUploadSessionData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Upload.IUploadSessionData
    name: IUploadSessionData
    nameWithType: IUploadSessionData
    fullName: Google.Apis.Upload.IUploadSessionData
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Upload.IUploadProgress.Exception
  commentId: P:Google.Apis.Upload.IUploadProgress.Exception
- uid: Google.Apis.Upload.ResumableUpload.Upload*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.Upload
  isExternal: false
  name: Upload
  nameWithType: ResumableUpload.Upload
  fullName: Google.Apis.Upload.ResumableUpload.Upload
- uid: Google.Apis.Upload.ResumableUpload.UploadAsync*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.UploadAsync
  isExternal: false
  name: UploadAsync
  nameWithType: ResumableUpload.UploadAsync
  fullName: Google.Apis.Upload.ResumableUpload.UploadAsync
- uid: System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
  commentId: T:System.Threading.Tasks.Task{Google.Apis.Upload.IUploadProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUploadProgress>
  nameWithType: Task<IUploadProgress>
  fullName: System.Threading.Tasks.Task<Google.Apis.Upload.IUploadProgress>
  nameWithType.vb: Task(Of IUploadProgress)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Apis.Upload.IUploadProgress)
  name.vb: Task(Of IUploadProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Upload.IUploadProgress
    name: IUploadProgress
    nameWithType: IUploadProgress
    fullName: Google.Apis.Upload.IUploadProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Upload.IUploadProgress
    name: IUploadProgress
    nameWithType: IUploadProgress
    fullName: Google.Apis.Upload.IUploadProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.TaskCanceledException
  commentId: T:System.Threading.Tasks.TaskCanceledException
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Google.Apis.Upload.ResumableUpload.Resume*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.Resume
  isExternal: false
  name: Resume
  nameWithType: ResumableUpload.Resume
  fullName: Google.Apis.Upload.ResumableUpload.Resume
- uid: Google.Apis.Upload.ResumableUpload.ResumeAsync*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.ResumeAsync
  isExternal: false
  name: ResumeAsync
  nameWithType: ResumableUpload.ResumeAsync
  fullName: Google.Apis.Upload.ResumableUpload.ResumeAsync
- uid: Google.Apis.Upload.ResumableUpload.InitiateSessionAsync*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.InitiateSessionAsync
  isExternal: false
  name: InitiateSessionAsync
  nameWithType: ResumableUpload.InitiateSessionAsync
  fullName: Google.Apis.Upload.ResumableUpload.InitiateSessionAsync
- uid: System.Threading.Tasks.Task{System.Uri}
  commentId: T:System.Threading.Tasks.Task{System.Uri}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Uri>
  nameWithType: Task<Uri>
  fullName: System.Threading.Tasks.Task<System.Uri>
  nameWithType.vb: Task(Of Uri)
  fullName.vb: System.Threading.Tasks.Task(Of System.Uri)
  name.vb: Task(Of Uri)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Upload.ResumableUpload.ProcessResponse*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.ProcessResponse
  isExternal: false
  name: ProcessResponse
  nameWithType: ResumableUpload.ProcessResponse
  fullName: Google.Apis.Upload.ResumableUpload.ProcessResponse
- uid: System.Net.Http.HttpResponseMessage
  commentId: T:System.Net.Http.HttpResponseMessage
  parent: System.Net.Http
  isExternal: true
  name: HttpResponseMessage
  nameWithType: HttpResponseMessage
  fullName: System.Net.Http.HttpResponseMessage
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: false
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
- uid: Google.Apis.Upload.ResumableUpload.SendNextChunkAsync*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.SendNextChunkAsync
  isExternal: false
  name: SendNextChunkAsync
  nameWithType: ResumableUpload.SendNextChunkAsync
  fullName: Google.Apis.Upload.ResumableUpload.SendNextChunkAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.GoogleApiException
  commentId: T:Google.GoogleApiException
- uid: Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync*
  commentId: Overload:Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync
  isExternal: false
  name: ExceptionForResponseAsync
  nameWithType: ResumableUpload.ExceptionForResponseAsync
  fullName: Google.Apis.Upload.ResumableUpload.ExceptionForResponseAsync
- uid: System.Threading.Tasks.Task{Google.GoogleApiException}
  commentId: T:System.Threading.Tasks.Task{Google.GoogleApiException}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GoogleApiException>
  nameWithType: Task<GoogleApiException>
  fullName: System.Threading.Tasks.Task<Google.GoogleApiException>
  nameWithType.vb: Task(Of GoogleApiException)
  fullName.vb: System.Threading.Tasks.Task(Of Google.GoogleApiException)
  name.vb: Task(Of GoogleApiException)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.GoogleApiException
    name: GoogleApiException
    nameWithType: GoogleApiException
    fullName: Google.GoogleApiException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.GoogleApiException
    name: GoogleApiException
    nameWithType: GoogleApiException
    fullName: Google.GoogleApiException
  - name: )
    nameWithType: )
    fullName: )
