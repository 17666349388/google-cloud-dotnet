### YamlMime:ManagedReference
items:
- uid: Google.Apis.Download.IMediaDownloader
  commentId: T:Google.Apis.Download.IMediaDownloader
  id: IMediaDownloader
  parent: Google.Apis.Download
  children:
  - Google.Apis.Download.IMediaDownloader.ChunkSize
  - Google.Apis.Download.IMediaDownloader.Download(System.String,System.IO.Stream)
  - Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String,System.IO.Stream)
  - Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  - Google.Apis.Download.IMediaDownloader.ProgressChanged
  langs:
  - csharp
  - vb
  name: IMediaDownloader
  nameWithType: IMediaDownloader
  fullName: Google.Apis.Download.IMediaDownloader
  type: Interface
  source:
    remote:
      path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: IMediaDownloader
    path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
    startLine: 24
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Download
  summary: Media download which uses download file part by part, by <xref href="Google.Apis.Download.IMediaDownloader.ChunkSize" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public interface IMediaDownloader
    content.vb: Public Interface IMediaDownloader
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Google.Apis.Download.IMediaDownloader.ProgressChanged
  commentId: E:Google.Apis.Download.IMediaDownloader.ProgressChanged
  id: ProgressChanged
  parent: Google.Apis.Download.IMediaDownloader
  langs:
  - csharp
  - vb
  name: ProgressChanged
  nameWithType: IMediaDownloader.ProgressChanged
  fullName: Google.Apis.Download.IMediaDownloader.ProgressChanged
  type: Event
  source:
    remote:
      path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ProgressChanged
    path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
    startLine: 27
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Download
  summary: An event which notifies when the download status has been changed.
  example: []
  syntax:
    content: event Action<IDownloadProgress> ProgressChanged
    return:
      type: System.Action{Google.Apis.Download.IDownloadProgress}
    content.vb: Event ProgressChanged As Action(Of IDownloadProgress)
- uid: Google.Apis.Download.IMediaDownloader.ChunkSize
  commentId: P:Google.Apis.Download.IMediaDownloader.ChunkSize
  id: ChunkSize
  parent: Google.Apis.Download.IMediaDownloader
  langs:
  - csharp
  - vb
  name: ChunkSize
  nameWithType: IMediaDownloader.ChunkSize
  fullName: Google.Apis.Download.IMediaDownloader.ChunkSize
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ChunkSize
    path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
    startLine: 30
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Download
  summary: Gets or sets the chunk size to download, it defines the size of each part.
  example: []
  syntax:
    content: int ChunkSize { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Property ChunkSize As Integer
  overload: Google.Apis.Download.IMediaDownloader.ChunkSize*
  modifiers.csharp:
  - get
  - set
- uid: Google.Apis.Download.IMediaDownloader.Download(System.String,System.IO.Stream)
  commentId: M:Google.Apis.Download.IMediaDownloader.Download(System.String,System.IO.Stream)
  id: Download(System.String,System.IO.Stream)
  parent: Google.Apis.Download.IMediaDownloader
  langs:
  - csharp
  - vb
  name: Download(String, Stream)
  nameWithType: IMediaDownloader.Download(String, Stream)
  fullName: Google.Apis.Download.IMediaDownloader.Download(System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Download
    path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
    startLine: 33
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Download
  summary: Downloads synchronously the given URL to the given stream.
  example: []
  syntax:
    content: IDownloadProgress Download(string url, Stream stream)
    parameters:
    - id: url
      type: System.String
    - id: stream
      type: System.IO.Stream
    return:
      type: Google.Apis.Download.IDownloadProgress
    content.vb: Function Download(url As String, stream As Stream) As IDownloadProgress
  overload: Google.Apis.Download.IMediaDownloader.Download*
- uid: Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String,System.IO.Stream)
  commentId: M:Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String,System.IO.Stream)
  id: DownloadAsync(System.String,System.IO.Stream)
  parent: Google.Apis.Download.IMediaDownloader
  langs:
  - csharp
  - vb
  name: DownloadAsync(String, Stream)
  nameWithType: IMediaDownloader.DownloadAsync(String, Stream)
  fullName: Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: DownloadAsync
    path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
    startLine: 36
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Download
  summary: Downloads asynchronously the given URL to the given stream.
  example: []
  syntax:
    content: Task<IDownloadProgress> DownloadAsync(string url, Stream stream)
    parameters:
    - id: url
      type: System.String
    - id: stream
      type: System.IO.Stream
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Download.IDownloadProgress}
    content.vb: Function DownloadAsync(url As String, stream As Stream) As Task(Of IDownloadProgress)
  overload: Google.Apis.Download.IMediaDownloader.DownloadAsync*
- uid: Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  id: DownloadAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)
  parent: Google.Apis.Download.IMediaDownloader
  langs:
  - csharp
  - vb
  name: DownloadAsync(String, Stream, CancellationToken)
  nameWithType: IMediaDownloader.DownloadAsync(String, Stream, CancellationToken)
  fullName: Google.Apis.Download.IMediaDownloader.DownloadAsync(System.String, System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: DownloadAsync
    path: Src/Support/Google.Apis/Download/IMediaDownloader.cs
    startLine: 47
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Download
  summary: "\nDownloads asynchronously the given URL to the given stream. This download method supports a cancellation \ntoken to cancel a request before it was completed.\n"
  remarks: "\nIn case the download fails <xref href=\"Google.Apis.Download.IDownloadProgress.Exception\" data-throw-if-not-resolved=\"false\"></xref> will contain the exception that\ncause the failure. The only exception which will be thrown is \n<xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> which indicates that the task was canceled.\n"
  example: []
  syntax:
    content: Task<IDownloadProgress> DownloadAsync(string url, Stream stream, CancellationToken cancellationToken)
    parameters:
    - id: url
      type: System.String
    - id: stream
      type: System.IO.Stream
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Download.IDownloadProgress}
    content.vb: Function DownloadAsync(url As String, stream As Stream, cancellationToken As CancellationToken) As Task(Of IDownloadProgress)
  overload: Google.Apis.Download.IMediaDownloader.DownloadAsync*
references:
- uid: Google.Apis.Download.IMediaDownloader.ChunkSize
  commentId: P:Google.Apis.Download.IMediaDownloader.ChunkSize
  parent: Google.Apis.Download.IMediaDownloader
  isExternal: false
  name: ChunkSize
  nameWithType: IMediaDownloader.ChunkSize
  fullName: Google.Apis.Download.IMediaDownloader.ChunkSize
- uid: Google.Apis.Download
  commentId: N:Google.Apis.Download
  isExternal: false
  name: Google.Apis.Download
  nameWithType: Google.Apis.Download
  fullName: Google.Apis.Download
- uid: Google.Apis.Download.IMediaDownloader
  commentId: T:Google.Apis.Download.IMediaDownloader
  parent: Google.Apis.Download
  isExternal: false
  name: IMediaDownloader
  nameWithType: IMediaDownloader
  fullName: Google.Apis.Download.IMediaDownloader
- uid: System.Action{Google.Apis.Download.IDownloadProgress}
  commentId: T:System.Action{Google.Apis.Download.IDownloadProgress}
  parent: System
  definition: System.Action`1
  name: Action<IDownloadProgress>
  nameWithType: Action<IDownloadProgress>
  fullName: System.Action<Google.Apis.Download.IDownloadProgress>
  nameWithType.vb: Action(Of IDownloadProgress)
  fullName.vb: System.Action(Of Google.Apis.Download.IDownloadProgress)
  name.vb: Action(Of IDownloadProgress)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Download.IDownloadProgress
    name: IDownloadProgress
    nameWithType: IDownloadProgress
    fullName: Google.Apis.Download.IDownloadProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Download.IDownloadProgress
    name: IDownloadProgress
    nameWithType: IDownloadProgress
    fullName: Google.Apis.Download.IDownloadProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Apis.Download.IMediaDownloader.ChunkSize*
  commentId: Overload:Google.Apis.Download.IMediaDownloader.ChunkSize
  isExternal: false
  name: ChunkSize
  nameWithType: IMediaDownloader.ChunkSize
  fullName: Google.Apis.Download.IMediaDownloader.ChunkSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Google.Apis.Download.IMediaDownloader.Download*
  commentId: Overload:Google.Apis.Download.IMediaDownloader.Download
  isExternal: false
  name: Download
  nameWithType: IMediaDownloader.Download
  fullName: Google.Apis.Download.IMediaDownloader.Download
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Google.Apis.Download.IDownloadProgress
  commentId: T:Google.Apis.Download.IDownloadProgress
  parent: Google.Apis.Download
  isExternal: false
  name: IDownloadProgress
  nameWithType: IDownloadProgress
  fullName: Google.Apis.Download.IDownloadProgress
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Google.Apis.Download.IMediaDownloader.DownloadAsync*
  commentId: Overload:Google.Apis.Download.IMediaDownloader.DownloadAsync
  isExternal: false
  name: DownloadAsync
  nameWithType: IMediaDownloader.DownloadAsync
  fullName: Google.Apis.Download.IMediaDownloader.DownloadAsync
- uid: System.Threading.Tasks.Task{Google.Apis.Download.IDownloadProgress}
  commentId: T:System.Threading.Tasks.Task{Google.Apis.Download.IDownloadProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDownloadProgress>
  nameWithType: Task<IDownloadProgress>
  fullName: System.Threading.Tasks.Task<Google.Apis.Download.IDownloadProgress>
  nameWithType.vb: Task(Of IDownloadProgress)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Apis.Download.IDownloadProgress)
  name.vb: Task(Of IDownloadProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Download.IDownloadProgress
    name: IDownloadProgress
    nameWithType: IDownloadProgress
    fullName: Google.Apis.Download.IDownloadProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Download.IDownloadProgress
    name: IDownloadProgress
    nameWithType: IDownloadProgress
    fullName: Google.Apis.Download.IDownloadProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Google.Apis.Download.IDownloadProgress.Exception
  commentId: P:Google.Apis.Download.IDownloadProgress.Exception
- uid: System.Threading.Tasks.TaskCanceledException
  commentId: T:System.Threading.Tasks.TaskCanceledException
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
