### YamlMime:ManagedReference
items:
- uid: Google.Apis.Util.Store.NullDataStore
  commentId: T:Google.Apis.Util.Store.NullDataStore
  id: NullDataStore
  parent: Google.Apis.Util.Store
  children:
  - Google.Apis.Util.Store.NullDataStore.#ctor
  - Google.Apis.Util.Store.NullDataStore.ClearAsync
  - Google.Apis.Util.Store.NullDataStore.DeleteAsync``1(System.String)
  - Google.Apis.Util.Store.NullDataStore.GetAsync``1(System.String)
  - Google.Apis.Util.Store.NullDataStore.StoreAsync``1(System.String,``0)
  langs:
  - csharp
  - vb
  name: NullDataStore
  nameWithType: NullDataStore
  fullName: Google.Apis.Util.Store.NullDataStore
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: NullDataStore
    path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
    startLine: 23
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Util.Store
  summary: "\nA null datastore. Nothing is stored, nothing is retrievable.\n"
  example: []
  syntax:
    content: 'public class NullDataStore : IDataStore'
    content.vb: >-
      Public Class NullDataStore
          Implements IDataStore
  inheritance:
  - System.Object
  implements:
  - Google.Apis.Util.Store.IDataStore
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Google.Apis.Util.Store.NullDataStore.#ctor
  commentId: M:Google.Apis.Util.Store.NullDataStore.#ctor
  id: '#ctor'
  parent: Google.Apis.Util.Store.NullDataStore
  langs:
  - csharp
  - vb
  name: NullDataStore()
  nameWithType: NullDataStore.NullDataStore()
  fullName: Google.Apis.Util.Store.NullDataStore.NullDataStore()
  type: Constructor
  source:
    remote:
      path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: .ctor
    path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
    startLine: 37
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Util.Store
  summary: "\nConstruct a new null datastore, that stores nothing.\n"
  example: []
  syntax:
    content: public NullDataStore()
    content.vb: Public Sub New
  overload: Google.Apis.Util.Store.NullDataStore.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Util.Store.NullDataStore.ClearAsync
  commentId: M:Google.Apis.Util.Store.NullDataStore.ClearAsync
  id: ClearAsync
  parent: Google.Apis.Util.Store.NullDataStore
  langs:
  - csharp
  - vb
  name: ClearAsync()
  nameWithType: NullDataStore.ClearAsync()
  fullName: Google.Apis.Util.Store.NullDataStore.ClearAsync()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ClearAsync
    path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
    startLine: 42
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Util.Store
  example: []
  syntax:
    content: public Task ClearAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ClearAsync As Task
  overload: Google.Apis.Util.Store.NullDataStore.ClearAsync*
  implements:
  - Google.Apis.Util.Store.IDataStore.ClearAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Util.Store.NullDataStore.DeleteAsync``1(System.String)
  commentId: M:Google.Apis.Util.Store.NullDataStore.DeleteAsync``1(System.String)
  id: DeleteAsync``1(System.String)
  parent: Google.Apis.Util.Store.NullDataStore
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(String)
  nameWithType: NullDataStore.DeleteAsync<T>(String)
  fullName: Google.Apis.Util.Store.NullDataStore.DeleteAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: DeleteAsync
    path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
    startLine: 45
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Util.Store
  example: []
  syntax:
    content: public Task DeleteAsync<T>(string key)
    parameters:
    - id: key
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteAsync(Of T)(key As String) As Task
  overload: Google.Apis.Util.Store.NullDataStore.DeleteAsync*
  implements:
  - Google.Apis.Util.Store.IDataStore.DeleteAsync``1(System.String)
  nameWithType.vb: NullDataStore.DeleteAsync(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Util.Store.NullDataStore.DeleteAsync(Of T)(System.String)
  name.vb: DeleteAsync(Of T)(String)
- uid: Google.Apis.Util.Store.NullDataStore.GetAsync``1(System.String)
  commentId: M:Google.Apis.Util.Store.NullDataStore.GetAsync``1(System.String)
  id: GetAsync``1(System.String)
  parent: Google.Apis.Util.Store.NullDataStore
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String)
  nameWithType: NullDataStore.GetAsync<T>(String)
  fullName: Google.Apis.Util.Store.NullDataStore.GetAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GetAsync
    path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
    startLine: 55
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Util.Store
  summary: "\nAsynchronously returns the stored value for the given key or <code>null</code> if not found.\nThis implementation of <xref href=\"Google.Apis.Util.Store.IDataStore\" data-throw-if-not-resolved=\"false\"></xref> will always return a completed task\nwith a result of <code>null</code>. \n"
  example: []
  syntax:
    content: public Task<T> GetAsync<T>(string key)
    parameters:
    - id: key
      type: System.String
      description: The key to retrieve its value.
    typeParameters:
    - id: T
      description: The type to retrieve from the data store.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Always <code>null</code>.
    content.vb: Public Function GetAsync(Of T)(key As String) As Task(Of T)
  overload: Google.Apis.Util.Store.NullDataStore.GetAsync*
  implements:
  - Google.Apis.Util.Store.IDataStore.GetAsync``1(System.String)
  nameWithType.vb: NullDataStore.GetAsync(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Util.Store.NullDataStore.GetAsync(Of T)(System.String)
  name.vb: GetAsync(Of T)(String)
- uid: Google.Apis.Util.Store.NullDataStore.StoreAsync``1(System.String,``0)
  commentId: M:Google.Apis.Util.Store.NullDataStore.StoreAsync``1(System.String,``0)
  id: StoreAsync``1(System.String,``0)
  parent: Google.Apis.Util.Store.NullDataStore
  langs:
  - csharp
  - vb
  name: StoreAsync<T>(String, T)
  nameWithType: NullDataStore.StoreAsync<T>(String, T)
  fullName: Google.Apis.Util.Store.NullDataStore.StoreAsync<T>(System.String, T)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: StoreAsync
    path: Src/Support/Google.Apis/Util/Store/NullDataStore.cs
    startLine: 66
  assemblies:
  - Google.Apis
  namespace: Google.Apis.Util.Store
  summary: "\nAsynchronously stores the given value for the given key (replacing any existing value).\nThis implementation of <xref href=\"Google.Apis.Util.Store.IDataStore\" data-throw-if-not-resolved=\"false\"></xref> does not store the value,\nand will not return it in future calls to <xref href=\"Google.Apis.Util.Store.NullDataStore.GetAsync%60%601(System.String)\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public Task StoreAsync<T>(string key, T value)
    parameters:
    - id: key
      type: System.String
      description: The key.
    - id: value
      type: '{T}'
      description: The value.
    typeParameters:
    - id: T
      description: The type to store in the data store.
    return:
      type: System.Threading.Tasks.Task
      description: A task that completes immediately.
    content.vb: Public Function StoreAsync(Of T)(key As String, value As T) As Task
  overload: Google.Apis.Util.Store.NullDataStore.StoreAsync*
  implements:
  - Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,{T})
  nameWithType.vb: NullDataStore.StoreAsync(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Util.Store.NullDataStore.StoreAsync(Of T)(System.String, T)
  name.vb: StoreAsync(Of T)(String, T)
references:
- uid: Google.Apis.Util.Store
  commentId: N:Google.Apis.Util.Store
  name: Google.Apis.Util.Store
  nameWithType: Google.Apis.Util.Store
  fullName: Google.Apis.Util.Store
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Apis.Util.Store.IDataStore
  commentId: T:Google.Apis.Util.Store.IDataStore
  parent: Google.Apis.Util.Store
  name: IDataStore
  nameWithType: IDataStore
  fullName: Google.Apis.Util.Store.IDataStore
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Apis.Util.Store.NullDataStore.#ctor*
  commentId: Overload:Google.Apis.Util.Store.NullDataStore.#ctor
  name: NullDataStore
  nameWithType: NullDataStore.NullDataStore
  fullName: Google.Apis.Util.Store.NullDataStore.NullDataStore
- uid: Google.Apis.Util.Store.NullDataStore.ClearAsync*
  commentId: Overload:Google.Apis.Util.Store.NullDataStore.ClearAsync
  name: ClearAsync
  nameWithType: NullDataStore.ClearAsync
  fullName: Google.Apis.Util.Store.NullDataStore.ClearAsync
- uid: Google.Apis.Util.Store.IDataStore.ClearAsync
  commentId: M:Google.Apis.Util.Store.IDataStore.ClearAsync
  parent: Google.Apis.Util.Store.IDataStore
  name: ClearAsync()
  nameWithType: IDataStore.ClearAsync()
  fullName: Google.Apis.Util.Store.IDataStore.ClearAsync()
  spec.csharp:
  - uid: Google.Apis.Util.Store.IDataStore.ClearAsync
    name: ClearAsync
    nameWithType: IDataStore.ClearAsync
    fullName: Google.Apis.Util.Store.IDataStore.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Store.IDataStore.ClearAsync
    name: ClearAsync
    nameWithType: IDataStore.ClearAsync
    fullName: Google.Apis.Util.Store.IDataStore.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Google.Apis.Util.Store.NullDataStore.DeleteAsync*
  commentId: Overload:Google.Apis.Util.Store.NullDataStore.DeleteAsync
  name: DeleteAsync
  nameWithType: NullDataStore.DeleteAsync
  fullName: Google.Apis.Util.Store.NullDataStore.DeleteAsync
- uid: Google.Apis.Util.Store.IDataStore.DeleteAsync``1(System.String)
  commentId: M:Google.Apis.Util.Store.IDataStore.DeleteAsync``1(System.String)
  parent: Google.Apis.Util.Store.IDataStore
  isExternal: true
  name: DeleteAsync<T>(String)
  nameWithType: IDataStore.DeleteAsync<T>(String)
  fullName: Google.Apis.Util.Store.IDataStore.DeleteAsync<T>(System.String)
  nameWithType.vb: IDataStore.DeleteAsync(Of T)(String)
  fullName.vb: Google.Apis.Util.Store.IDataStore.DeleteAsync(Of T)(System.String)
  name.vb: DeleteAsync(Of T)(String)
  spec.csharp:
  - uid: Google.Apis.Util.Store.IDataStore.DeleteAsync``1(System.String)
    name: DeleteAsync<T>
    nameWithType: IDataStore.DeleteAsync<T>
    fullName: Google.Apis.Util.Store.IDataStore.DeleteAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Store.IDataStore.DeleteAsync``1(System.String)
    name: DeleteAsync(Of T)
    nameWithType: IDataStore.DeleteAsync(Of T)
    fullName: Google.Apis.Util.Store.IDataStore.DeleteAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Google.Apis.Util.Store.NullDataStore.GetAsync*
  commentId: Overload:Google.Apis.Util.Store.NullDataStore.GetAsync
  name: GetAsync
  nameWithType: NullDataStore.GetAsync
  fullName: Google.Apis.Util.Store.NullDataStore.GetAsync
- uid: Google.Apis.Util.Store.IDataStore.GetAsync``1(System.String)
  commentId: M:Google.Apis.Util.Store.IDataStore.GetAsync``1(System.String)
  parent: Google.Apis.Util.Store.IDataStore
  isExternal: true
  name: GetAsync<T>(String)
  nameWithType: IDataStore.GetAsync<T>(String)
  fullName: Google.Apis.Util.Store.IDataStore.GetAsync<T>(System.String)
  nameWithType.vb: IDataStore.GetAsync(Of T)(String)
  fullName.vb: Google.Apis.Util.Store.IDataStore.GetAsync(Of T)(System.String)
  name.vb: GetAsync(Of T)(String)
  spec.csharp:
  - uid: Google.Apis.Util.Store.IDataStore.GetAsync``1(System.String)
    name: GetAsync<T>
    nameWithType: IDataStore.GetAsync<T>
    fullName: Google.Apis.Util.Store.IDataStore.GetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Store.IDataStore.GetAsync``1(System.String)
    name: GetAsync(Of T)
    nameWithType: IDataStore.GetAsync(Of T)
    fullName: Google.Apis.Util.Store.IDataStore.GetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util.Store.NullDataStore.GetAsync``1(System.String)
  commentId: M:Google.Apis.Util.Store.NullDataStore.GetAsync``1(System.String)
  isExternal: true
- uid: Google.Apis.Util.Store.NullDataStore.StoreAsync*
  commentId: Overload:Google.Apis.Util.Store.NullDataStore.StoreAsync
  name: StoreAsync
  nameWithType: NullDataStore.StoreAsync
  fullName: Google.Apis.Util.Store.NullDataStore.StoreAsync
- uid: Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,{T})
  commentId: M:Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
  parent: Google.Apis.Util.Store.IDataStore
  definition: Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
  name: StoreAsync<T>(String, T)
  nameWithType: IDataStore.StoreAsync<T>(String, T)
  fullName: Google.Apis.Util.Store.IDataStore.StoreAsync<T>(System.String, T)
  nameWithType.vb: IDataStore.StoreAsync(Of T)(String, T)
  fullName.vb: Google.Apis.Util.Store.IDataStore.StoreAsync(Of T)(System.String, T)
  name.vb: StoreAsync(Of T)(String, T)
  spec.csharp:
  - uid: Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
    name: StoreAsync<T>
    nameWithType: IDataStore.StoreAsync<T>
    fullName: Google.Apis.Util.Store.IDataStore.StoreAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
    name: StoreAsync(Of T)
    nameWithType: IDataStore.StoreAsync(Of T)
    fullName: Google.Apis.Util.Store.IDataStore.StoreAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
  commentId: M:Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
  isExternal: true
  name: StoreAsync<T>(String, T)
  nameWithType: IDataStore.StoreAsync<T>(String, T)
  fullName: Google.Apis.Util.Store.IDataStore.StoreAsync<T>(System.String, T)
  nameWithType.vb: IDataStore.StoreAsync(Of T)(String, T)
  fullName.vb: Google.Apis.Util.Store.IDataStore.StoreAsync(Of T)(System.String, T)
  name.vb: StoreAsync(Of T)(String, T)
  spec.csharp:
  - uid: Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
    name: StoreAsync<T>
    nameWithType: IDataStore.StoreAsync<T>
    fullName: Google.Apis.Util.Store.IDataStore.StoreAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Store.IDataStore.StoreAsync``1(System.String,``0)
    name: StoreAsync(Of T)
    nameWithType: IDataStore.StoreAsync(Of T)
    fullName: Google.Apis.Util.Store.IDataStore.StoreAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
