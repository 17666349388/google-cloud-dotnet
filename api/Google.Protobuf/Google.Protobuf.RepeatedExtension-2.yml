### YamlMime:ManagedReference
items:
- uid: Google.Protobuf.RepeatedExtension`2
  commentId: T:Google.Protobuf.RepeatedExtension`2
  id: RepeatedExtension`2
  parent: Google.Protobuf
  children:
  - Google.Protobuf.RepeatedExtension`2.#ctor(System.Int32,Google.Protobuf.FieldCodec{`1})
  langs:
  - csharp
  - vb
  name: RepeatedExtension<TTarget, TValue>
  nameWithType: RepeatedExtension<TTarget, TValue>
  fullName: Google.Protobuf.RepeatedExtension<TTarget, TValue>
  type: Class
  source:
    remote:
      path: csharp/src/Google.Protobuf/Extension.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: RepeatedExtension
    path: csharp/src/Google.Protobuf/Extension.cs
    startLine: 93
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nRepresents a type-safe extension identifier used for getting repeated extension values in <xref href=\"Google.Protobuf.IExtendableMessage%601\" data-throw-if-not-resolved=\"false\"></xref> instances.\nThis API is experimental and subject to change.\n"
  example: []
  syntax:
    content: 'public sealed class RepeatedExtension<TTarget, TValue> : Extension where TTarget : IExtendableMessage<TTarget>'
    typeParameters:
    - id: TTarget
      description: The message type this field applies to
    - id: TValue
      description: The repeated field value type of this extension
    content.vb: >-
      Public NotInheritable Class RepeatedExtension(Of TTarget As IExtendableMessage(Of TTarget), TValue)
          Inherits Extension
  inheritance:
  - System.Object
  - Google.Protobuf.Extension
  inheritedMembers:
  - Google.Protobuf.Extension.FieldNumber
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: RepeatedExtension(Of TTarget, TValue)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Google.Protobuf.RepeatedExtension(Of TTarget, TValue)
  name.vb: RepeatedExtension(Of TTarget, TValue)
- uid: Google.Protobuf.RepeatedExtension`2.#ctor(System.Int32,Google.Protobuf.FieldCodec{`1})
  commentId: M:Google.Protobuf.RepeatedExtension`2.#ctor(System.Int32,Google.Protobuf.FieldCodec{`1})
  id: '#ctor(System.Int32,Google.Protobuf.FieldCodec{`1})'
  parent: Google.Protobuf.RepeatedExtension`2
  langs:
  - csharp
  - vb
  name: RepeatedExtension(Int32, FieldCodec<TValue>)
  nameWithType: RepeatedExtension<TTarget, TValue>.RepeatedExtension(Int32, FieldCodec<TValue>)
  fullName: Google.Protobuf.RepeatedExtension<TTarget, TValue>.RepeatedExtension(System.Int32, Google.Protobuf.FieldCodec<TValue>)
  type: Constructor
  source:
    remote:
      path: csharp/src/Google.Protobuf/Extension.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: .ctor
    path: csharp/src/Google.Protobuf/Extension.cs
    startLine: 100
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a new repeated extension identifier with the specified field number and codec\n"
  example: []
  syntax:
    content: public RepeatedExtension(int fieldNumber, FieldCodec<TValue> codec)
    parameters:
    - id: fieldNumber
      type: System.Int32
    - id: codec
      type: Google.Protobuf.FieldCodec{{TValue}}
    content.vb: Public Sub New(fieldNumber As Integer, codec As FieldCodec(Of TValue))
  overload: Google.Protobuf.RepeatedExtension`2.#ctor*
  nameWithType.vb: RepeatedExtension(Of TTarget, TValue).RepeatedExtension(Int32, FieldCodec(Of TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Protobuf.RepeatedExtension(Of TTarget, TValue).RepeatedExtension(System.Int32, Google.Protobuf.FieldCodec(Of TValue))
  name.vb: RepeatedExtension(Int32, FieldCodec(Of TValue))
references:
- uid: Google.Protobuf.IExtendableMessage`1
  commentId: T:Google.Protobuf.IExtendableMessage`1
  name: IExtendableMessage<T>
  nameWithType: IExtendableMessage<T>
  fullName: Google.Protobuf.IExtendableMessage<T>
  nameWithType.vb: IExtendableMessage(Of T)
  fullName.vb: Google.Protobuf.IExtendableMessage(Of T)
  name.vb: IExtendableMessage(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IExtendableMessage`1
    name: IExtendableMessage
    nameWithType: IExtendableMessage
    fullName: Google.Protobuf.IExtendableMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IExtendableMessage`1
    name: IExtendableMessage
    nameWithType: IExtendableMessage
    fullName: Google.Protobuf.IExtendableMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Protobuf.Extension
  commentId: T:Google.Protobuf.Extension
  parent: Google.Protobuf
  name: Extension
  nameWithType: Extension
  fullName: Google.Protobuf.Extension
- uid: Google.Protobuf.Extension.FieldNumber
  commentId: P:Google.Protobuf.Extension.FieldNumber
  parent: Google.Protobuf.Extension
  name: FieldNumber
  nameWithType: Extension.FieldNumber
  fullName: Google.Protobuf.Extension.FieldNumber
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Protobuf.RepeatedExtension`2.#ctor*
  commentId: Overload:Google.Protobuf.RepeatedExtension`2.#ctor
  name: RepeatedExtension
  nameWithType: RepeatedExtension<TTarget, TValue>.RepeatedExtension
  fullName: Google.Protobuf.RepeatedExtension<TTarget, TValue>.RepeatedExtension
  nameWithType.vb: RepeatedExtension(Of TTarget, TValue).RepeatedExtension
  fullName.vb: Google.Protobuf.RepeatedExtension(Of TTarget, TValue).RepeatedExtension
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Google.Protobuf.FieldCodec{{TValue}}
  commentId: T:Google.Protobuf.FieldCodec{`1}
  parent: Google.Protobuf
  definition: Google.Protobuf.FieldCodec`1
  name: FieldCodec<TValue>
  nameWithType: FieldCodec<TValue>
  fullName: Google.Protobuf.FieldCodec<TValue>
  nameWithType.vb: FieldCodec(Of TValue)
  fullName.vb: Google.Protobuf.FieldCodec(Of TValue)
  name.vb: FieldCodec(Of TValue)
  spec.csharp:
  - uid: Google.Protobuf.FieldCodec`1
    name: FieldCodec
    nameWithType: FieldCodec
    fullName: Google.Protobuf.FieldCodec
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.FieldCodec`1
    name: FieldCodec
    nameWithType: FieldCodec
    fullName: Google.Protobuf.FieldCodec
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.FieldCodec`1
  commentId: T:Google.Protobuf.FieldCodec`1
  name: FieldCodec<T>
  nameWithType: FieldCodec<T>
  fullName: Google.Protobuf.FieldCodec<T>
  nameWithType.vb: FieldCodec(Of T)
  fullName.vb: Google.Protobuf.FieldCodec(Of T)
  name.vb: FieldCodec(Of T)
  spec.csharp:
  - uid: Google.Protobuf.FieldCodec`1
    name: FieldCodec
    nameWithType: FieldCodec
    fullName: Google.Protobuf.FieldCodec
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.FieldCodec`1
    name: FieldCodec
    nameWithType: FieldCodec
    fullName: Google.Protobuf.FieldCodec
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
