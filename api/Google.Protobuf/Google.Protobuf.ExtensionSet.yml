### YamlMime:ManagedReference
items:
- uid: Google.Protobuf.ExtensionSet
  commentId: T:Google.Protobuf.ExtensionSet
  id: ExtensionSet
  parent: Google.Protobuf
  children:
  - Google.Protobuf.ExtensionSet.Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  - Google.Protobuf.ExtensionSet.Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  - Google.Protobuf.ExtensionSet.Clone``1(Google.Protobuf.ExtensionSet{``0})
  - Google.Protobuf.ExtensionSet.Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  - Google.Protobuf.ExtensionSet.Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  - Google.Protobuf.ExtensionSet.GetOrInitialize``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  - Google.Protobuf.ExtensionSet.Has``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  - Google.Protobuf.ExtensionSet.MergeFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.ExtensionSet{``0})
  - Google.Protobuf.ExtensionSet.Set``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1},``1)
  - Google.Protobuf.ExtensionSet.TryMergeFieldFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.CodedInputStream)
  langs:
  - csharp
  - vb
  name: ExtensionSet
  nameWithType: ExtensionSet
  fullName: Google.Protobuf.ExtensionSet
  type: Class
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: ExtensionSet
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 44
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nMethods for managing <xref href=\"Google.Protobuf.ExtensionSet%601\" data-throw-if-not-resolved=\"false\"></xref>s with null checking.\n\nMost users will not use this class directly and its API is experimental and subject to change.\n"
  example: []
  syntax:
    content: public static class ExtensionSet
    content.vb: Public Module ExtensionSet
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Google.Protobuf.ExtensionSet.Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  commentId: M:Google.Protobuf.ExtensionSet.Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  id: Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: Get<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>)
  nameWithType: ExtensionSet.Get<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>)
  fullName: Google.Protobuf.ExtensionSet.Get<TTarget, TValue>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.Extension<TTarget, TValue>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Get
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 59
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nGets the value of the specified extension\n"
  example: []
  syntax:
    content: >-
      public static TValue Get<TTarget, TValue>(ref ExtensionSet<TTarget> set, Extension<TTarget, TValue> extension)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: extension
      type: Google.Protobuf.Extension{{TTarget},{TValue}}
    typeParameters:
    - id: TTarget
    - id: TValue
    return:
      type: '{TValue}'
    content.vb: Public Shared Function Get(Of TTarget As IExtendableMessage(Of TTarget), TValue)(ByRef set As ExtensionSet(Of TTarget), extension As Extension(Of TTarget, TValue)) As TValue
  overload: Google.Protobuf.ExtensionSet.Get*
  nameWithType.vb: ExtensionSet.Get(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.Get(Of TTarget, TValue)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.Extension(Of TTarget, TValue))
  name.vb: Get(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue))
- uid: Google.Protobuf.ExtensionSet.Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  commentId: M:Google.Protobuf.ExtensionSet.Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  id: Get``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: Get<TTarget, TValue>(ref ExtensionSet<TTarget>, RepeatedExtension<TTarget, TValue>)
  nameWithType: ExtensionSet.Get<TTarget, TValue>(ref ExtensionSet<TTarget>, RepeatedExtension<TTarget, TValue>)
  fullName: Google.Protobuf.ExtensionSet.Get<TTarget, TValue>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.RepeatedExtension<TTarget, TValue>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Get
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 75
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nGets the value of the specified repeated extension or null if it doesn&apos;t exist in this set\n"
  example: []
  syntax:
    content: >-
      public static RepeatedField<TValue> Get<TTarget, TValue>(ref ExtensionSet<TTarget> set, RepeatedExtension<TTarget, TValue> extension)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: extension
      type: Google.Protobuf.RepeatedExtension{{TTarget},{TValue}}
    typeParameters:
    - id: TTarget
    - id: TValue
    return:
      type: Google.Protobuf.Collections.RepeatedField{{TValue}}
    content.vb: Public Shared Function Get(Of TTarget As IExtendableMessage(Of TTarget), TValue)(ByRef set As ExtensionSet(Of TTarget), extension As RepeatedExtension(Of TTarget, TValue)) As RepeatedField(Of TValue)
  overload: Google.Protobuf.ExtensionSet.Get*
  nameWithType.vb: ExtensionSet.Get(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), RepeatedExtension(Of TTarget, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.Get(Of TTarget, TValue)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.RepeatedExtension(Of TTarget, TValue))
  name.vb: Get(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), RepeatedExtension(Of TTarget, TValue))
- uid: Google.Protobuf.ExtensionSet.GetOrInitialize``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  commentId: M:Google.Protobuf.ExtensionSet.GetOrInitialize``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  id: GetOrInitialize``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: GetOrInitialize<TTarget, TValue>(ref ExtensionSet<TTarget>, RepeatedExtension<TTarget, TValue>)
  nameWithType: ExtensionSet.GetOrInitialize<TTarget, TValue>(ref ExtensionSet<TTarget>, RepeatedExtension<TTarget, TValue>)
  fullName: Google.Protobuf.ExtensionSet.GetOrInitialize<TTarget, TValue>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.RepeatedExtension<TTarget, TValue>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: GetOrInitialize
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 91
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nGets the value of the specified repeated extension, registering it if it doesn&apos;t exist\n"
  example: []
  syntax:
    content: >-
      public static RepeatedField<TValue> GetOrInitialize<TTarget, TValue>(ref ExtensionSet<TTarget> set, RepeatedExtension<TTarget, TValue> extension)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: extension
      type: Google.Protobuf.RepeatedExtension{{TTarget},{TValue}}
    typeParameters:
    - id: TTarget
    - id: TValue
    return:
      type: Google.Protobuf.Collections.RepeatedField{{TValue}}
    content.vb: Public Shared Function GetOrInitialize(Of TTarget As IExtendableMessage(Of TTarget), TValue)(ByRef set As ExtensionSet(Of TTarget), extension As RepeatedExtension(Of TTarget, TValue)) As RepeatedField(Of TValue)
  overload: Google.Protobuf.ExtensionSet.GetOrInitialize*
  nameWithType.vb: ExtensionSet.GetOrInitialize(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), RepeatedExtension(Of TTarget, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.GetOrInitialize(Of TTarget, TValue)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.RepeatedExtension(Of TTarget, TValue))
  name.vb: GetOrInitialize(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), RepeatedExtension(Of TTarget, TValue))
- uid: Google.Protobuf.ExtensionSet.Set``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1},``1)
  commentId: M:Google.Protobuf.ExtensionSet.Set``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1},``1)
  id: Set``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1},``1)
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: Set<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>, TValue)
  nameWithType: ExtensionSet.Set<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>, TValue)
  fullName: Google.Protobuf.ExtensionSet.Set<TTarget, TValue>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.Extension<TTarget, TValue>, TValue)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Set
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 115
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nSets the value of the specified extension. This will make a new instance of ExtensionSet if the set is null.\n"
  example: []
  syntax:
    content: >-
      public static void Set<TTarget, TValue>(ref ExtensionSet<TTarget> set, Extension<TTarget, TValue> extension, TValue value)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: extension
      type: Google.Protobuf.Extension{{TTarget},{TValue}}
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TTarget
    - id: TValue
    content.vb: Public Shared Sub Set(Of TTarget As IExtendableMessage(Of TTarget), TValue)(ByRef set As ExtensionSet(Of TTarget), extension As Extension(Of TTarget, TValue), value As TValue)
  overload: Google.Protobuf.ExtensionSet.Set*
  nameWithType.vb: ExtensionSet.Set(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue), TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.Set(Of TTarget, TValue)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.Extension(Of TTarget, TValue), TValue)
  name.vb: Set(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue), TValue)
- uid: Google.Protobuf.ExtensionSet.Has``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  commentId: M:Google.Protobuf.ExtensionSet.Has``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  id: Has``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: Has<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>)
  nameWithType: ExtensionSet.Has<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>)
  fullName: Google.Protobuf.ExtensionSet.Has<TTarget, TValue>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.Extension<TTarget, TValue>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Has
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 141
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nGets whether the value of the specified extension is set\n"
  example: []
  syntax:
    content: >-
      public static bool Has<TTarget, TValue>(ref ExtensionSet<TTarget> set, Extension<TTarget, TValue> extension)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: extension
      type: Google.Protobuf.Extension{{TTarget},{TValue}}
    typeParameters:
    - id: TTarget
    - id: TValue
    return:
      type: System.Boolean
    content.vb: Public Shared Function Has(Of TTarget As IExtendableMessage(Of TTarget), TValue)(ByRef set As ExtensionSet(Of TTarget), extension As Extension(Of TTarget, TValue)) As Boolean
  overload: Google.Protobuf.ExtensionSet.Has*
  nameWithType.vb: ExtensionSet.Has(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.Has(Of TTarget, TValue)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.Extension(Of TTarget, TValue))
  name.vb: Has(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue))
- uid: Google.Protobuf.ExtensionSet.Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  commentId: M:Google.Protobuf.ExtensionSet.Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  id: Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.Extension{``0,``1})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: Clear<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>)
  nameWithType: ExtensionSet.Clear<TTarget, TValue>(ref ExtensionSet<TTarget>, Extension<TTarget, TValue>)
  fullName: Google.Protobuf.ExtensionSet.Clear<TTarget, TValue>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.Extension<TTarget, TValue>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Clear
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 150
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nClears the value of the specified extension\n"
  example: []
  syntax:
    content: >-
      public static void Clear<TTarget, TValue>(ref ExtensionSet<TTarget> set, Extension<TTarget, TValue> extension)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: extension
      type: Google.Protobuf.Extension{{TTarget},{TValue}}
    typeParameters:
    - id: TTarget
    - id: TValue
    content.vb: Public Shared Sub Clear(Of TTarget As IExtendableMessage(Of TTarget), TValue)(ByRef set As ExtensionSet(Of TTarget), extension As Extension(Of TTarget, TValue))
  overload: Google.Protobuf.ExtensionSet.Clear*
  nameWithType.vb: ExtensionSet.Clear(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.Clear(Of TTarget, TValue)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.Extension(Of TTarget, TValue))
  name.vb: Clear(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), Extension(Of TTarget, TValue))
- uid: Google.Protobuf.ExtensionSet.Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  commentId: M:Google.Protobuf.ExtensionSet.Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  id: Clear``2(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.RepeatedExtension{``0,``1})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: Clear<TTarget, TValue>(ref ExtensionSet<TTarget>, RepeatedExtension<TTarget, TValue>)
  nameWithType: ExtensionSet.Clear<TTarget, TValue>(ref ExtensionSet<TTarget>, RepeatedExtension<TTarget, TValue>)
  fullName: Google.Protobuf.ExtensionSet.Clear<TTarget, TValue>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.RepeatedExtension<TTarget, TValue>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Clear
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 166
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nClears the value of the specified extension\n"
  example: []
  syntax:
    content: >-
      public static void Clear<TTarget, TValue>(ref ExtensionSet<TTarget> set, RepeatedExtension<TTarget, TValue> extension)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: extension
      type: Google.Protobuf.RepeatedExtension{{TTarget},{TValue}}
    typeParameters:
    - id: TTarget
    - id: TValue
    content.vb: Public Shared Sub Clear(Of TTarget As IExtendableMessage(Of TTarget), TValue)(ByRef set As ExtensionSet(Of TTarget), extension As RepeatedExtension(Of TTarget, TValue))
  overload: Google.Protobuf.ExtensionSet.Clear*
  nameWithType.vb: ExtensionSet.Clear(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), RepeatedExtension(Of TTarget, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.Clear(Of TTarget, TValue)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.RepeatedExtension(Of TTarget, TValue))
  name.vb: Clear(Of TTarget, TValue)(ByRef ExtensionSet(Of TTarget), RepeatedExtension(Of TTarget, TValue))
- uid: Google.Protobuf.ExtensionSet.TryMergeFieldFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.CodedInputStream)
  commentId: M:Google.Protobuf.ExtensionSet.TryMergeFieldFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.CodedInputStream)
  id: TryMergeFieldFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.CodedInputStream)
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: TryMergeFieldFrom<TTarget>(ref ExtensionSet<TTarget>, CodedInputStream)
  nameWithType: ExtensionSet.TryMergeFieldFrom<TTarget>(ref ExtensionSet<TTarget>, CodedInputStream)
  fullName: Google.Protobuf.ExtensionSet.TryMergeFieldFrom<TTarget>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.CodedInputStream)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: TryMergeFieldFrom
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 183
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nTries to merge a field from the coded input, returning true if the field was merged.\nIf the set is null or the field was not otherwise merged, this returns false.\n"
  example: []
  syntax:
    content: >-
      public static bool TryMergeFieldFrom<TTarget>(ref ExtensionSet<TTarget> set, CodedInputStream stream)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: stream
      type: Google.Protobuf.CodedInputStream
    typeParameters:
    - id: TTarget
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryMergeFieldFrom(Of TTarget As IExtendableMessage(Of TTarget))(ByRef set As ExtensionSet(Of TTarget), stream As CodedInputStream) As Boolean
  overload: Google.Protobuf.ExtensionSet.TryMergeFieldFrom*
  nameWithType.vb: ExtensionSet.TryMergeFieldFrom(Of TTarget)(ByRef ExtensionSet(Of TTarget), CodedInputStream)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.TryMergeFieldFrom(Of TTarget)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.CodedInputStream)
  name.vb: TryMergeFieldFrom(Of TTarget)(ByRef ExtensionSet(Of TTarget), CodedInputStream)
- uid: Google.Protobuf.ExtensionSet.MergeFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.ExtensionSet{``0})
  commentId: M:Google.Protobuf.ExtensionSet.MergeFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.ExtensionSet{``0})
  id: MergeFrom``1(Google.Protobuf.ExtensionSet{``0}@,Google.Protobuf.ExtensionSet{``0})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: MergeFrom<TTarget>(ref ExtensionSet<TTarget>, ExtensionSet<TTarget>)
  nameWithType: ExtensionSet.MergeFrom<TTarget>(ref ExtensionSet<TTarget>, ExtensionSet<TTarget>)
  fullName: Google.Protobuf.ExtensionSet.MergeFrom<TTarget>(ref Google.Protobuf.ExtensionSet<TTarget>, Google.Protobuf.ExtensionSet<TTarget>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: MergeFrom
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 211
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nMerges the second set into the first set, creating a new instance if first is null\n"
  example: []
  syntax:
    content: >-
      public static void MergeFrom<TTarget>(ref ExtensionSet<TTarget> first, ExtensionSet<TTarget> second)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: first
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    - id: second
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    typeParameters:
    - id: TTarget
    content.vb: Public Shared Sub MergeFrom(Of TTarget As IExtendableMessage(Of TTarget))(ByRef first As ExtensionSet(Of TTarget), second As ExtensionSet(Of TTarget))
  overload: Google.Protobuf.ExtensionSet.MergeFrom*
  nameWithType.vb: ExtensionSet.MergeFrom(Of TTarget)(ByRef ExtensionSet(Of TTarget), ExtensionSet(Of TTarget))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.MergeFrom(Of TTarget)(ByRef Google.Protobuf.ExtensionSet(Of TTarget), Google.Protobuf.ExtensionSet(Of TTarget))
  name.vb: MergeFrom(Of TTarget)(ByRef ExtensionSet(Of TTarget), ExtensionSet(Of TTarget))
- uid: Google.Protobuf.ExtensionSet.Clone``1(Google.Protobuf.ExtensionSet{``0})
  commentId: M:Google.Protobuf.ExtensionSet.Clone``1(Google.Protobuf.ExtensionSet{``0})
  id: Clone``1(Google.Protobuf.ExtensionSet{``0})
  parent: Google.Protobuf.ExtensionSet
  langs:
  - csharp
  - vb
  name: Clone<TTarget>(ExtensionSet<TTarget>)
  nameWithType: ExtensionSet.Clone<TTarget>(ExtensionSet<TTarget>)
  fullName: Google.Protobuf.ExtensionSet.Clone<TTarget>(Google.Protobuf.ExtensionSet<TTarget>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionSet.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Clone
    path: csharp/src/Google.Protobuf/ExtensionSet.cs
    startLine: 239
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nClones the set into a new set. If the set is null, this returns null\n"
  example: []
  syntax:
    content: >-
      public static ExtensionSet<TTarget> Clone<TTarget>(ExtensionSet<TTarget> set)
          where TTarget : IExtendableMessage<TTarget>
    parameters:
    - id: set
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    typeParameters:
    - id: TTarget
    return:
      type: Google.Protobuf.ExtensionSet{{TTarget}}
    content.vb: Public Shared Function Clone(Of TTarget As IExtendableMessage(Of TTarget))(set As ExtensionSet(Of TTarget)) As ExtensionSet(Of TTarget)
  overload: Google.Protobuf.ExtensionSet.Clone*
  nameWithType.vb: ExtensionSet.Clone(Of TTarget)(ExtensionSet(Of TTarget))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.ExtensionSet.Clone(Of TTarget)(Google.Protobuf.ExtensionSet(Of TTarget))
  name.vb: Clone(Of TTarget)(ExtensionSet(Of TTarget))
references:
- uid: Google.Protobuf.ExtensionSet`1
  commentId: T:Google.Protobuf.ExtensionSet`1
  name: ExtensionSet<TTarget>
  nameWithType: ExtensionSet<TTarget>
  fullName: Google.Protobuf.ExtensionSet<TTarget>
  nameWithType.vb: ExtensionSet(Of TTarget)
  fullName.vb: Google.Protobuf.ExtensionSet(Of TTarget)
  name.vb: ExtensionSet(Of TTarget)
  spec.csharp:
  - uid: Google.Protobuf.ExtensionSet`1
    name: ExtensionSet
    nameWithType: ExtensionSet
    fullName: Google.Protobuf.ExtensionSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.ExtensionSet`1
    name: ExtensionSet
    nameWithType: ExtensionSet
    fullName: Google.Protobuf.ExtensionSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Protobuf.ExtensionSet.Get*
  commentId: Overload:Google.Protobuf.ExtensionSet.Get
  name: Get
  nameWithType: ExtensionSet.Get
  fullName: Google.Protobuf.ExtensionSet.Get
- uid: Google.Protobuf.ExtensionSet{{TTarget}}
  commentId: T:Google.Protobuf.ExtensionSet{``0}
  parent: Google.Protobuf
  definition: Google.Protobuf.ExtensionSet`1
  name: ExtensionSet<TTarget>
  nameWithType: ExtensionSet<TTarget>
  fullName: Google.Protobuf.ExtensionSet<TTarget>
  nameWithType.vb: ExtensionSet(Of TTarget)
  fullName.vb: Google.Protobuf.ExtensionSet(Of TTarget)
  name.vb: ExtensionSet(Of TTarget)
  spec.csharp:
  - uid: Google.Protobuf.ExtensionSet`1
    name: ExtensionSet
    nameWithType: ExtensionSet
    fullName: Google.Protobuf.ExtensionSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.ExtensionSet`1
    name: ExtensionSet
    nameWithType: ExtensionSet
    fullName: Google.Protobuf.ExtensionSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Extension{{TTarget},{TValue}}
  commentId: T:Google.Protobuf.Extension{``0,``1}
  parent: Google.Protobuf
  definition: Google.Protobuf.Extension`2
  name: Extension<TTarget, TValue>
  nameWithType: Extension<TTarget, TValue>
  fullName: Google.Protobuf.Extension<TTarget, TValue>
  nameWithType.vb: Extension(Of TTarget, TValue)
  fullName.vb: Google.Protobuf.Extension(Of TTarget, TValue)
  name.vb: Extension(Of TTarget, TValue)
  spec.csharp:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Google.Protobuf.Extension`2
  commentId: T:Google.Protobuf.Extension`2
  name: Extension<TTarget, TValue>
  nameWithType: Extension<TTarget, TValue>
  fullName: Google.Protobuf.Extension<TTarget, TValue>
  nameWithType.vb: Extension(Of TTarget, TValue)
  fullName.vb: Google.Protobuf.Extension(Of TTarget, TValue)
  name.vb: Extension(Of TTarget, TValue)
  spec.csharp:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Google.Protobuf.RepeatedExtension{{TTarget},{TValue}}
  commentId: T:Google.Protobuf.RepeatedExtension{``0,``1}
  parent: Google.Protobuf
  definition: Google.Protobuf.RepeatedExtension`2
  name: RepeatedExtension<TTarget, TValue>
  nameWithType: RepeatedExtension<TTarget, TValue>
  fullName: Google.Protobuf.RepeatedExtension<TTarget, TValue>
  nameWithType.vb: RepeatedExtension(Of TTarget, TValue)
  fullName.vb: Google.Protobuf.RepeatedExtension(Of TTarget, TValue)
  name.vb: RepeatedExtension(Of TTarget, TValue)
  spec.csharp:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections.RepeatedField{{TValue}}
  commentId: T:Google.Protobuf.Collections.RepeatedField{``1}
  parent: Google.Protobuf.Collections
  definition: Google.Protobuf.Collections.RepeatedField`1
  name: RepeatedField<TValue>
  nameWithType: RepeatedField<TValue>
  fullName: Google.Protobuf.Collections.RepeatedField<TValue>
  nameWithType.vb: RepeatedField(Of TValue)
  fullName.vb: Google.Protobuf.Collections.RepeatedField(Of TValue)
  name.vb: RepeatedField(Of TValue)
  spec.csharp:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.RepeatedExtension`2
  commentId: T:Google.Protobuf.RepeatedExtension`2
  name: RepeatedExtension<TTarget, TValue>
  nameWithType: RepeatedExtension<TTarget, TValue>
  fullName: Google.Protobuf.RepeatedExtension<TTarget, TValue>
  nameWithType.vb: RepeatedExtension(Of TTarget, TValue)
  fullName.vb: Google.Protobuf.RepeatedExtension(Of TTarget, TValue)
  name.vb: RepeatedExtension(Of TTarget, TValue)
  spec.csharp:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections.RepeatedField`1
  commentId: T:Google.Protobuf.Collections.RepeatedField`1
  parent: Google.Protobuf.Collections
  name: RepeatedField<T>
  nameWithType: RepeatedField<T>
  fullName: Google.Protobuf.Collections.RepeatedField<T>
  nameWithType.vb: RepeatedField(Of T)
  fullName.vb: Google.Protobuf.Collections.RepeatedField(Of T)
  name.vb: RepeatedField(Of T)
  spec.csharp:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections
  commentId: N:Google.Protobuf.Collections
  name: Google.Protobuf.Collections
  nameWithType: Google.Protobuf.Collections
  fullName: Google.Protobuf.Collections
- uid: Google.Protobuf.ExtensionSet.GetOrInitialize*
  commentId: Overload:Google.Protobuf.ExtensionSet.GetOrInitialize
  name: GetOrInitialize
  nameWithType: ExtensionSet.GetOrInitialize
  fullName: Google.Protobuf.ExtensionSet.GetOrInitialize
- uid: Google.Protobuf.ExtensionSet.Set*
  commentId: Overload:Google.Protobuf.ExtensionSet.Set
  name: Set
  nameWithType: ExtensionSet.Set
  fullName: Google.Protobuf.ExtensionSet.Set
- uid: Google.Protobuf.ExtensionSet.Has*
  commentId: Overload:Google.Protobuf.ExtensionSet.Has
  name: Has
  nameWithType: ExtensionSet.Has
  fullName: Google.Protobuf.ExtensionSet.Has
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Google.Protobuf.ExtensionSet.Clear*
  commentId: Overload:Google.Protobuf.ExtensionSet.Clear
  name: Clear
  nameWithType: ExtensionSet.Clear
  fullName: Google.Protobuf.ExtensionSet.Clear
- uid: Google.Protobuf.ExtensionSet.TryMergeFieldFrom*
  commentId: Overload:Google.Protobuf.ExtensionSet.TryMergeFieldFrom
  name: TryMergeFieldFrom
  nameWithType: ExtensionSet.TryMergeFieldFrom
  fullName: Google.Protobuf.ExtensionSet.TryMergeFieldFrom
- uid: Google.Protobuf.CodedInputStream
  commentId: T:Google.Protobuf.CodedInputStream
  parent: Google.Protobuf
  name: CodedInputStream
  nameWithType: CodedInputStream
  fullName: Google.Protobuf.CodedInputStream
- uid: Google.Protobuf.ExtensionSet.MergeFrom*
  commentId: Overload:Google.Protobuf.ExtensionSet.MergeFrom
  name: MergeFrom
  nameWithType: ExtensionSet.MergeFrom
  fullName: Google.Protobuf.ExtensionSet.MergeFrom
- uid: Google.Protobuf.ExtensionSet.Clone*
  commentId: Overload:Google.Protobuf.ExtensionSet.Clone
  name: Clone
  nameWithType: ExtensionSet.Clone
  fullName: Google.Protobuf.ExtensionSet.Clone
