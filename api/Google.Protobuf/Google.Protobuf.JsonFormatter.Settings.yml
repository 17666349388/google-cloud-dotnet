### YamlMime:ManagedReference
items:
- uid: Google.Protobuf.JsonFormatter.Settings
  commentId: T:Google.Protobuf.JsonFormatter.Settings
  id: JsonFormatter.Settings
  parent: Google.Protobuf
  children:
  - Google.Protobuf.JsonFormatter.Settings.#ctor(System.Boolean)
  - Google.Protobuf.JsonFormatter.Settings.#ctor(System.Boolean,Google.Protobuf.Reflection.TypeRegistry)
  - Google.Protobuf.JsonFormatter.Settings.Default
  - Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues
  - Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers
  - Google.Protobuf.JsonFormatter.Settings.TypeRegistry
  - Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues(System.Boolean)
  - Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers(System.Boolean)
  - Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry(Google.Protobuf.Reflection.TypeRegistry)
  langs:
  - csharp
  - vb
  name: JsonFormatter.Settings
  nameWithType: JsonFormatter.Settings
  fullName: Google.Protobuf.JsonFormatter.Settings
  type: Class
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: Settings
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 762
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nSettings controlling JSON formatting.\n"
  example: []
  syntax:
    content: public sealed class Settings
    content.vb: Public NotInheritable Class Settings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Protobuf.JsonFormatter.Settings.Default
  commentId: P:Google.Protobuf.JsonFormatter.Settings.Default
  id: Default
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: JsonFormatter.Settings.Default
  fullName: Google.Protobuf.JsonFormatter.Settings.Default
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: Default
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 767
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nDefault settings, as used by <xref href=\"Google.Protobuf.JsonFormatter.Default\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static JsonFormatter.Settings Default { get; }
    parameters: []
    return:
      type: Google.Protobuf.JsonFormatter.Settings
    content.vb: Public Shared ReadOnly Property Default As JsonFormatter.Settings
  overload: Google.Protobuf.JsonFormatter.Settings.Default*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues
  commentId: P:Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues
  id: FormatDefaultValues
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: FormatDefaultValues
  nameWithType: JsonFormatter.Settings.FormatDefaultValues
  fullName: Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: FormatDefaultValues
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 780
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nWhether fields whose values are the default for the field type (e.g. 0 for integers)\nshould be formatted (true) or omitted (false).\n"
  example: []
  syntax:
    content: public bool FormatDefaultValues { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property FormatDefaultValues As Boolean
  overload: Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.JsonFormatter.Settings.TypeRegistry
  commentId: P:Google.Protobuf.JsonFormatter.Settings.TypeRegistry
  id: TypeRegistry
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: TypeRegistry
  nameWithType: JsonFormatter.Settings.TypeRegistry
  fullName: Google.Protobuf.JsonFormatter.Settings.TypeRegistry
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: TypeRegistry
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 785
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nThe type registry used to format <xref href=\"Google.Protobuf.WellKnownTypes.Any\" data-throw-if-not-resolved=\"false\"></xref> messages.\n"
  example: []
  syntax:
    content: public TypeRegistry TypeRegistry { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.TypeRegistry
    content.vb: Public ReadOnly Property TypeRegistry As TypeRegistry
  overload: Google.Protobuf.JsonFormatter.Settings.TypeRegistry*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers
  commentId: P:Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers
  id: FormatEnumsAsIntegers
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: FormatEnumsAsIntegers
  nameWithType: JsonFormatter.Settings.FormatEnumsAsIntegers
  fullName: Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: FormatEnumsAsIntegers
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 790
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nWhether to format enums as ints. Defaults to false.\n"
  example: []
  syntax:
    content: public bool FormatEnumsAsIntegers { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property FormatEnumsAsIntegers As Boolean
  overload: Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.JsonFormatter.Settings.#ctor(System.Boolean)
  commentId: M:Google.Protobuf.JsonFormatter.Settings.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: Settings(Boolean)
  nameWithType: JsonFormatter.Settings.Settings(Boolean)
  fullName: Google.Protobuf.JsonFormatter.Settings.Settings(System.Boolean)
  type: Constructor
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: .ctor
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 798
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a new <xref href=\"Google.Protobuf.JsonFormatter.Settings\" data-throw-if-not-resolved=\"false\"></xref> object with the specified formatting of default values\nand an empty type registry.\n"
  example: []
  syntax:
    content: public Settings(bool formatDefaultValues)
    parameters:
    - id: formatDefaultValues
      type: System.Boolean
      description: <code>true</code> if default values (0, empty strings etc) should be formatted; <code>false</code> otherwise.
    content.vb: Public Sub New(formatDefaultValues As Boolean)
  overload: Google.Protobuf.JsonFormatter.Settings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.JsonFormatter.Settings.#ctor(System.Boolean,Google.Protobuf.Reflection.TypeRegistry)
  commentId: M:Google.Protobuf.JsonFormatter.Settings.#ctor(System.Boolean,Google.Protobuf.Reflection.TypeRegistry)
  id: '#ctor(System.Boolean,Google.Protobuf.Reflection.TypeRegistry)'
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: Settings(Boolean, TypeRegistry)
  nameWithType: JsonFormatter.Settings.Settings(Boolean, TypeRegistry)
  fullName: Google.Protobuf.JsonFormatter.Settings.Settings(System.Boolean, Google.Protobuf.Reflection.TypeRegistry)
  type: Constructor
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: .ctor
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 808
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a new <xref href=\"Google.Protobuf.JsonFormatter.Settings\" data-throw-if-not-resolved=\"false\"></xref> object with the specified formatting of default values\nand type registry.\n"
  example: []
  syntax:
    content: public Settings(bool formatDefaultValues, TypeRegistry typeRegistry)
    parameters:
    - id: formatDefaultValues
      type: System.Boolean
      description: <code>true</code> if default values (0, empty strings etc) should be formatted; <code>false</code> otherwise.
    - id: typeRegistry
      type: Google.Protobuf.Reflection.TypeRegistry
      description: The <xref href="Google.Protobuf.JsonFormatter.Settings.TypeRegistry" data-throw-if-not-resolved="false"></xref> to use when formatting <xref href="Google.Protobuf.WellKnownTypes.Any" data-throw-if-not-resolved="false"></xref> messages.
    content.vb: Public Sub New(formatDefaultValues As Boolean, typeRegistry As TypeRegistry)
  overload: Google.Protobuf.JsonFormatter.Settings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues(System.Boolean)
  commentId: M:Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues(System.Boolean)
  id: WithFormatDefaultValues(System.Boolean)
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: WithFormatDefaultValues(Boolean)
  nameWithType: JsonFormatter.Settings.WithFormatDefaultValues(Boolean)
  fullName: Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues(System.Boolean)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: WithFormatDefaultValues
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 831
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a new <xref href=\"Google.Protobuf.JsonFormatter.Settings\" data-throw-if-not-resolved=\"false\"></xref> object with the specified formatting of default values and the current settings.\n"
  example: []
  syntax:
    content: public JsonFormatter.Settings WithFormatDefaultValues(bool formatDefaultValues)
    parameters:
    - id: formatDefaultValues
      type: System.Boolean
      description: <code>true</code> if default values (0, empty strings etc) should be formatted; <code>false</code> otherwise.
    return:
      type: Google.Protobuf.JsonFormatter.Settings
    content.vb: Public Function WithFormatDefaultValues(formatDefaultValues As Boolean) As JsonFormatter.Settings
  overload: Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry(Google.Protobuf.Reflection.TypeRegistry)
  commentId: M:Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry(Google.Protobuf.Reflection.TypeRegistry)
  id: WithTypeRegistry(Google.Protobuf.Reflection.TypeRegistry)
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: WithTypeRegistry(TypeRegistry)
  nameWithType: JsonFormatter.Settings.WithTypeRegistry(TypeRegistry)
  fullName: Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry(Google.Protobuf.Reflection.TypeRegistry)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: WithTypeRegistry
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 837
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a new <xref href=\"Google.Protobuf.JsonFormatter.Settings\" data-throw-if-not-resolved=\"false\"></xref> object with the specified type registry and the current settings.\n"
  example: []
  syntax:
    content: public JsonFormatter.Settings WithTypeRegistry(TypeRegistry typeRegistry)
    parameters:
    - id: typeRegistry
      type: Google.Protobuf.Reflection.TypeRegistry
      description: The <xref href="Google.Protobuf.JsonFormatter.Settings.TypeRegistry" data-throw-if-not-resolved="false"></xref> to use when formatting <xref href="Google.Protobuf.WellKnownTypes.Any" data-throw-if-not-resolved="false"></xref> messages.
    return:
      type: Google.Protobuf.JsonFormatter.Settings
    content.vb: Public Function WithTypeRegistry(typeRegistry As TypeRegistry) As JsonFormatter.Settings
  overload: Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers(System.Boolean)
  commentId: M:Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers(System.Boolean)
  id: WithFormatEnumsAsIntegers(System.Boolean)
  parent: Google.Protobuf.JsonFormatter.Settings
  langs:
  - csharp
  - vb
  name: WithFormatEnumsAsIntegers(Boolean)
  nameWithType: JsonFormatter.Settings.WithFormatEnumsAsIntegers(Boolean)
  fullName: Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers(System.Boolean)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/JsonFormatter.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: WithFormatEnumsAsIntegers
    path: csharp/src/Google.Protobuf/JsonFormatter.cs
    startLine: 843
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a new <xref href=\"Google.Protobuf.JsonFormatter.Settings\" data-throw-if-not-resolved=\"false\"></xref> object with the specified enums formatting option and the current settings.\n"
  example: []
  syntax:
    content: public JsonFormatter.Settings WithFormatEnumsAsIntegers(bool formatEnumsAsIntegers)
    parameters:
    - id: formatEnumsAsIntegers
      type: System.Boolean
      description: <code>true</code> to format the enums as integers; <code>false</code> to format enums as enum names.
    return:
      type: Google.Protobuf.JsonFormatter.Settings
    content.vb: Public Function WithFormatEnumsAsIntegers(formatEnumsAsIntegers As Boolean) As JsonFormatter.Settings
  overload: Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  isExternal: false
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Protobuf.JsonFormatter.Default
  commentId: P:Google.Protobuf.JsonFormatter.Default
- uid: Google.Protobuf.JsonFormatter.Settings.Default*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.Default
  isExternal: false
  name: Default
  nameWithType: JsonFormatter.Settings.Default
  fullName: Google.Protobuf.JsonFormatter.Settings.Default
- uid: Google.Protobuf.JsonFormatter.Settings
  commentId: T:Google.Protobuf.JsonFormatter.Settings
  parent: Google.Protobuf
  isExternal: false
  name: JsonFormatter.Settings
  nameWithType: JsonFormatter.Settings
  fullName: Google.Protobuf.JsonFormatter.Settings
- uid: Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues
  isExternal: false
  name: FormatDefaultValues
  nameWithType: JsonFormatter.Settings.FormatDefaultValues
  fullName: Google.Protobuf.JsonFormatter.Settings.FormatDefaultValues
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Google.Protobuf.WellKnownTypes.Any
  commentId: T:Google.Protobuf.WellKnownTypes.Any
  parent: Google.Protobuf.WellKnownTypes
  isExternal: false
  name: Any
  nameWithType: Any
  fullName: Google.Protobuf.WellKnownTypes.Any
- uid: Google.Protobuf.JsonFormatter.Settings.TypeRegistry*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.TypeRegistry
  isExternal: false
  name: TypeRegistry
  nameWithType: JsonFormatter.Settings.TypeRegistry
  fullName: Google.Protobuf.JsonFormatter.Settings.TypeRegistry
- uid: Google.Protobuf.Reflection.TypeRegistry
  commentId: T:Google.Protobuf.Reflection.TypeRegistry
  parent: Google.Protobuf.Reflection
  isExternal: false
  name: TypeRegistry
  nameWithType: TypeRegistry
  fullName: Google.Protobuf.Reflection.TypeRegistry
- uid: Google.Protobuf.WellKnownTypes
  commentId: N:Google.Protobuf.WellKnownTypes
  isExternal: false
  name: Google.Protobuf.WellKnownTypes
  nameWithType: Google.Protobuf.WellKnownTypes
  fullName: Google.Protobuf.WellKnownTypes
- uid: Google.Protobuf.Reflection
  commentId: N:Google.Protobuf.Reflection
  isExternal: false
  name: Google.Protobuf.Reflection
  nameWithType: Google.Protobuf.Reflection
  fullName: Google.Protobuf.Reflection
- uid: Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers
  isExternal: false
  name: FormatEnumsAsIntegers
  nameWithType: JsonFormatter.Settings.FormatEnumsAsIntegers
  fullName: Google.Protobuf.JsonFormatter.Settings.FormatEnumsAsIntegers
- uid: Google.Protobuf.JsonFormatter.Settings.#ctor*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.#ctor
  isExternal: false
  name: Settings
  nameWithType: JsonFormatter.Settings.Settings
  fullName: Google.Protobuf.JsonFormatter.Settings.Settings
- uid: Google.Protobuf.JsonFormatter.Settings.TypeRegistry
  commentId: P:Google.Protobuf.JsonFormatter.Settings.TypeRegistry
- uid: Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues
  isExternal: false
  name: WithFormatDefaultValues
  nameWithType: JsonFormatter.Settings.WithFormatDefaultValues
  fullName: Google.Protobuf.JsonFormatter.Settings.WithFormatDefaultValues
- uid: Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry
  isExternal: false
  name: WithTypeRegistry
  nameWithType: JsonFormatter.Settings.WithTypeRegistry
  fullName: Google.Protobuf.JsonFormatter.Settings.WithTypeRegistry
- uid: Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers*
  commentId: Overload:Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers
  isExternal: false
  name: WithFormatEnumsAsIntegers
  nameWithType: JsonFormatter.Settings.WithFormatEnumsAsIntegers
  fullName: Google.Protobuf.JsonFormatter.Settings.WithFormatEnumsAsIntegers
