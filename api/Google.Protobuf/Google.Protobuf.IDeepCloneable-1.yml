### YamlMime:ManagedReference
items:
- uid: Google.Protobuf.IDeepCloneable`1
  commentId: T:Google.Protobuf.IDeepCloneable`1
  id: IDeepCloneable`1
  parent: Google.Protobuf
  children:
  - Google.Protobuf.IDeepCloneable`1.Clone
  langs:
  - csharp
  - vb
  name: IDeepCloneable<T>
  nameWithType: IDeepCloneable<T>
  fullName: Google.Protobuf.IDeepCloneable<T>
  type: Interface
  source:
    remote:
      path: csharp/src/Google.Protobuf/IDeepCloneable.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: IDeepCloneable
    path: csharp/src/Google.Protobuf/IDeepCloneable.cs
    startLine: 45
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nGeneric interface for a deeply cloneable type.\n"
  remarks: "\n<p>\nAll generated messages implement this interface, but so do some non-message types.\nAdditionally, due to the type constraint on <code>T</code> in <xref href=\"Google.Protobuf.IMessage%601\" data-throw-if-not-resolved=\"false\"></xref>,\nit is simpler to keep this as a separate interface.\n</p>\n"
  example: []
  syntax:
    content: public interface IDeepCloneable<T>
    typeParameters:
    - id: T
      description: The type itself, returned by the <xref href="Google.Protobuf.IDeepCloneable%601.Clone" data-throw-if-not-resolved="false"></xref> method.
    content.vb: Public Interface IDeepCloneable(Of T)
  nameWithType.vb: IDeepCloneable(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T)
  name.vb: IDeepCloneable(Of T)
- uid: Google.Protobuf.IDeepCloneable`1.Clone
  commentId: M:Google.Protobuf.IDeepCloneable`1.Clone
  id: Clone
  parent: Google.Protobuf.IDeepCloneable`1
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: IDeepCloneable<T>.Clone()
  fullName: Google.Protobuf.IDeepCloneable<T>.Clone()
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/IDeepCloneable.cs
      branch: 3.4.x
      repo: https://github.com/google/protobuf
    id: Clone
    path: csharp/src/Google.Protobuf/IDeepCloneable.cs
    startLine: 51
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a deep clone of this object.\n"
  example: []
  syntax:
    content: T Clone()
    return:
      type: '{T}'
      description: A deep clone of this object.
    content.vb: Function Clone As T
  overload: Google.Protobuf.IDeepCloneable`1.Clone*
  nameWithType.vb: IDeepCloneable(Of T).Clone()
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T).Clone()
references:
- uid: Google.Protobuf.IMessage`1
  commentId: T:Google.Protobuf.IMessage`1
  isExternal: false
  name: IMessage<T>
  nameWithType: IMessage<T>
  fullName: Google.Protobuf.IMessage<T>
  nameWithType.vb: IMessage(Of T)
  fullName.vb: Google.Protobuf.IMessage(Of T)
  name.vb: IMessage(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IMessage`1
    name: IMessage
    nameWithType: IMessage
    fullName: Google.Protobuf.IMessage
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.IDeepCloneable`1.Clone
  commentId: M:Google.Protobuf.IDeepCloneable`1.Clone
  isExternal: false
  name: Clone()
  nameWithType: IDeepCloneable<T>.Clone()
  fullName: Google.Protobuf.IDeepCloneable<T>.Clone()
  nameWithType.vb: IDeepCloneable(Of T).Clone()
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T).Clone()
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1.Clone
    name: Clone
    nameWithType: IDeepCloneable<T>.Clone
    fullName: Google.Protobuf.IDeepCloneable<T>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1.Clone
    name: Clone
    nameWithType: IDeepCloneable(Of T).Clone
    fullName: Google.Protobuf.IDeepCloneable(Of T).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  isExternal: false
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: Google.Protobuf.IDeepCloneable`1.Clone*
  commentId: Overload:Google.Protobuf.IDeepCloneable`1.Clone
  isExternal: false
  name: Clone
  nameWithType: IDeepCloneable<T>.Clone
  fullName: Google.Protobuf.IDeepCloneable<T>.Clone
  nameWithType.vb: IDeepCloneable(Of T).Clone
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T).Clone
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
