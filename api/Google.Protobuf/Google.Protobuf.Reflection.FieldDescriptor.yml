### YamlMime:ManagedReference
items:
- uid: Google.Protobuf.Reflection.FieldDescriptor
  commentId: T:Google.Protobuf.Reflection.FieldDescriptor
  id: FieldDescriptor
  parent: Google.Protobuf.Reflection
  children:
  - Google.Protobuf.Reflection.FieldDescriptor.Accessor
  - Google.Protobuf.Reflection.FieldDescriptor.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  - Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof
  - Google.Protobuf.Reflection.FieldDescriptor.ContainingType
  - Google.Protobuf.Reflection.FieldDescriptor.CustomOptions
  - Google.Protobuf.Reflection.FieldDescriptor.EnumType
  - Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType
  - Google.Protobuf.Reflection.FieldDescriptor.Extension
  - Google.Protobuf.Reflection.FieldDescriptor.FieldNumber
  - Google.Protobuf.Reflection.FieldDescriptor.FieldType
  - Google.Protobuf.Reflection.FieldDescriptor.GetOption``1(Google.Protobuf.Extension{Google.Protobuf.Reflection.FieldOptions,``0})
  - Google.Protobuf.Reflection.FieldDescriptor.GetOption``1(Google.Protobuf.RepeatedExtension{Google.Protobuf.Reflection.FieldOptions,``0})
  - Google.Protobuf.Reflection.FieldDescriptor.IsExtension
  - Google.Protobuf.Reflection.FieldDescriptor.IsMap
  - Google.Protobuf.Reflection.FieldDescriptor.IsPacked
  - Google.Protobuf.Reflection.FieldDescriptor.IsRepeated
  - Google.Protobuf.Reflection.FieldDescriptor.IsRequired
  - Google.Protobuf.Reflection.FieldDescriptor.JsonName
  - Google.Protobuf.Reflection.FieldDescriptor.MessageType
  - Google.Protobuf.Reflection.FieldDescriptor.Name
  langs:
  - csharp
  - vb
  name: FieldDescriptor
  nameWithType: FieldDescriptor
  fullName: Google.Protobuf.Reflection.FieldDescriptor
  type: Class
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: FieldDescriptor
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 41
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nDescriptor for a field or extension within a message in a .proto file.\n"
  example: []
  syntax:
    content: 'public sealed class FieldDescriptor : DescriptorBase, IDescriptor, IComparable<FieldDescriptor>'
    content.vb: >-
      Public NotInheritable Class FieldDescriptor
          Inherits DescriptorBase
          Implements IDescriptor, IComparable(Of FieldDescriptor)
  inheritance:
  - System.Object
  - Google.Protobuf.Reflection.DescriptorBase
  implements:
  - Google.Protobuf.Reflection.IDescriptor
  - System.IComparable{Google.Protobuf.Reflection.FieldDescriptor}
  inheritedMembers:
  - Google.Protobuf.Reflection.DescriptorBase.Index
  - Google.Protobuf.Reflection.DescriptorBase.FullName
  - Google.Protobuf.Reflection.DescriptorBase.File
  - Google.Protobuf.Reflection.DescriptorBase.Declaration
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Protobuf.Reflection.FieldDescriptor.ContainingType
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.ContainingType
  id: ContainingType
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: ContainingType
  nameWithType: FieldDescriptor.ContainingType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.ContainingType
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: ContainingType
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 53
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nGet the field&apos;s containing message type, or <code>null</code> if it is a field defined at the top level of a file as an extension.\n"
  example: []
  syntax:
    content: public MessageDescriptor ContainingType { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.MessageDescriptor
    content.vb: Public ReadOnly Property ContainingType As MessageDescriptor
  overload: Google.Protobuf.Reflection.FieldDescriptor.ContainingType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof
  id: ContainingOneof
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: ContainingOneof
  nameWithType: FieldDescriptor.ContainingOneof
  fullName: Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: ContainingOneof
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 58
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns the oneof containing this field, or <code>null</code> if it is not part of a oneof.\n"
  example: []
  syntax:
    content: public OneofDescriptor ContainingOneof { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.OneofDescriptor
    content.vb: Public ReadOnly Property ContainingOneof As OneofDescriptor
  overload: Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.JsonName
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.JsonName
  id: JsonName
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: JsonName
  nameWithType: FieldDescriptor.JsonName
  fullName: Google.Protobuf.Reflection.FieldDescriptor.JsonName
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: JsonName
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 64
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nThe effective JSON name for this field. This is usually the lower-camel-cased form of the field name,\nbut can be overridden using the <code>json_name</code> option in the .proto file.\n"
  example: []
  syntax:
    content: public string JsonName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property JsonName As String
  overload: Google.Protobuf.Reflection.FieldDescriptor.JsonName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.Extension
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.Extension
  id: Extension
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: Extension
  nameWithType: FieldDescriptor.Extension
  fullName: Google.Protobuf.Reflection.FieldDescriptor.Extension
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Extension
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 71
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nAn extension identifier for this field, or <code>null</code> if this field isn&apos;t an extension.\n"
  example: []
  syntax:
    content: public Extension Extension { get; }
    parameters: []
    return:
      type: Google.Protobuf.Extension
    content.vb: Public ReadOnly Property Extension As Extension
  overload: Google.Protobuf.Reflection.FieldDescriptor.Extension*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.Name
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.Name
  id: Name
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FieldDescriptor.Name
  fullName: Google.Protobuf.Reflection.FieldDescriptor.Name
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Name
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 113
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nThe brief name of the descriptor&apos;s target.\n"
  example: []
  syntax:
    content: public override string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property Name As String
  overridden: Google.Protobuf.Reflection.DescriptorBase.Name
  overload: Google.Protobuf.Reflection.FieldDescriptor.Name*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.Accessor
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.Accessor
  id: Accessor
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: Accessor
  nameWithType: FieldDescriptor.Accessor
  fullName: Google.Protobuf.Reflection.FieldDescriptor.Accessor
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Accessor
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 138
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns the accessor for this field.\n"
  remarks: "\n<p>\nWhile a <xref href=\"Google.Protobuf.Reflection.FieldDescriptor\" data-throw-if-not-resolved=\"false\"></xref> describes the field, it does not provide\nany way of obtaining or changing the value of the field within a specific message;\nthat is the responsibility of the accessor.\n</p>\n<p>\nIn descriptors for generated code, the value returned by this property will be non-null for all\nregular fields. However, if a message containing a map field is introspected, the list of nested messages will include\nan auto-generated nested key/value pair message for the field. This is not represented in any\ngenerated type, and the value of the map field itself is represented by a dictionary in the\nreflection API. There are never instances of those &quot;hidden&quot; messages, so no accessor is provided\nand this property will return null.\n</p>\n<p>\nIn dynamically loaded descriptors, the value returned by this property will current be null;\nif and when dynamic messages are supported, it will return a suitable accessor to work with\nthem.\n</p>\n"
  example: []
  syntax:
    content: public IFieldAccessor Accessor { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.IFieldAccessor
    content.vb: Public ReadOnly Property Accessor As IFieldAccessor
  overload: Google.Protobuf.Reflection.FieldDescriptor.Accessor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsRepeated
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.IsRepeated
  id: IsRepeated
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: IsRepeated
  nameWithType: FieldDescriptor.IsRepeated
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsRepeated
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: IsRepeated
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 191
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns <code>true</code> if this field is a repeated field; <code>false</code> otherwise.\n"
  example: []
  syntax:
    content: public bool IsRepeated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRepeated As Boolean
  overload: Google.Protobuf.Reflection.FieldDescriptor.IsRepeated*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsRequired
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.IsRequired
  id: IsRequired
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: IsRequired
  nameWithType: FieldDescriptor.IsRequired
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsRequired
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: IsRequired
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 196
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns <code>true</code> if this field is a required field; <code>false</code> otherwise.\n"
  example: []
  syntax:
    content: public bool IsRequired { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRequired As Boolean
  overload: Google.Protobuf.Reflection.FieldDescriptor.IsRequired*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsMap
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.IsMap
  id: IsMap
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: IsMap
  nameWithType: FieldDescriptor.IsMap
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsMap
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: IsMap
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 201
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns <code>true</code> if this field is a map field; <code>false</code> otherwise.\n"
  example: []
  syntax:
    content: public bool IsMap { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMap As Boolean
  overload: Google.Protobuf.Reflection.FieldDescriptor.IsMap*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsPacked
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.IsPacked
  id: IsPacked
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: IsPacked
  nameWithType: FieldDescriptor.IsPacked
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsPacked
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: IsPacked
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 206
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns <code>true</code> if this field is a packed, repeated field; <code>false</code> otherwise.\n"
  example: []
  syntax:
    content: public bool IsPacked { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPacked As Boolean
  overload: Google.Protobuf.Reflection.FieldDescriptor.IsPacked*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsExtension
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.IsExtension
  id: IsExtension
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: IsExtension
  nameWithType: FieldDescriptor.IsExtension
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsExtension
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: IsExtension
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 224
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns <code>true</code> if this field extends another message type; <code>false</code> otherwise.\n"
  example: []
  syntax:
    content: public bool IsExtension { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExtension As Boolean
  overload: Google.Protobuf.Reflection.FieldDescriptor.IsExtension*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.FieldType
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.FieldType
  id: FieldType
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: FieldType
  nameWithType: FieldDescriptor.FieldType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.FieldType
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: FieldType
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 229
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns the type of the field.\n"
  example: []
  syntax:
    content: public FieldType FieldType { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.FieldType
    content.vb: Public ReadOnly Property FieldType As FieldType
  overload: Google.Protobuf.Reflection.FieldDescriptor.FieldType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.FieldNumber
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.FieldNumber
  id: FieldNumber
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: FieldNumber
  nameWithType: FieldDescriptor.FieldNumber
  fullName: Google.Protobuf.Reflection.FieldDescriptor.FieldNumber
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: FieldNumber
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 234
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nReturns the field number declared in the proto file.\n"
  example: []
  syntax:
    content: public int FieldNumber { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FieldNumber As Integer
  overload: Google.Protobuf.Reflection.FieldDescriptor.FieldNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  commentId: M:Google.Protobuf.Reflection.FieldDescriptor.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  id: CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: CompareTo(FieldDescriptor)
  nameWithType: FieldDescriptor.CompareTo(FieldDescriptor)
  fullName: Google.Protobuf.Reflection.FieldDescriptor.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: CompareTo
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 242
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nCompares this descriptor with another one, ordering in &quot;canonical&quot; order\nwhich simply means ascending order by field number. <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>\nmust be a field of the same type, i.e. the <xref href=\"Google.Protobuf.Reflection.FieldDescriptor.ContainingType\" data-throw-if-not-resolved=\"false\"></xref> of\nboth fields must be the same.\n"
  example: []
  syntax:
    content: public int CompareTo(FieldDescriptor other)
    parameters:
    - id: other
      type: Google.Protobuf.Reflection.FieldDescriptor
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(other As FieldDescriptor) As Integer
  overload: Google.Protobuf.Reflection.FieldDescriptor.CompareTo*
  implements:
  - System.IComparable{Google.Protobuf.Reflection.FieldDescriptor}.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.Reflection.FieldDescriptor.EnumType
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.EnumType
  id: EnumType
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: EnumType
  nameWithType: FieldDescriptor.EnumType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.EnumType
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: EnumType
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 255
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nFor enum fields, returns the field&apos;s type.\n"
  example: []
  syntax:
    content: public EnumDescriptor EnumType { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.EnumDescriptor
    content.vb: Public ReadOnly Property EnumType As EnumDescriptor
  overload: Google.Protobuf.Reflection.FieldDescriptor.EnumType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.MessageType
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.MessageType
  id: MessageType
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: MessageType
  nameWithType: FieldDescriptor.MessageType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.MessageType
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: MessageType
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 270
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nFor embedded message and group fields, returns the field&apos;s type.\n"
  example: []
  syntax:
    content: public MessageDescriptor MessageType { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.MessageDescriptor
    content.vb: Public ReadOnly Property MessageType As MessageDescriptor
  overload: Google.Protobuf.Reflection.FieldDescriptor.MessageType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType
  id: ExtendeeType
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: ExtendeeType
  nameWithType: FieldDescriptor.ExtendeeType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: ExtendeeType
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 285
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nFor extension fields, returns the extended type\n"
  example: []
  syntax:
    content: public MessageDescriptor ExtendeeType { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.MessageDescriptor
    content.vb: Public ReadOnly Property ExtendeeType As MessageDescriptor
  overload: Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.CustomOptions
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.CustomOptions
  id: CustomOptions
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: CustomOptions
  nameWithType: FieldDescriptor.CustomOptions
  fullName: Google.Protobuf.Reflection.FieldDescriptor.CustomOptions
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: CustomOptions
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 300
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nThe (possibly empty) set of custom options for this field.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("CustomOptions are obsolete. Use GetOption")]

      public CustomOptions CustomOptions { get; }
    parameters: []
    return:
      type: Google.Protobuf.Reflection.CustomOptions
    content.vb: >-
      <Obsolete("CustomOptions are obsolete. Use GetOption")>

      Public ReadOnly Property CustomOptions As CustomOptions
  overload: Google.Protobuf.Reflection.FieldDescriptor.CustomOptions*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CustomOptions are obsolete. Use GetOption
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.Reflection.FieldDescriptor.GetOption``1(Google.Protobuf.Extension{Google.Protobuf.Reflection.FieldOptions,``0})
  commentId: M:Google.Protobuf.Reflection.FieldDescriptor.GetOption``1(Google.Protobuf.Extension{Google.Protobuf.Reflection.FieldOptions,``0})
  id: GetOption``1(Google.Protobuf.Extension{Google.Protobuf.Reflection.FieldOptions,``0})
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: GetOption<T>(Extension<FieldOptions, T>)
  nameWithType: FieldDescriptor.GetOption<T>(Extension<FieldOptions, T>)
  fullName: Google.Protobuf.Reflection.FieldDescriptor.GetOption<T>(Google.Protobuf.Extension<Google.Protobuf.Reflection.FieldOptions, T>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: GetOption
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 306
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nGets a single value field option for this descriptor\n"
  example: []
  syntax:
    content: public T GetOption<T>(Extension<FieldOptions, T> extension)
    parameters:
    - id: extension
      type: Google.Protobuf.Extension{Google.Protobuf.Reflection.FieldOptions,{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetOption(Of T)(extension As Extension(Of FieldOptions, T)) As T
  overload: Google.Protobuf.Reflection.FieldDescriptor.GetOption*
  nameWithType.vb: FieldDescriptor.GetOption(Of T)(Extension(Of FieldOptions, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Protobuf.Reflection.FieldDescriptor.GetOption(Of T)(Google.Protobuf.Extension(Of Google.Protobuf.Reflection.FieldOptions, T))
  name.vb: GetOption(Of T)(Extension(Of FieldOptions, T))
- uid: Google.Protobuf.Reflection.FieldDescriptor.GetOption``1(Google.Protobuf.RepeatedExtension{Google.Protobuf.Reflection.FieldOptions,``0})
  commentId: M:Google.Protobuf.Reflection.FieldDescriptor.GetOption``1(Google.Protobuf.RepeatedExtension{Google.Protobuf.Reflection.FieldOptions,``0})
  id: GetOption``1(Google.Protobuf.RepeatedExtension{Google.Protobuf.Reflection.FieldOptions,``0})
  parent: Google.Protobuf.Reflection.FieldDescriptor
  langs:
  - csharp
  - vb
  name: GetOption<T>(RepeatedExtension<FieldOptions, T>)
  nameWithType: FieldDescriptor.GetOption<T>(RepeatedExtension<FieldOptions, T>)
  fullName: Google.Protobuf.Reflection.FieldDescriptor.GetOption<T>(Google.Protobuf.RepeatedExtension<Google.Protobuf.Reflection.FieldOptions, T>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: GetOption
    path: csharp/src/Google.Protobuf/Reflection/FieldDescriptor.cs
    startLine: 315
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Reflection
  summary: "\nGets a repeated value field option for this descriptor\n"
  example: []
  syntax:
    content: public RepeatedField<T> GetOption<T>(RepeatedExtension<FieldOptions, T> extension)
    parameters:
    - id: extension
      type: Google.Protobuf.RepeatedExtension{Google.Protobuf.Reflection.FieldOptions,{T}}
    typeParameters:
    - id: T
    return:
      type: Google.Protobuf.Collections.RepeatedField{{T}}
    content.vb: Public Function GetOption(Of T)(extension As RepeatedExtension(Of FieldOptions, T)) As RepeatedField(Of T)
  overload: Google.Protobuf.Reflection.FieldDescriptor.GetOption*
  nameWithType.vb: FieldDescriptor.GetOption(Of T)(RepeatedExtension(Of FieldOptions, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Protobuf.Reflection.FieldDescriptor.GetOption(Of T)(Google.Protobuf.RepeatedExtension(Of Google.Protobuf.Reflection.FieldOptions, T))
  name.vb: GetOption(Of T)(RepeatedExtension(Of FieldOptions, T))
references:
- uid: Google.Protobuf.Reflection
  commentId: N:Google.Protobuf.Reflection
  name: Google.Protobuf.Reflection
  nameWithType: Google.Protobuf.Reflection
  fullName: Google.Protobuf.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Protobuf.Reflection.DescriptorBase
  commentId: T:Google.Protobuf.Reflection.DescriptorBase
  parent: Google.Protobuf.Reflection
  name: DescriptorBase
  nameWithType: DescriptorBase
  fullName: Google.Protobuf.Reflection.DescriptorBase
- uid: Google.Protobuf.Reflection.IDescriptor
  commentId: T:Google.Protobuf.Reflection.IDescriptor
  parent: Google.Protobuf.Reflection
  name: IDescriptor
  nameWithType: IDescriptor
  fullName: Google.Protobuf.Reflection.IDescriptor
- uid: System.IComparable{Google.Protobuf.Reflection.FieldDescriptor}
  commentId: T:System.IComparable{Google.Protobuf.Reflection.FieldDescriptor}
  parent: System
  definition: System.IComparable`1
  name: IComparable<FieldDescriptor>
  nameWithType: IComparable<FieldDescriptor>
  fullName: System.IComparable<Google.Protobuf.Reflection.FieldDescriptor>
  nameWithType.vb: IComparable(Of FieldDescriptor)
  fullName.vb: System.IComparable(Of Google.Protobuf.Reflection.FieldDescriptor)
  name.vb: IComparable(Of FieldDescriptor)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.Reflection.FieldDescriptor
    name: FieldDescriptor
    nameWithType: FieldDescriptor
    fullName: Google.Protobuf.Reflection.FieldDescriptor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.Reflection.FieldDescriptor
    name: FieldDescriptor
    nameWithType: FieldDescriptor
    fullName: Google.Protobuf.Reflection.FieldDescriptor
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Reflection.DescriptorBase.Index
  commentId: P:Google.Protobuf.Reflection.DescriptorBase.Index
  parent: Google.Protobuf.Reflection.DescriptorBase
  name: Index
  nameWithType: DescriptorBase.Index
  fullName: Google.Protobuf.Reflection.DescriptorBase.Index
- uid: Google.Protobuf.Reflection.DescriptorBase.FullName
  commentId: P:Google.Protobuf.Reflection.DescriptorBase.FullName
  parent: Google.Protobuf.Reflection.DescriptorBase
  name: FullName
  nameWithType: DescriptorBase.FullName
  fullName: Google.Protobuf.Reflection.DescriptorBase.FullName
- uid: Google.Protobuf.Reflection.DescriptorBase.File
  commentId: P:Google.Protobuf.Reflection.DescriptorBase.File
  parent: Google.Protobuf.Reflection.DescriptorBase
  name: File
  nameWithType: DescriptorBase.File
  fullName: Google.Protobuf.Reflection.DescriptorBase.File
- uid: Google.Protobuf.Reflection.DescriptorBase.Declaration
  commentId: P:Google.Protobuf.Reflection.DescriptorBase.Declaration
  parent: Google.Protobuf.Reflection.DescriptorBase
  name: Declaration
  nameWithType: DescriptorBase.Declaration
  fullName: Google.Protobuf.Reflection.DescriptorBase.Declaration
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Reflection.FieldDescriptor.ContainingType*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.ContainingType
  name: ContainingType
  nameWithType: FieldDescriptor.ContainingType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.ContainingType
- uid: Google.Protobuf.Reflection.MessageDescriptor
  commentId: T:Google.Protobuf.Reflection.MessageDescriptor
  parent: Google.Protobuf.Reflection
  name: MessageDescriptor
  nameWithType: MessageDescriptor
  fullName: Google.Protobuf.Reflection.MessageDescriptor
- uid: Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof
  name: ContainingOneof
  nameWithType: FieldDescriptor.ContainingOneof
  fullName: Google.Protobuf.Reflection.FieldDescriptor.ContainingOneof
- uid: Google.Protobuf.Reflection.OneofDescriptor
  commentId: T:Google.Protobuf.Reflection.OneofDescriptor
  parent: Google.Protobuf.Reflection
  name: OneofDescriptor
  nameWithType: OneofDescriptor
  fullName: Google.Protobuf.Reflection.OneofDescriptor
- uid: Google.Protobuf.Reflection.FieldDescriptor.JsonName*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.JsonName
  name: JsonName
  nameWithType: FieldDescriptor.JsonName
  fullName: Google.Protobuf.Reflection.FieldDescriptor.JsonName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Google.Protobuf.Reflection.FieldDescriptor.Extension*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.Extension
  name: Extension
  nameWithType: FieldDescriptor.Extension
  fullName: Google.Protobuf.Reflection.FieldDescriptor.Extension
- uid: Google.Protobuf.Extension
  commentId: T:Google.Protobuf.Extension
  parent: Google.Protobuf
  name: Extension
  nameWithType: Extension
  fullName: Google.Protobuf.Extension
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: Google.Protobuf.Reflection.DescriptorBase.Name
  commentId: P:Google.Protobuf.Reflection.DescriptorBase.Name
  parent: Google.Protobuf.Reflection.DescriptorBase
  name: Name
  nameWithType: DescriptorBase.Name
  fullName: Google.Protobuf.Reflection.DescriptorBase.Name
- uid: Google.Protobuf.Reflection.FieldDescriptor.Name*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.Name
  name: Name
  nameWithType: FieldDescriptor.Name
  fullName: Google.Protobuf.Reflection.FieldDescriptor.Name
- uid: Google.Protobuf.Reflection.FieldDescriptor
  commentId: T:Google.Protobuf.Reflection.FieldDescriptor
  parent: Google.Protobuf.Reflection
  name: FieldDescriptor
  nameWithType: FieldDescriptor
  fullName: Google.Protobuf.Reflection.FieldDescriptor
- uid: Google.Protobuf.Reflection.FieldDescriptor.Accessor*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.Accessor
  name: Accessor
  nameWithType: FieldDescriptor.Accessor
  fullName: Google.Protobuf.Reflection.FieldDescriptor.Accessor
- uid: Google.Protobuf.Reflection.IFieldAccessor
  commentId: T:Google.Protobuf.Reflection.IFieldAccessor
  parent: Google.Protobuf.Reflection
  name: IFieldAccessor
  nameWithType: IFieldAccessor
  fullName: Google.Protobuf.Reflection.IFieldAccessor
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsRepeated*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.IsRepeated
  name: IsRepeated
  nameWithType: FieldDescriptor.IsRepeated
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsRepeated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsRequired*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.IsRequired
  name: IsRequired
  nameWithType: FieldDescriptor.IsRequired
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsRequired
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsMap*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.IsMap
  name: IsMap
  nameWithType: FieldDescriptor.IsMap
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsMap
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsPacked*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.IsPacked
  name: IsPacked
  nameWithType: FieldDescriptor.IsPacked
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsPacked
- uid: Google.Protobuf.Reflection.FieldDescriptor.IsExtension*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.IsExtension
  name: IsExtension
  nameWithType: FieldDescriptor.IsExtension
  fullName: Google.Protobuf.Reflection.FieldDescriptor.IsExtension
- uid: Google.Protobuf.Reflection.FieldDescriptor.FieldType*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.FieldType
  name: FieldType
  nameWithType: FieldDescriptor.FieldType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.FieldType
- uid: Google.Protobuf.Reflection.FieldType
  commentId: T:Google.Protobuf.Reflection.FieldType
  parent: Google.Protobuf.Reflection
  name: FieldType
  nameWithType: FieldType
  fullName: Google.Protobuf.Reflection.FieldType
- uid: Google.Protobuf.Reflection.FieldDescriptor.FieldNumber*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.FieldNumber
  name: FieldNumber
  nameWithType: FieldDescriptor.FieldNumber
  fullName: Google.Protobuf.Reflection.FieldDescriptor.FieldNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Google.Protobuf.Reflection.FieldDescriptor.ContainingType
  commentId: P:Google.Protobuf.Reflection.FieldDescriptor.ContainingType
  isExternal: true
- uid: Google.Protobuf.Reflection.FieldDescriptor.CompareTo*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.CompareTo
  name: CompareTo
  nameWithType: FieldDescriptor.CompareTo
  fullName: Google.Protobuf.Reflection.FieldDescriptor.CompareTo
- uid: System.IComparable{Google.Protobuf.Reflection.FieldDescriptor}.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  commentId: M:System.IComparable{Google.Protobuf.Reflection.FieldDescriptor}.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  parent: System.IComparable{Google.Protobuf.Reflection.FieldDescriptor}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(FieldDescriptor)
  nameWithType: IComparable<FieldDescriptor>.CompareTo(FieldDescriptor)
  fullName: System.IComparable<Google.Protobuf.Reflection.FieldDescriptor>.CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  nameWithType.vb: IComparable(Of FieldDescriptor).CompareTo(FieldDescriptor)
  fullName.vb: System.IComparable(Of Google.Protobuf.Reflection.FieldDescriptor).CompareTo(Google.Protobuf.Reflection.FieldDescriptor)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<FieldDescriptor>.CompareTo
    fullName: System.IComparable<Google.Protobuf.Reflection.FieldDescriptor>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Reflection.FieldDescriptor
    name: FieldDescriptor
    nameWithType: FieldDescriptor
    fullName: Google.Protobuf.Reflection.FieldDescriptor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of FieldDescriptor).CompareTo
    fullName: System.IComparable(Of Google.Protobuf.Reflection.FieldDescriptor).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Reflection.FieldDescriptor
    name: FieldDescriptor
    nameWithType: FieldDescriptor
    fullName: Google.Protobuf.Reflection.FieldDescriptor
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Reflection.FieldDescriptor.EnumType*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.EnumType
  name: EnumType
  nameWithType: FieldDescriptor.EnumType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.EnumType
- uid: Google.Protobuf.Reflection.EnumDescriptor
  commentId: T:Google.Protobuf.Reflection.EnumDescriptor
  parent: Google.Protobuf.Reflection
  name: EnumDescriptor
  nameWithType: EnumDescriptor
  fullName: Google.Protobuf.Reflection.EnumDescriptor
- uid: Google.Protobuf.Reflection.FieldDescriptor.MessageType*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.MessageType
  name: MessageType
  nameWithType: FieldDescriptor.MessageType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.MessageType
- uid: Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType
  name: ExtendeeType
  nameWithType: FieldDescriptor.ExtendeeType
  fullName: Google.Protobuf.Reflection.FieldDescriptor.ExtendeeType
- uid: Google.Protobuf.Reflection.FieldDescriptor.CustomOptions*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.CustomOptions
  name: CustomOptions
  nameWithType: FieldDescriptor.CustomOptions
  fullName: Google.Protobuf.Reflection.FieldDescriptor.CustomOptions
- uid: Google.Protobuf.Reflection.CustomOptions
  commentId: T:Google.Protobuf.Reflection.CustomOptions
  parent: Google.Protobuf.Reflection
  name: CustomOptions
  nameWithType: CustomOptions
  fullName: Google.Protobuf.Reflection.CustomOptions
- uid: Google.Protobuf.Reflection.FieldDescriptor.GetOption*
  commentId: Overload:Google.Protobuf.Reflection.FieldDescriptor.GetOption
  name: GetOption
  nameWithType: FieldDescriptor.GetOption
  fullName: Google.Protobuf.Reflection.FieldDescriptor.GetOption
- uid: Google.Protobuf.Extension{Google.Protobuf.Reflection.FieldOptions,{T}}
  commentId: T:Google.Protobuf.Extension{Google.Protobuf.Reflection.FieldOptions,``0}
  parent: Google.Protobuf
  definition: Google.Protobuf.Extension`2
  name: Extension<FieldOptions, T>
  nameWithType: Extension<FieldOptions, T>
  fullName: Google.Protobuf.Extension<Google.Protobuf.Reflection.FieldOptions, T>
  nameWithType.vb: Extension(Of FieldOptions, T)
  fullName.vb: Google.Protobuf.Extension(Of Google.Protobuf.Reflection.FieldOptions, T)
  name.vb: Extension(Of FieldOptions, T)
  spec.csharp:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.Reflection.FieldOptions
    name: FieldOptions
    nameWithType: FieldOptions
    fullName: Google.Protobuf.Reflection.FieldOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.Reflection.FieldOptions
    name: FieldOptions
    nameWithType: FieldOptions
    fullName: Google.Protobuf.Reflection.FieldOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Google.Protobuf.Extension`2
  commentId: T:Google.Protobuf.Extension`2
  name: Extension<TTarget, TValue>
  nameWithType: Extension<TTarget, TValue>
  fullName: Google.Protobuf.Extension<TTarget, TValue>
  nameWithType.vb: Extension(Of TTarget, TValue)
  fullName.vb: Google.Protobuf.Extension(Of TTarget, TValue)
  name.vb: Extension(Of TTarget, TValue)
  spec.csharp:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Extension`2
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Google.Protobuf.RepeatedExtension{Google.Protobuf.Reflection.FieldOptions,{T}}
  commentId: T:Google.Protobuf.RepeatedExtension{Google.Protobuf.Reflection.FieldOptions,``0}
  parent: Google.Protobuf
  definition: Google.Protobuf.RepeatedExtension`2
  name: RepeatedExtension<FieldOptions, T>
  nameWithType: RepeatedExtension<FieldOptions, T>
  fullName: Google.Protobuf.RepeatedExtension<Google.Protobuf.Reflection.FieldOptions, T>
  nameWithType.vb: RepeatedExtension(Of FieldOptions, T)
  fullName.vb: Google.Protobuf.RepeatedExtension(Of Google.Protobuf.Reflection.FieldOptions, T)
  name.vb: RepeatedExtension(Of FieldOptions, T)
  spec.csharp:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.Reflection.FieldOptions
    name: FieldOptions
    nameWithType: FieldOptions
    fullName: Google.Protobuf.Reflection.FieldOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.Reflection.FieldOptions
    name: FieldOptions
    nameWithType: FieldOptions
    fullName: Google.Protobuf.Reflection.FieldOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections.RepeatedField{{T}}
  commentId: T:Google.Protobuf.Collections.RepeatedField{``0}
  parent: Google.Protobuf.Collections
  definition: Google.Protobuf.Collections.RepeatedField`1
  name: RepeatedField<T>
  nameWithType: RepeatedField<T>
  fullName: Google.Protobuf.Collections.RepeatedField<T>
  nameWithType.vb: RepeatedField(Of T)
  fullName.vb: Google.Protobuf.Collections.RepeatedField(Of T)
  name.vb: RepeatedField(Of T)
  spec.csharp:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.RepeatedExtension`2
  commentId: T:Google.Protobuf.RepeatedExtension`2
  name: RepeatedExtension<TTarget, TValue>
  nameWithType: RepeatedExtension<TTarget, TValue>
  fullName: Google.Protobuf.RepeatedExtension<TTarget, TValue>
  nameWithType.vb: RepeatedExtension(Of TTarget, TValue)
  fullName.vb: Google.Protobuf.RepeatedExtension(Of TTarget, TValue)
  name.vb: RepeatedExtension(Of TTarget, TValue)
  spec.csharp:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.RepeatedExtension`2
    name: RepeatedExtension
    nameWithType: RepeatedExtension
    fullName: Google.Protobuf.RepeatedExtension
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections.RepeatedField`1
  commentId: T:Google.Protobuf.Collections.RepeatedField`1
  parent: Google.Protobuf.Collections
  name: RepeatedField<T>
  nameWithType: RepeatedField<T>
  fullName: Google.Protobuf.Collections.RepeatedField<T>
  nameWithType.vb: RepeatedField(Of T)
  fullName.vb: Google.Protobuf.Collections.RepeatedField(Of T)
  name.vb: RepeatedField(Of T)
  spec.csharp:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.Collections.RepeatedField`1
    name: RepeatedField
    nameWithType: RepeatedField
    fullName: Google.Protobuf.Collections.RepeatedField
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections
  commentId: N:Google.Protobuf.Collections
  name: Google.Protobuf.Collections
  nameWithType: Google.Protobuf.Collections
  fullName: Google.Protobuf.Collections
