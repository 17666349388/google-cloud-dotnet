### YamlMime:ManagedReference
items:
- uid: Google.Protobuf.ExtensionRegistry
  commentId: T:Google.Protobuf.ExtensionRegistry
  id: ExtensionRegistry
  parent: Google.Protobuf
  children:
  - Google.Protobuf.ExtensionRegistry.#ctor
  - Google.Protobuf.ExtensionRegistry.Add(Google.Protobuf.Extension)
  - Google.Protobuf.ExtensionRegistry.AddRange(System.Collections.Generic.IEnumerable{Google.Protobuf.Extension})
  - Google.Protobuf.ExtensionRegistry.Clear
  - Google.Protobuf.ExtensionRegistry.Clone
  - Google.Protobuf.ExtensionRegistry.Contains(Google.Protobuf.Extension)
  - Google.Protobuf.ExtensionRegistry.Count
  - Google.Protobuf.ExtensionRegistry.GetEnumerator
  - Google.Protobuf.ExtensionRegistry.Remove(Google.Protobuf.Extension)
  - Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#CopyTo(Google.Protobuf.Extension[],System.Int32)
  - Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#IsReadOnly
  - Google.Protobuf.ExtensionRegistry.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ExtensionRegistry
  nameWithType: ExtensionRegistry
  fullName: Google.Protobuf.ExtensionRegistry
  type: Class
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: ExtensionRegistry
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 42
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nProvides extensions to messages while parsing. This API is experimental and subject to change.\n"
  example: []
  syntax:
    content: 'public sealed class ExtensionRegistry : ICollection<Extension>, IEnumerable<Extension>, IEnumerable, IDeepCloneable<ExtensionRegistry>'
    content.vb: >-
      Public NotInheritable Class ExtensionRegistry
          Implements ICollection(Of Extension), IEnumerable(Of Extension), IEnumerable, IDeepCloneable(Of ExtensionRegistry)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  - System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}
  - System.Collections.IEnumerable
  - Google.Protobuf.IDeepCloneable{Google.Protobuf.ExtensionRegistry}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Protobuf.ExtensionRegistry.#ctor
  commentId: M:Google.Protobuf.ExtensionRegistry.#ctor
  id: '#ctor'
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: ExtensionRegistry()
  nameWithType: ExtensionRegistry.ExtensionRegistry()
  fullName: Google.Protobuf.ExtensionRegistry.ExtensionRegistry()
  type: Constructor
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: .ctor
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 62
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCreates a new empty extension registry\n"
  example: []
  syntax:
    content: public ExtensionRegistry()
    content.vb: Public Sub New
  overload: Google.Protobuf.ExtensionRegistry.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.ExtensionRegistry.Count
  commentId: P:Google.Protobuf.ExtensionRegistry.Count
  id: Count
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ExtensionRegistry.Count
  fullName: Google.Protobuf.ExtensionRegistry.Count
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Count
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 75
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nGets the total number of extensions in this extension registry\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Google.Protobuf.ExtensionRegistry.Count*
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#IsReadOnly
  commentId: P:Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#IsReadOnly
  id: System#Collections#Generic#ICollection{Google#Protobuf#Extension}#IsReadOnly
  isEii: true
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: ICollection<Extension>.IsReadOnly
  nameWithType: ExtensionRegistry.ICollection<Extension>.IsReadOnly
  fullName: Google.Protobuf.ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 80
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nReturns whether the registry is readonly\n"
  example: []
  syntax:
    content: bool ICollection<Extension>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly As Boolean Implements ICollection(Of Extension).IsReadOnly
  overload: Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}.IsReadOnly
  nameWithType.vb: ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
- uid: Google.Protobuf.ExtensionRegistry.Add(Google.Protobuf.Extension)
  commentId: M:Google.Protobuf.ExtensionRegistry.Add(Google.Protobuf.Extension)
  id: Add(Google.Protobuf.Extension)
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: Add(Extension)
  nameWithType: ExtensionRegistry.Add(Extension)
  fullName: Google.Protobuf.ExtensionRegistry.Add(Google.Protobuf.Extension)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Add
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 90
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nAdds the specified extension to the registry\n"
  example: []
  syntax:
    content: public void Add(Extension extension)
    parameters:
    - id: extension
      type: Google.Protobuf.Extension
    content.vb: Public Sub Add(extension As Extension)
  overload: Google.Protobuf.ExtensionRegistry.Add*
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Add(Google.Protobuf.Extension)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.ExtensionRegistry.AddRange(System.Collections.Generic.IEnumerable{Google.Protobuf.Extension})
  commentId: M:Google.Protobuf.ExtensionRegistry.AddRange(System.Collections.Generic.IEnumerable{Google.Protobuf.Extension})
  id: AddRange(System.Collections.Generic.IEnumerable{Google.Protobuf.Extension})
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<Extension>)
  nameWithType: ExtensionRegistry.AddRange(IEnumerable<Extension>)
  fullName: Google.Protobuf.ExtensionRegistry.AddRange(System.Collections.Generic.IEnumerable<Google.Protobuf.Extension>)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: AddRange
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 100
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nAdds the specified extensions to the reigstry\n"
  example: []
  syntax:
    content: public void AddRange(IEnumerable<Extension> extensions)
    parameters:
    - id: extensions
      type: System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}
    content.vb: Public Sub AddRange(extensions As IEnumerable(Of Extension))
  overload: Google.Protobuf.ExtensionRegistry.AddRange*
  nameWithType.vb: ExtensionRegistry.AddRange(IEnumerable(Of Extension))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Protobuf.ExtensionRegistry.AddRange(System.Collections.Generic.IEnumerable(Of Google.Protobuf.Extension))
  name.vb: AddRange(IEnumerable(Of Extension))
- uid: Google.Protobuf.ExtensionRegistry.Clear
  commentId: M:Google.Protobuf.ExtensionRegistry.Clear
  id: Clear
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ExtensionRegistry.Clear()
  fullName: Google.Protobuf.ExtensionRegistry.Clear()
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Clear
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 113
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nClears the registry of all values\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Google.Protobuf.ExtensionRegistry.Clear*
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.ExtensionRegistry.Contains(Google.Protobuf.Extension)
  commentId: M:Google.Protobuf.ExtensionRegistry.Contains(Google.Protobuf.Extension)
  id: Contains(Google.Protobuf.Extension)
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: Contains(Extension)
  nameWithType: ExtensionRegistry.Contains(Extension)
  fullName: Google.Protobuf.ExtensionRegistry.Contains(Google.Protobuf.Extension)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Contains
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 121
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nGets whether the extension registry contains the specified extension\n"
  example: []
  syntax:
    content: public bool Contains(Extension item)
    parameters:
    - id: item
      type: Google.Protobuf.Extension
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As Extension) As Boolean
  overload: Google.Protobuf.ExtensionRegistry.Contains*
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Contains(Google.Protobuf.Extension)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#CopyTo(Google.Protobuf.Extension[],System.Int32)
  commentId: M:Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#CopyTo(Google.Protobuf.Extension[],System.Int32)
  id: System#Collections#Generic#ICollection{Google#Protobuf#Extension}#CopyTo(Google.Protobuf.Extension[],System.Int32)
  isEii: true
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: ICollection<Extension>.CopyTo(Extension[], Int32)
  nameWithType: ExtensionRegistry.ICollection<Extension>.CopyTo(Extension[], Int32)
  fullName: Google.Protobuf.ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo(Google.Protobuf.Extension[], System.Int32)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 133
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nCopies the arrays in the registry set to the specified array at the specified index\n"
  example: []
  syntax:
    content: void ICollection<Extension>.CopyTo(Extension[] array, int arrayIndex)
    parameters:
    - id: array
      type: Google.Protobuf.Extension[]
      description: The array to copy to
    - id: arrayIndex
      type: System.Int32
      description: The array index to start at
    content.vb: Sub System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo(array As Extension(), arrayIndex As Integer) Implements ICollection(Of Extension).CopyTo
  overload: Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}.CopyTo(Google.Protobuf.Extension[],System.Int32)
  nameWithType.vb: ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo(Extension(), Int32)
  fullName.vb: Google.Protobuf.ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo(Google.Protobuf.Extension(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo(Extension(), Int32)
- uid: Google.Protobuf.ExtensionRegistry.GetEnumerator
  commentId: M:Google.Protobuf.ExtensionRegistry.GetEnumerator
  id: GetEnumerator
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ExtensionRegistry.GetEnumerator()
  fullName: Google.Protobuf.ExtensionRegistry.GetEnumerator()
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: GetEnumerator
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 156
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nReturns an enumerator to enumerate through the items in the registry\n"
  example: []
  syntax:
    content: public IEnumerator<Extension> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Google.Protobuf.Extension}
      description: Returns an enumerator for the extensions in this registry
    content.vb: Public Function GetEnumerator As IEnumerator(Of Extension)
  overload: Google.Protobuf.ExtensionRegistry.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.ExtensionRegistry.Remove(Google.Protobuf.Extension)
  commentId: M:Google.Protobuf.ExtensionRegistry.Remove(Google.Protobuf.Extension)
  id: Remove(Google.Protobuf.Extension)
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: Remove(Extension)
  nameWithType: ExtensionRegistry.Remove(Extension)
  fullName: Google.Protobuf.ExtensionRegistry.Remove(Google.Protobuf.Extension)
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Remove
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 166
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nRemoves the specified extension from the set\n"
  example: []
  syntax:
    content: public bool Remove(Extension item)
    parameters:
    - id: item
      type: Google.Protobuf.Extension
      description: The extension
    return:
      type: System.Boolean
      description: <code>true</code> if the extension was removed, otherwise <code>false</code>
    content.vb: Public Function Remove(item As Extension) As Boolean
  overload: Google.Protobuf.ExtensionRegistry.Remove*
  implements:
  - System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Remove(Google.Protobuf.Extension)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Protobuf.ExtensionRegistry.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Google.Protobuf.ExtensionRegistry.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ExtensionRegistry.IEnumerable.GetEnumerator()
  fullName: Google.Protobuf.ExtensionRegistry.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: System.Collections.IEnumerable.GetEnumerator
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 173
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Google.Protobuf.ExtensionRegistry.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExtensionRegistry.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Google.Protobuf.ExtensionRegistry.Clone
  commentId: M:Google.Protobuf.ExtensionRegistry.Clone
  id: Clone
  parent: Google.Protobuf.ExtensionRegistry
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: ExtensionRegistry.Clone()
  fullName: Google.Protobuf.ExtensionRegistry.Clone()
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: Clone
    path: csharp/src/Google.Protobuf/ExtensionRegistry.cs
    startLine: 178
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf
  summary: "\nClones the registry into a new registry\n"
  example: []
  syntax:
    content: public ExtensionRegistry Clone()
    return:
      type: Google.Protobuf.ExtensionRegistry
    content.vb: Public Function Clone As ExtensionRegistry
  overload: Google.Protobuf.ExtensionRegistry.Clone*
  implements:
  - Google.Protobuf.IDeepCloneable{Google.Protobuf.ExtensionRegistry}.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Google.Protobuf
  commentId: N:Google.Protobuf
  name: Google.Protobuf
  nameWithType: Google.Protobuf
  fullName: Google.Protobuf
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  commentId: T:System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Extension>
  nameWithType: ICollection<Extension>
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>
  nameWithType.vb: ICollection(Of Extension)
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension)
  name.vb: ICollection(Of Extension)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}
  commentId: T:System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Extension>
  nameWithType: IEnumerable<Extension>
  fullName: System.Collections.Generic.IEnumerable<Google.Protobuf.Extension>
  nameWithType.vb: IEnumerable(Of Extension)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Google.Protobuf.Extension)
  name.vb: IEnumerable(Of Extension)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Google.Protobuf.IDeepCloneable{Google.Protobuf.ExtensionRegistry}
  commentId: T:Google.Protobuf.IDeepCloneable{Google.Protobuf.ExtensionRegistry}
  parent: Google.Protobuf
  definition: Google.Protobuf.IDeepCloneable`1
  name: IDeepCloneable<ExtensionRegistry>
  nameWithType: IDeepCloneable<ExtensionRegistry>
  fullName: Google.Protobuf.IDeepCloneable<Google.Protobuf.ExtensionRegistry>
  nameWithType.vb: IDeepCloneable(Of ExtensionRegistry)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of Google.Protobuf.ExtensionRegistry)
  name.vb: IDeepCloneable(Of ExtensionRegistry)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.ExtensionRegistry
    name: ExtensionRegistry
    nameWithType: ExtensionRegistry
    fullName: Google.Protobuf.ExtensionRegistry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.ExtensionRegistry
    name: ExtensionRegistry
    nameWithType: ExtensionRegistry
    fullName: Google.Protobuf.ExtensionRegistry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Google.Protobuf.IDeepCloneable`1
  commentId: T:Google.Protobuf.IDeepCloneable`1
  name: IDeepCloneable<T>
  nameWithType: IDeepCloneable<T>
  fullName: Google.Protobuf.IDeepCloneable<T>
  nameWithType.vb: IDeepCloneable(Of T)
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T)
  name.vb: IDeepCloneable(Of T)
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1
    name: IDeepCloneable
    nameWithType: IDeepCloneable
    fullName: Google.Protobuf.IDeepCloneable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry.#ctor*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.#ctor
  name: ExtensionRegistry
  nameWithType: ExtensionRegistry.ExtensionRegistry
  fullName: Google.Protobuf.ExtensionRegistry.ExtensionRegistry
- uid: Google.Protobuf.ExtensionRegistry.Count*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.Count
  name: Count
  nameWithType: ExtensionRegistry.Count
  fullName: Google.Protobuf.ExtensionRegistry.Count
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Count
  commentId: P:System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Count
  parent: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<Extension>.Count
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Count
  nameWithType.vb: ICollection(Of Extension).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#IsReadOnly*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#IsReadOnly
  name: ICollection<Extension>.IsReadOnly
  nameWithType: ExtensionRegistry.ICollection<Extension>.IsReadOnly
  fullName: Google.Protobuf.ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
  nameWithType.vb: ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Google.Protobuf.Extension}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<Extension>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.IsReadOnly
  nameWithType.vb: ICollection(Of Extension).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Google.Protobuf.ExtensionRegistry.Add*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.Add
  name: Add
  nameWithType: ExtensionRegistry.Add
  fullName: Google.Protobuf.ExtensionRegistry.Add
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Add(Google.Protobuf.Extension)
  commentId: M:System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Add(Google.Protobuf.Extension)
  parent: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(Extension)
  nameWithType: ICollection<Extension>.Add(Extension)
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Add(Google.Protobuf.Extension)
  nameWithType.vb: ICollection(Of Extension).Add(Extension)
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Add(Google.Protobuf.Extension)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<Extension>.Add
    fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of Extension).Add
    fullName: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Extension
  commentId: T:Google.Protobuf.Extension
  parent: Google.Protobuf
  name: Extension
  nameWithType: Extension
  fullName: Google.Protobuf.Extension
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry.AddRange*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.AddRange
  name: AddRange
  nameWithType: ExtensionRegistry.AddRange
  fullName: Google.Protobuf.ExtensionRegistry.AddRange
- uid: Google.Protobuf.ExtensionRegistry.Clear*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.Clear
  name: Clear
  nameWithType: ExtensionRegistry.Clear
  fullName: Google.Protobuf.ExtensionRegistry.Clear
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Clear
  commentId: M:System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Clear
  parent: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<Extension>.Clear()
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Clear()
  nameWithType.vb: ICollection(Of Extension).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<Extension>.Clear
    fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of Extension).Clear
    fullName: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry.Contains*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.Contains
  name: Contains
  nameWithType: ExtensionRegistry.Contains
  fullName: Google.Protobuf.ExtensionRegistry.Contains
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Contains(Google.Protobuf.Extension)
  commentId: M:System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Contains(Google.Protobuf.Extension)
  parent: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(Extension)
  nameWithType: ICollection<Extension>.Contains(Extension)
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Contains(Google.Protobuf.Extension)
  nameWithType.vb: ICollection(Of Extension).Contains(Extension)
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Contains(Google.Protobuf.Extension)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<Extension>.Contains
    fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of Extension).Contains
    fullName: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#CopyTo*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.System#Collections#Generic#ICollection{Google#Protobuf#Extension}#CopyTo
  name: ICollection<Extension>.CopyTo
  nameWithType: ExtensionRegistry.ICollection<Extension>.CopyTo
  fullName: Google.Protobuf.ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo
  nameWithType.vb: ExtensionRegistry.System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo
  name.vb: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}.CopyTo(Google.Protobuf.Extension[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Google.Protobuf.Extension}.CopyTo(Google.Protobuf.Extension[],System.Int32)
  parent: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Extension[], Int32)
  nameWithType: ICollection<Extension>.CopyTo(Extension[], Int32)
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo(Google.Protobuf.Extension[], System.Int32)
  nameWithType.vb: ICollection(Of Extension).CopyTo(Extension(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).CopyTo(Google.Protobuf.Extension(), System.Int32)
  name.vb: CopyTo(Extension(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<Extension>.CopyTo
    fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of Extension).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Extension[]
  isExternal: true
  name: Extension[]
  nameWithType: Extension[]
  fullName: Google.Protobuf.Extension[]
  nameWithType.vb: Extension()
  fullName.vb: Google.Protobuf.Extension()
  name.vb: Extension()
  spec.csharp:
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry.GetEnumerator*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.GetEnumerator
  name: GetEnumerator
  nameWithType: ExtensionRegistry.GetEnumerator
  fullName: Google.Protobuf.ExtensionRegistry.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Google.Protobuf.Extension}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Extension>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Google.Protobuf.Extension>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Extension).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Google.Protobuf.Extension).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Extension>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Google.Protobuf.Extension>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Extension).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Google.Protobuf.Extension).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Google.Protobuf.Extension}
  commentId: T:System.Collections.Generic.IEnumerator{Google.Protobuf.Extension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Extension>
  nameWithType: IEnumerator<Extension>
  fullName: System.Collections.Generic.IEnumerator<Google.Protobuf.Extension>
  nameWithType.vb: IEnumerator(Of Extension)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Google.Protobuf.Extension)
  name.vb: IEnumerator(Of Extension)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry.Remove*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.Remove
  name: Remove
  nameWithType: ExtensionRegistry.Remove
  fullName: Google.Protobuf.ExtensionRegistry.Remove
- uid: System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Remove(Google.Protobuf.Extension)
  commentId: M:System.Collections.Generic.ICollection{Google.Protobuf.Extension}.Remove(Google.Protobuf.Extension)
  parent: System.Collections.Generic.ICollection{Google.Protobuf.Extension}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(Extension)
  nameWithType: ICollection<Extension>.Remove(Extension)
  fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Remove(Google.Protobuf.Extension)
  nameWithType.vb: ICollection(Of Extension).Remove(Extension)
  fullName.vb: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Remove(Google.Protobuf.Extension)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<Extension>.Remove
    fullName: System.Collections.Generic.ICollection<Google.Protobuf.Extension>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of Extension).Remove
    fullName: System.Collections.Generic.ICollection(Of Google.Protobuf.Extension).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Protobuf.Extension
    name: Extension
    nameWithType: Extension
    fullName: Google.Protobuf.Extension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ExtensionRegistry.IEnumerable.GetEnumerator
  fullName: Google.Protobuf.ExtensionRegistry.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ExtensionRegistry.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Google.Protobuf.ExtensionRegistry.Clone*
  commentId: Overload:Google.Protobuf.ExtensionRegistry.Clone
  name: Clone
  nameWithType: ExtensionRegistry.Clone
  fullName: Google.Protobuf.ExtensionRegistry.Clone
- uid: Google.Protobuf.IDeepCloneable{Google.Protobuf.ExtensionRegistry}.Clone
  commentId: M:Google.Protobuf.IDeepCloneable{Google.Protobuf.ExtensionRegistry}.Clone
  parent: Google.Protobuf.IDeepCloneable{Google.Protobuf.ExtensionRegistry}
  definition: Google.Protobuf.IDeepCloneable`1.Clone
  name: Clone()
  nameWithType: IDeepCloneable<ExtensionRegistry>.Clone()
  fullName: Google.Protobuf.IDeepCloneable<Google.Protobuf.ExtensionRegistry>.Clone()
  nameWithType.vb: IDeepCloneable(Of ExtensionRegistry).Clone()
  fullName.vb: Google.Protobuf.IDeepCloneable(Of Google.Protobuf.ExtensionRegistry).Clone()
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1.Clone
    name: Clone
    nameWithType: IDeepCloneable<ExtensionRegistry>.Clone
    fullName: Google.Protobuf.IDeepCloneable<Google.Protobuf.ExtensionRegistry>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1.Clone
    name: Clone
    nameWithType: IDeepCloneable(Of ExtensionRegistry).Clone
    fullName: Google.Protobuf.IDeepCloneable(Of Google.Protobuf.ExtensionRegistry).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.ExtensionRegistry
  commentId: T:Google.Protobuf.ExtensionRegistry
  parent: Google.Protobuf
  name: ExtensionRegistry
  nameWithType: ExtensionRegistry
  fullName: Google.Protobuf.ExtensionRegistry
- uid: Google.Protobuf.IDeepCloneable`1.Clone
  commentId: M:Google.Protobuf.IDeepCloneable`1.Clone
  name: Clone()
  nameWithType: IDeepCloneable<T>.Clone()
  fullName: Google.Protobuf.IDeepCloneable<T>.Clone()
  nameWithType.vb: IDeepCloneable(Of T).Clone()
  fullName.vb: Google.Protobuf.IDeepCloneable(Of T).Clone()
  spec.csharp:
  - uid: Google.Protobuf.IDeepCloneable`1.Clone
    name: Clone
    nameWithType: IDeepCloneable<T>.Clone
    fullName: Google.Protobuf.IDeepCloneable<T>.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Protobuf.IDeepCloneable`1.Clone
    name: Clone
    nameWithType: IDeepCloneable(Of T).Clone
    fullName: Google.Protobuf.IDeepCloneable(Of T).Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
