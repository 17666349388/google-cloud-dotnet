### YamlMime:ManagedReference
items:
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers
  commentId: T:Google.Protobuf.Collections.ProtobufEqualityComparers
  id: ProtobufEqualityComparers
  parent: Google.Protobuf.Collections
  children:
  - Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
  - Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
  - Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
  - Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer
  - Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer``1
  langs:
  - csharp
  - vb
  name: ProtobufEqualityComparers
  nameWithType: ProtobufEqualityComparers
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers
  type: Class
  source:
    remote:
      path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: ProtobufEqualityComparers
    path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
    startLine: 40
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Collections
  summary: "\nProvides a central place to implement equality comparisons, primarily for bitwise float/double equality.\n"
  example: []
  syntax:
    content: public static class ProtobufEqualityComparers
    content.vb: Public Module ProtobufEqualityComparers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer``1
  commentId: M:Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer``1
  id: GetEqualityComparer``1
  parent: Google.Protobuf.Collections.ProtobufEqualityComparers
  langs:
  - csharp
  - vb
  name: GetEqualityComparer<T>()
  nameWithType: ProtobufEqualityComparers.GetEqualityComparer<T>()
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer<T>()
  type: Method
  source:
    remote:
      path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: GetEqualityComparer
    path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
    startLine: 49
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Collections
  summary: "\nReturns an equality comparer for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> suitable for Protobuf equality comparisons.\nThis is usually just the default equality comparer for the type, but floating point numbers are compared\nbitwise.\n"
  example: []
  syntax:
    content: public static EqualityComparer<T> GetEqualityComparer<T>()
    typeParameters:
    - id: T
      description: The type of equality comparer to return.
    return:
      type: System.Collections.Generic.EqualityComparer{{T}}
      description: The equality comparer.
    content.vb: Public Shared Function GetEqualityComparer(Of T) As EqualityComparer(Of T)
  overload: Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer*
  nameWithType.vb: ProtobufEqualityComparers.GetEqualityComparer(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer(Of T)()
  name.vb: GetEqualityComparer(Of T)()
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
  commentId: P:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
  id: BitwiseDoubleEqualityComparer
  parent: Google.Protobuf.Collections.ProtobufEqualityComparers
  langs:
  - csharp
  - vb
  name: BitwiseDoubleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: BitwiseDoubleEqualityComparer
    path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
    startLine: 62
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Collections
  summary: "\nReturns an equality comparer suitable for comparing 64-bit floating point values, by bitwise comparison.\n(NaN values are considered equal, but only when they have the same representation.)\n"
  example: []
  syntax:
    content: public static EqualityComparer<double> BitwiseDoubleEqualityComparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.EqualityComparer{System.Double}
    content.vb: Public Shared ReadOnly Property BitwiseDoubleEqualityComparer As EqualityComparer(Of Double)
  overload: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer
  commentId: P:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer
  id: BitwiseSingleEqualityComparer
  parent: Google.Protobuf.Collections.ProtobufEqualityComparers
  langs:
  - csharp
  - vb
  name: BitwiseSingleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseSingleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: BitwiseSingleEqualityComparer
    path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
    startLine: 68
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Collections
  summary: "\nReturns an equality comparer suitable for comparing 32-bit floating point values, by bitwise comparison.\n(NaN values are considered equal, but only when they have the same representation.)\n"
  example: []
  syntax:
    content: public static EqualityComparer<float> BitwiseSingleEqualityComparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.EqualityComparer{System.Single}
    content.vb: Public Shared ReadOnly Property BitwiseSingleEqualityComparer As EqualityComparer(Of Single)
  overload: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
  commentId: P:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
  id: BitwiseNullableDoubleEqualityComparer
  parent: Google.Protobuf.Collections.ProtobufEqualityComparers
  langs:
  - csharp
  - vb
  name: BitwiseNullableDoubleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: BitwiseNullableDoubleEqualityComparer
    path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
    startLine: 74
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Collections
  summary: "\nReturns an equality comparer suitable for comparing nullable 64-bit floating point values, by bitwise comparison.\n(NaN values are considered equal, but only when they have the same representation.)\n"
  example: []
  syntax:
    content: public static EqualityComparer<double?> BitwiseNullableDoubleEqualityComparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.EqualityComparer{System.Nullable{System.Double}}
    content.vb: Public Shared ReadOnly Property BitwiseNullableDoubleEqualityComparer As EqualityComparer(Of Double?)
  overload: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
  commentId: P:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
  id: BitwiseNullableSingleEqualityComparer
  parent: Google.Protobuf.Collections.ProtobufEqualityComparers
  langs:
  - csharp
  - vb
  name: BitwiseNullableSingleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
  type: Property
  source:
    remote:
      path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
      branch: 3.11.x
      repo: https://github.com/google/protobuf
    id: BitwiseNullableSingleEqualityComparer
    path: csharp/src/Google.Protobuf/Collections/ProtobufEqualityComparers.cs
    startLine: 80
  assemblies:
  - Google.Protobuf
  namespace: Google.Protobuf.Collections
  summary: "\nReturns an equality comparer suitable for comparing nullable 32-bit floating point values, by bitwise comparison.\n(NaN values are considered equal, but only when they have the same representation.)\n"
  example: []
  syntax:
    content: public static EqualityComparer<float?> BitwiseNullableSingleEqualityComparer { get; }
    parameters: []
    return:
      type: System.Collections.Generic.EqualityComparer{System.Nullable{System.Single}}
    content.vb: Public Shared ReadOnly Property BitwiseNullableSingleEqualityComparer As EqualityComparer(Of Single?)
  overload: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Google.Protobuf.Collections
  commentId: N:Google.Protobuf.Collections
  name: Google.Protobuf.Collections
  nameWithType: Google.Protobuf.Collections
  fullName: Google.Protobuf.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer*
  commentId: Overload:Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer
  name: GetEqualityComparer
  nameWithType: ProtobufEqualityComparers.GetEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.GetEqualityComparer
- uid: System.Collections.Generic.EqualityComparer{{T}}
  commentId: T:System.Collections.Generic.EqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.EqualityComparer`1
  name: EqualityComparer<T>
  nameWithType: EqualityComparer<T>
  fullName: System.Collections.Generic.EqualityComparer<T>
  nameWithType.vb: EqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.EqualityComparer(Of T)
  name.vb: EqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.EqualityComparer`1
  commentId: T:System.Collections.Generic.EqualityComparer`1
  isExternal: true
  name: EqualityComparer<T>
  nameWithType: EqualityComparer<T>
  fullName: System.Collections.Generic.EqualityComparer<T>
  nameWithType.vb: EqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.EqualityComparer(Of T)
  name.vb: EqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer*
  commentId: Overload:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
  name: BitwiseDoubleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseDoubleEqualityComparer
- uid: System.Collections.Generic.EqualityComparer{System.Double}
  commentId: T:System.Collections.Generic.EqualityComparer{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.EqualityComparer`1
  name: EqualityComparer<Double>
  nameWithType: EqualityComparer<Double>
  fullName: System.Collections.Generic.EqualityComparer<System.Double>
  nameWithType.vb: EqualityComparer(Of Double)
  fullName.vb: System.Collections.Generic.EqualityComparer(Of System.Double)
  name.vb: EqualityComparer(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer*
  commentId: Overload:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer
  name: BitwiseSingleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseSingleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseSingleEqualityComparer
- uid: System.Collections.Generic.EqualityComparer{System.Single}
  commentId: T:System.Collections.Generic.EqualityComparer{System.Single}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.EqualityComparer`1
  name: EqualityComparer<Single>
  nameWithType: EqualityComparer<Single>
  fullName: System.Collections.Generic.EqualityComparer<System.Single>
  nameWithType.vb: EqualityComparer(Of Single)
  fullName.vb: System.Collections.Generic.EqualityComparer(Of System.Single)
  name.vb: EqualityComparer(Of Single)
  spec.csharp:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer*
  commentId: Overload:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
  name: BitwiseNullableDoubleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer
- uid: System.Collections.Generic.EqualityComparer{System.Nullable{System.Double}}
  commentId: T:System.Collections.Generic.EqualityComparer{System.Nullable{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.EqualityComparer`1
  name: EqualityComparer<Nullable<Double>>
  nameWithType: EqualityComparer<Nullable<Double>>
  fullName: System.Collections.Generic.EqualityComparer<System.Nullable<System.Double>>
  nameWithType.vb: EqualityComparer(Of Nullable(Of Double))
  fullName.vb: System.Collections.Generic.EqualityComparer(Of System.Nullable(Of System.Double))
  name.vb: EqualityComparer(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer*
  commentId: Overload:Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
  name: BitwiseNullableSingleEqualityComparer
  nameWithType: ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
  fullName: Google.Protobuf.Collections.ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer
- uid: System.Collections.Generic.EqualityComparer{System.Nullable{System.Single}}
  commentId: T:System.Collections.Generic.EqualityComparer{System.Nullable{System.Single}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.EqualityComparer`1
  name: EqualityComparer<Nullable<Single>>
  nameWithType: EqualityComparer<Nullable<Single>>
  fullName: System.Collections.Generic.EqualityComparer<System.Nullable<System.Single>>
  nameWithType.vb: EqualityComparer(Of Nullable(Of Single))
  fullName.vb: System.Collections.Generic.EqualityComparer(Of System.Nullable(Of System.Single))
  name.vb: EqualityComparer(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.EqualityComparer`1
    name: EqualityComparer
    nameWithType: EqualityComparer
    fullName: System.Collections.Generic.EqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
