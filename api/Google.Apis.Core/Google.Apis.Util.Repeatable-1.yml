### YamlMime:ManagedReference
items:
- uid: Google.Apis.Util.Repeatable`1
  commentId: T:Google.Apis.Util.Repeatable`1
  id: Repeatable`1
  parent: Google.Apis.Util
  children:
  - Google.Apis.Util.Repeatable`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - Google.Apis.Util.Repeatable`1.GetEnumerator
  - Google.Apis.Util.Repeatable`1.op_Implicit(`0)~Google.Apis.Util.Repeatable{`0}
  - Google.Apis.Util.Repeatable`1.op_Implicit(`0[])~Google.Apis.Util.Repeatable{`0}
  - Google.Apis.Util.Repeatable`1.op_Implicit(System.Collections.Generic.List{`0})~Google.Apis.Util.Repeatable{`0}
  - Google.Apis.Util.Repeatable`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: Repeatable<T>
  nameWithType: Repeatable<T>
  fullName: Google.Apis.Util.Repeatable<T>
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Repeatable
    path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
    startLine: 25
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Util
  summary: "\nRepeatable class which allows you to both pass a single element, as well as an array, as a parameter value.\n"
  example: []
  syntax:
    content: 'public class Repeatable<T> : IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class Repeatable(Of T)
          Implements IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Google.Apis.Util.Repeatable`1.Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
  nameWithType.vb: Repeatable(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Google.Apis.Util.Repeatable(Of T)
  name.vb: Repeatable(Of T)
- uid: Google.Apis.Util.Repeatable`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Google.Apis.Util.Repeatable`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: Google.Apis.Util.Repeatable`1
  langs:
  - csharp
  - vb
  name: Repeatable(IEnumerable<T>)
  nameWithType: Repeatable<T>.Repeatable(IEnumerable<T>)
  fullName: Google.Apis.Util.Repeatable<T>.Repeatable(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: .ctor
    path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
    startLine: 30
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Util
  summary: Creates a repeatable value.
  example: []
  syntax:
    content: public Repeatable(IEnumerable<T> enumeration)
    parameters:
    - id: enumeration
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub New(enumeration As IEnumerable(Of T))
  overload: Google.Apis.Util.Repeatable`1.#ctor*
  nameWithType.vb: Repeatable(Of T).Repeatable(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Util.Repeatable(Of T).Repeatable(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Repeatable(IEnumerable(Of T))
- uid: Google.Apis.Util.Repeatable`1.GetEnumerator
  commentId: M:Google.Apis.Util.Repeatable`1.GetEnumerator
  id: GetEnumerator
  parent: Google.Apis.Util.Repeatable`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Repeatable<T>.GetEnumerator()
  fullName: Google.Apis.Util.Repeatable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GetEnumerator
    path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
    startLine: 36
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Util
  example: []
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: Google.Apis.Util.Repeatable`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: Repeatable(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Util.Repeatable(Of T).GetEnumerator()
- uid: Google.Apis.Util.Repeatable`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Google.Apis.Util.Repeatable`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Google.Apis.Util.Repeatable`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Repeatable<T>.IEnumerable.GetEnumerator()
  fullName: Google.Apis.Util.Repeatable<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: System.Collections.IEnumerable.GetEnumerator
    path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
    startLine: 41
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Util
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Google.Apis.Util.Repeatable`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Repeatable(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Google.Apis.Util.Repeatable(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Google.Apis.Util.Repeatable`1.op_Implicit(`0)~Google.Apis.Util.Repeatable{`0}
  commentId: M:Google.Apis.Util.Repeatable`1.op_Implicit(`0)~Google.Apis.Util.Repeatable{`0}
  id: op_Implicit(`0)~Google.Apis.Util.Repeatable{`0}
  parent: Google.Apis.Util.Repeatable`1
  langs:
  - csharp
  - vb
  name: Implicit(T to Repeatable<T>)
  nameWithType: Repeatable<T>.Implicit(T to Repeatable<T>)
  fullName: Google.Apis.Util.Repeatable<T>.Implicit(T to Google.Apis.Util.Repeatable<T>)
  type: Operator
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: op_Implicit
    path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
    startLine: 47
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Util
  summary: Converts the single element into a repeatable.
  example: []
  syntax:
    content: public static implicit operator Repeatable<T>(T elem)
    parameters:
    - id: elem
      type: '{T}'
    return:
      type: Google.Apis.Util.Repeatable`1
    content.vb: Public Shared Widening Operator CType(elem As T) As Repeatable(Of T)
  overload: Google.Apis.Util.Repeatable`1.op_Implicit*
  nameWithType.vb: Repeatable(Of T).Widening(T to Repeatable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Apis.Util.Repeatable(Of T).Widening(T to Google.Apis.Util.Repeatable(Of T))
  name.vb: Widening(T to Repeatable(Of T))
- uid: Google.Apis.Util.Repeatable`1.op_Implicit(`0[])~Google.Apis.Util.Repeatable{`0}
  commentId: M:Google.Apis.Util.Repeatable`1.op_Implicit(`0[])~Google.Apis.Util.Repeatable{`0}
  id: op_Implicit(`0[])~Google.Apis.Util.Repeatable{`0}
  parent: Google.Apis.Util.Repeatable`1
  langs:
  - csharp
  - vb
  name: Implicit(T[] to Repeatable<T>)
  nameWithType: Repeatable<T>.Implicit(T[] to Repeatable<T>)
  fullName: Google.Apis.Util.Repeatable<T>.Implicit(T[] to Google.Apis.Util.Repeatable<T>)
  type: Operator
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: op_Implicit
    path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
    startLine: 58
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Util
  summary: Converts a number of elements into a repeatable.
  example: []
  syntax:
    content: public static implicit operator Repeatable<T>(T[] elem)
    parameters:
    - id: elem
      type: '{T}[]'
    return:
      type: Google.Apis.Util.Repeatable`1
    content.vb: Public Shared Widening Operator CType(elem As T()) As Repeatable(Of T)
  overload: Google.Apis.Util.Repeatable`1.op_Implicit*
  nameWithType.vb: Repeatable(Of T).Widening(T() to Repeatable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Apis.Util.Repeatable(Of T).Widening(T() to Google.Apis.Util.Repeatable(Of T))
  name.vb: Widening(T() to Repeatable(Of T))
- uid: Google.Apis.Util.Repeatable`1.op_Implicit(System.Collections.Generic.List{`0})~Google.Apis.Util.Repeatable{`0}
  commentId: M:Google.Apis.Util.Repeatable`1.op_Implicit(System.Collections.Generic.List{`0})~Google.Apis.Util.Repeatable{`0}
  id: op_Implicit(System.Collections.Generic.List{`0})~Google.Apis.Util.Repeatable{`0}
  parent: Google.Apis.Util.Repeatable`1
  langs:
  - csharp
  - vb
  name: Implicit(List<T> to Repeatable<T>)
  nameWithType: Repeatable<T>.Implicit(List<T> to Repeatable<T>)
  fullName: Google.Apis.Util.Repeatable<T>.Implicit(System.Collections.Generic.List<T> to Google.Apis.Util.Repeatable<T>)
  type: Operator
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: op_Implicit
    path: Src/Support/Google.Apis.Core/Util/Repeatable.cs
    startLine: 69
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Util
  summary: Converts a number of elements into a repeatable.
  example: []
  syntax:
    content: public static implicit operator Repeatable<T>(List<T> elem)
    parameters:
    - id: elem
      type: System.Collections.Generic.List{{T}}
    return:
      type: Google.Apis.Util.Repeatable`1
    content.vb: Public Shared Widening Operator CType(elem As List(Of T)) As Repeatable(Of T)
  overload: Google.Apis.Util.Repeatable`1.op_Implicit*
  nameWithType.vb: Repeatable(Of T).Widening(List(Of T) to Repeatable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Apis.Util.Repeatable(Of T).Widening(System.Collections.Generic.List(Of T) to Google.Apis.Util.Repeatable(Of T))
  name.vb: Widening(List(Of T) to Repeatable(Of T))
references:
- uid: Google.Apis.Util
  commentId: N:Google.Apis.Util
  isExternal: false
  name: Google.Apis.Util
  nameWithType: Google.Apis.Util
  fullName: Google.Apis.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util.Repeatable`1.Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
  commentId: M:Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  parent: Google.Apis.Util.Utilities
  definition: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  name: ThrowIfNull<Repeatable<T>>(String)
  nameWithType: Utilities.ThrowIfNull<Repeatable<T>>(String)
  fullName: Google.Apis.Util.Utilities.ThrowIfNull<Google.Apis.Util.Repeatable<T>>(System.String)
  nameWithType.vb: Utilities.ThrowIfNull(Of Repeatable(Of T))(String)
  fullName.vb: Google.Apis.Util.Utilities.ThrowIfNull(Of Google.Apis.Util.Repeatable(Of T))(System.String)
  name.vb: ThrowIfNull(Of Repeatable(Of T))(String)
  spec.csharp:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
    name: ThrowIfNull<Repeatable<T>>
    nameWithType: Utilities.ThrowIfNull<Repeatable<T>>
    fullName: Google.Apis.Util.Utilities.ThrowIfNull<Google.Apis.Util.Repeatable<T>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
    name: ThrowIfNull(Of Repeatable(Of T))
    nameWithType: Utilities.ThrowIfNull(Of Repeatable(Of T))
    fullName: Google.Apis.Util.Utilities.ThrowIfNull(Of Google.Apis.Util.Repeatable(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  commentId: M:Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  isExternal: true
  name: ThrowIfNull<T>(T, String)
  nameWithType: Utilities.ThrowIfNull<T>(T, String)
  fullName: Google.Apis.Util.Utilities.ThrowIfNull<T>(T, System.String)
  nameWithType.vb: Utilities.ThrowIfNull(Of T)(T, String)
  fullName.vb: Google.Apis.Util.Utilities.ThrowIfNull(Of T)(T, System.String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull<T>
    nameWithType: Utilities.ThrowIfNull<T>
    fullName: Google.Apis.Util.Utilities.ThrowIfNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull(Of T)
    nameWithType: Utilities.ThrowIfNull(Of T)
    fullName: Google.Apis.Util.Utilities.ThrowIfNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util.Utilities
  commentId: T:Google.Apis.Util.Utilities
  parent: Google.Apis.Util
  isExternal: false
  name: Utilities
  nameWithType: Utilities
  fullName: Google.Apis.Util.Utilities
- uid: Google.Apis.Util.Repeatable`1.#ctor*
  commentId: Overload:Google.Apis.Util.Repeatable`1.#ctor
  isExternal: false
  name: Repeatable
  nameWithType: Repeatable<T>.Repeatable
  fullName: Google.Apis.Util.Repeatable<T>.Repeatable
  nameWithType.vb: Repeatable(Of T).Repeatable
  fullName.vb: Google.Apis.Util.Repeatable(Of T).Repeatable
- uid: Google.Apis.Util.Repeatable`1.GetEnumerator*
  commentId: Overload:Google.Apis.Util.Repeatable`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: Repeatable<T>.GetEnumerator
  fullName: Google.Apis.Util.Repeatable<T>.GetEnumerator
  nameWithType.vb: Repeatable(Of T).GetEnumerator
  fullName.vb: Google.Apis.Util.Repeatable(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util.Repeatable`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Google.Apis.Util.Repeatable`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: Repeatable<T>.IEnumerable.GetEnumerator
  fullName: Google.Apis.Util.Repeatable<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Repeatable(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Google.Apis.Util.Repeatable(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Google.Apis.Util.Repeatable`1.op_Implicit*
  commentId: Overload:Google.Apis.Util.Repeatable`1.op_Implicit
  isExternal: false
  name: Implicit
  nameWithType: Repeatable<T>.Implicit
  fullName: Google.Apis.Util.Repeatable<T>.Implicit
  nameWithType.vb: Repeatable(Of T).Widening
  fullName.vb: Google.Apis.Util.Repeatable(Of T).Widening
  name.vb: Widening
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Google.Apis.Util.Repeatable`1
  commentId: T:Google.Apis.Util.Repeatable`1
  parent: Google.Apis.Util
  isExternal: false
  name: Repeatable<T>
  nameWithType: Repeatable<T>
  fullName: Google.Apis.Util.Repeatable<T>
  nameWithType.vb: Repeatable(Of T)
  fullName.vb: Google.Apis.Util.Repeatable(Of T)
  name.vb: Repeatable(Of T)
  spec.csharp:
  - uid: Google.Apis.Util.Repeatable`1
    name: Repeatable
    nameWithType: Repeatable
    fullName: Google.Apis.Util.Repeatable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Apis.Util.Repeatable`1
    name: Repeatable
    nameWithType: Repeatable
    fullName: Google.Apis.Util.Repeatable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
