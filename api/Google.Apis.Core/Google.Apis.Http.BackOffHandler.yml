### YamlMime:ManagedReference
items:
- uid: Google.Apis.Http.BackOffHandler
  commentId: T:Google.Apis.Http.BackOffHandler
  id: BackOffHandler
  parent: Google.Apis.Http
  children:
  - Google.Apis.Http.BackOffHandler.#ctor(Google.Apis.Http.BackOffHandler.Initializer)
  - Google.Apis.Http.BackOffHandler.#ctor(Google.Apis.Util.IBackOff)
  - Google.Apis.Http.BackOffHandler.BackOff
  - Google.Apis.Http.BackOffHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  - Google.Apis.Http.BackOffHandler.HandleExceptionFunc
  - Google.Apis.Http.BackOffHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  - Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc
  - Google.Apis.Http.BackOffHandler.MaxTimeSpan
  - Google.Apis.Http.BackOffHandler.Wait(System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: BackOffHandler
  nameWithType: BackOffHandler
  fullName: Google.Apis.Http.BackOffHandler
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: BackOffHandler
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 30
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nA thread-safe back-off handler which handles an abnormal HTTP response or an exception with \n<xref href=\"Google.Apis.Util.IBackOff\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class BackOffHandler : IHttpUnsuccessfulResponseHandler, IHttpExceptionHandler'
    content.vb: >-
      Public Class BackOffHandler
          Implements IHttpUnsuccessfulResponseHandler, IHttpExceptionHandler
  inheritance:
  - System.Object
  implements:
  - Google.Apis.Http.IHttpUnsuccessfulResponseHandler
  - Google.Apis.Http.IHttpExceptionHandler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Google.Apis.Http.BackOffHandler.Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Google.Apis.Http.BackOffHandler.BackOff
  commentId: P:Google.Apis.Http.BackOffHandler.BackOff
  id: BackOff
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: BackOff
  nameWithType: BackOffHandler.BackOff
  fullName: Google.Apis.Http.BackOffHandler.BackOff
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: BackOff
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 83
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: Gets the back-off policy used by this back-off handler.
  example: []
  syntax:
    content: public IBackOff BackOff { get; }
    parameters: []
    return:
      type: Google.Apis.Util.IBackOff
    content.vb: Public ReadOnly Property BackOff As IBackOff
  overload: Google.Apis.Http.BackOffHandler.BackOff*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Apis.Http.BackOffHandler.MaxTimeSpan
  commentId: P:Google.Apis.Http.BackOffHandler.MaxTimeSpan
  id: MaxTimeSpan
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: MaxTimeSpan
  nameWithType: BackOffHandler.MaxTimeSpan
  fullName: Google.Apis.Http.BackOffHandler.MaxTimeSpan
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: MaxTimeSpan
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 89
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nGets the maximum time span to wait. If the back-off instance returns a greater time span, the handle method\nreturns <code>false</code>. Default value is 16 seconds per a retry request.\n"
  example: []
  syntax:
    content: public TimeSpan MaxTimeSpan { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property MaxTimeSpan As TimeSpan
  overload: Google.Apis.Http.BackOffHandler.MaxTimeSpan*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc
  commentId: P:Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc
  id: HandleUnsuccessfulResponseFunc
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: HandleUnsuccessfulResponseFunc
  nameWithType: BackOffHandler.HandleUnsuccessfulResponseFunc
  fullName: Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: HandleUnsuccessfulResponseFunc
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 95
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nGets a delegate function which indicates whether this back-off handler should handle an abnormal HTTP \nresponse. The default is <xref href=\"Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public Func<HttpResponseMessage, bool> HandleUnsuccessfulResponseFunc { get; }
    parameters: []
    return:
      type: System.Func{HttpResponseMessage,System.Boolean}
    content.vb: Public ReadOnly Property HandleUnsuccessfulResponseFunc As Func(Of HttpResponseMessage, Boolean)
  overload: Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Apis.Http.BackOffHandler.HandleExceptionFunc
  commentId: P:Google.Apis.Http.BackOffHandler.HandleExceptionFunc
  id: HandleExceptionFunc
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: HandleExceptionFunc
  nameWithType: BackOffHandler.HandleExceptionFunc
  fullName: Google.Apis.Http.BackOffHandler.HandleExceptionFunc
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: HandleExceptionFunc
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 101
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nGets a delegate function which indicates whether this back-off handler should handle an exception. The \ndefault is <xref href=\"Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public Func<Exception, bool> HandleExceptionFunc { get; }
    parameters: []
    return:
      type: System.Func{System.Exception,System.Boolean}
    content.vb: Public ReadOnly Property HandleExceptionFunc As Func(Of Exception, Boolean)
  overload: Google.Apis.Http.BackOffHandler.HandleExceptionFunc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Apis.Http.BackOffHandler.#ctor(Google.Apis.Util.IBackOff)
  commentId: M:Google.Apis.Http.BackOffHandler.#ctor(Google.Apis.Util.IBackOff)
  id: '#ctor(Google.Apis.Util.IBackOff)'
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: BackOffHandler(IBackOff)
  nameWithType: BackOffHandler.BackOffHandler(IBackOff)
  fullName: Google.Apis.Http.BackOffHandler.BackOffHandler(Google.Apis.Util.IBackOff)
  type: Constructor
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: .ctor
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 105
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: Constructs a new back-off handler with the given back-off.
  example: []
  syntax:
    content: public BackOffHandler(IBackOff backOff)
    parameters:
    - id: backOff
      type: Google.Apis.Util.IBackOff
      description: The back-off policy.
    content.vb: Public Sub New(backOff As IBackOff)
  overload: Google.Apis.Http.BackOffHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Http.BackOffHandler.#ctor(Google.Apis.Http.BackOffHandler.Initializer)
  commentId: M:Google.Apis.Http.BackOffHandler.#ctor(Google.Apis.Http.BackOffHandler.Initializer)
  id: '#ctor(Google.Apis.Http.BackOffHandler.Initializer)'
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: BackOffHandler(BackOffHandler.Initializer)
  nameWithType: BackOffHandler.BackOffHandler(BackOffHandler.Initializer)
  fullName: Google.Apis.Http.BackOffHandler.BackOffHandler(Google.Apis.Http.BackOffHandler.Initializer)
  type: Constructor
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: .ctor
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 111
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: Constructs a new back-off handler with the given initializer.
  example: []
  syntax:
    content: public BackOffHandler(BackOffHandler.Initializer initializer)
    parameters:
    - id: initializer
      type: Google.Apis.Http.BackOffHandler.Initializer
    content.vb: Public Sub New(initializer As BackOffHandler.Initializer)
  overload: Google.Apis.Http.BackOffHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Apis.Http.BackOffHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  commentId: M:Google.Apis.Http.BackOffHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  id: HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: HandleResponseAsync(HandleUnsuccessfulResponseArgs)
  nameWithType: BackOffHandler.HandleResponseAsync(HandleUnsuccessfulResponseArgs)
  fullName: Google.Apis.Http.BackOffHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: HandleResponseAsync
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 122
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nHandles an abnormal response when sending a HTTP request. \nA simple rule must be followed, if you modify the request object in a way that the abnormal response can \nbe resolved, you must return <code>true</code>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> HandleResponseAsync(HandleUnsuccessfulResponseArgs args)
    parameters:
    - id: args
      type: Google.Apis.Http.HandleUnsuccessfulResponseArgs
      description: "\nHandle response argument which contains properties such as the request, response, current failed try.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: Whether this handler has made a change that requires the request to be resent.
    content.vb: Public Overridable Function HandleResponseAsync(args As HandleUnsuccessfulResponseArgs) As Task(Of Boolean)
  overload: Google.Apis.Http.BackOffHandler.HandleResponseAsync*
  implements:
  - Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Apis.Http.BackOffHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  commentId: M:Google.Apis.Http.BackOffHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  id: HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: HandleExceptionAsync(HandleExceptionArgs)
  nameWithType: BackOffHandler.HandleExceptionAsync(HandleExceptionArgs)
  fullName: Google.Apis.Http.BackOffHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: HandleExceptionAsync
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 138
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nHandles an exception thrown when sending a HTTP request. \nA simple rule must be followed, if you modify the request object in a way that the exception can be \nresolved, you must return <code>true</code>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> HandleExceptionAsync(HandleExceptionArgs args)
    parameters:
    - id: args
      type: Google.Apis.Http.HandleExceptionArgs
      description: "\nHandle exception argument which properties such as the request, exception, current failed try.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: Whether this handler has made a change that requires the request to be resent.
    content.vb: Public Overridable Function HandleExceptionAsync(args As HandleExceptionArgs) As Task(Of Boolean)
  overload: Google.Apis.Http.BackOffHandler.HandleExceptionAsync*
  implements:
  - Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Apis.Http.BackOffHandler.Wait(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Http.BackOffHandler.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: Google.Apis.Http.BackOffHandler
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan, CancellationToken)
  nameWithType: BackOffHandler.Wait(TimeSpan, CancellationToken)
  fullName: Google.Apis.Http.BackOffHandler.Wait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Wait
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 180
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: Waits the given time span. Overriding this method is recommended for mocking purposes.
  example: []
  syntax:
    content: protected virtual Task Wait(TimeSpan ts, CancellationToken cancellationToken)
    parameters:
    - id: ts
      type: System.TimeSpan
      description: TimeSpan to wait (and block the current thread).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "The cancellation token in case the user wants to cancel the operation in \nthe middle."
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function Wait(ts As TimeSpan, cancellationToken As CancellationToken) As Task
  overload: Google.Apis.Http.BackOffHandler.Wait*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Google.Apis.Util.IBackOff
  commentId: T:Google.Apis.Util.IBackOff
  parent: Google.Apis.Util
  isExternal: false
  name: IBackOff
  nameWithType: IBackOff
  fullName: Google.Apis.Util.IBackOff
- uid: Google.Apis.Http
  commentId: N:Google.Apis.Http
  isExternal: false
  name: Google.Apis.Http
  nameWithType: Google.Apis.Http
  fullName: Google.Apis.Http
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Apis.Http.IHttpUnsuccessfulResponseHandler
  commentId: T:Google.Apis.Http.IHttpUnsuccessfulResponseHandler
  parent: Google.Apis.Http
  isExternal: false
  name: IHttpUnsuccessfulResponseHandler
  nameWithType: IHttpUnsuccessfulResponseHandler
  fullName: Google.Apis.Http.IHttpUnsuccessfulResponseHandler
- uid: Google.Apis.Http.IHttpExceptionHandler
  commentId: T:Google.Apis.Http.IHttpExceptionHandler
  parent: Google.Apis.Http
  isExternal: false
  name: IHttpExceptionHandler
  nameWithType: IHttpExceptionHandler
  fullName: Google.Apis.Http.IHttpExceptionHandler
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.BackOffHandler.Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
  commentId: M:Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  parent: Google.Apis.Util.Utilities
  definition: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  name: ThrowIfNull<BackOffHandler>(String)
  nameWithType: Utilities.ThrowIfNull<BackOffHandler>(String)
  fullName: Google.Apis.Util.Utilities.ThrowIfNull<Google.Apis.Http.BackOffHandler>(System.String)
  nameWithType.vb: Utilities.ThrowIfNull(Of BackOffHandler)(String)
  fullName.vb: Google.Apis.Util.Utilities.ThrowIfNull(Of Google.Apis.Http.BackOffHandler)(System.String)
  name.vb: ThrowIfNull(Of BackOffHandler)(String)
  spec.csharp:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
    name: ThrowIfNull<BackOffHandler>
    nameWithType: Utilities.ThrowIfNull<BackOffHandler>
    fullName: Google.Apis.Util.Utilities.ThrowIfNull<Google.Apis.Http.BackOffHandler>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
    name: ThrowIfNull(Of BackOffHandler)
    nameWithType: Utilities.ThrowIfNull(Of BackOffHandler)
    fullName: Google.Apis.Util.Utilities.ThrowIfNull(Of Google.Apis.Http.BackOffHandler)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util
  commentId: N:Google.Apis.Util
  isExternal: false
  name: Google.Apis.Util
  nameWithType: Google.Apis.Util
  fullName: Google.Apis.Util
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  commentId: M:Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  isExternal: true
  name: ThrowIfNull<T>(T, String)
  nameWithType: Utilities.ThrowIfNull<T>(T, String)
  fullName: Google.Apis.Util.Utilities.ThrowIfNull<T>(T, System.String)
  nameWithType.vb: Utilities.ThrowIfNull(Of T)(T, String)
  fullName.vb: Google.Apis.Util.Utilities.ThrowIfNull(Of T)(T, System.String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull<T>
    nameWithType: Utilities.ThrowIfNull<T>
    fullName: Google.Apis.Util.Utilities.ThrowIfNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull(Of T)
    nameWithType: Utilities.ThrowIfNull(Of T)
    fullName: Google.Apis.Util.Utilities.ThrowIfNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util.Utilities
  commentId: T:Google.Apis.Util.Utilities
  parent: Google.Apis.Util
  isExternal: false
  name: Utilities
  nameWithType: Utilities
  fullName: Google.Apis.Util.Utilities
- uid: Google.Apis.Http.BackOffHandler.BackOff*
  commentId: Overload:Google.Apis.Http.BackOffHandler.BackOff
  isExternal: false
  name: BackOff
  nameWithType: BackOffHandler.BackOff
  fullName: Google.Apis.Http.BackOffHandler.BackOff
- uid: Google.Apis.Http.BackOffHandler.MaxTimeSpan*
  commentId: Overload:Google.Apis.Http.BackOffHandler.MaxTimeSpan
  isExternal: false
  name: MaxTimeSpan
  nameWithType: BackOffHandler.MaxTimeSpan
  fullName: Google.Apis.Http.BackOffHandler.MaxTimeSpan
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  commentId: F:Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
- uid: Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc*
  commentId: Overload:Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc
  isExternal: false
  name: HandleUnsuccessfulResponseFunc
  nameWithType: BackOffHandler.HandleUnsuccessfulResponseFunc
  fullName: Google.Apis.Http.BackOffHandler.HandleUnsuccessfulResponseFunc
- uid: System.Func{HttpResponseMessage,System.Boolean}
  commentId: T:System.Func{HttpResponseMessage,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<HttpResponseMessage, Boolean>
  nameWithType: Func<HttpResponseMessage, Boolean>
  fullName: System.Func<HttpResponseMessage, System.Boolean>
  nameWithType.vb: Func(Of HttpResponseMessage, Boolean)
  fullName.vb: System.Func(Of HttpResponseMessage, System.Boolean)
  name.vb: Func(Of HttpResponseMessage, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
  commentId: F:Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
- uid: Google.Apis.Http.BackOffHandler.HandleExceptionFunc*
  commentId: Overload:Google.Apis.Http.BackOffHandler.HandleExceptionFunc
  isExternal: false
  name: HandleExceptionFunc
  nameWithType: BackOffHandler.HandleExceptionFunc
  fullName: Google.Apis.Http.BackOffHandler.HandleExceptionFunc
- uid: System.Func{System.Exception,System.Boolean}
  commentId: T:System.Func{System.Exception,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Exception, Boolean>
  nameWithType: Func<Exception, Boolean>
  fullName: System.Func<System.Exception, System.Boolean>
  nameWithType.vb: Func(Of Exception, Boolean)
  fullName.vb: System.Func(Of System.Exception, System.Boolean)
  name.vb: Func(Of Exception, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.BackOffHandler.#ctor*
  commentId: Overload:Google.Apis.Http.BackOffHandler.#ctor
  isExternal: false
  name: BackOffHandler
  nameWithType: BackOffHandler.BackOffHandler
  fullName: Google.Apis.Http.BackOffHandler.BackOffHandler
- uid: Google.Apis.Http.BackOffHandler.Initializer
  commentId: T:Google.Apis.Http.BackOffHandler.Initializer
  parent: Google.Apis.Http
  isExternal: false
  name: BackOffHandler.Initializer
  nameWithType: BackOffHandler.Initializer
  fullName: Google.Apis.Http.BackOffHandler.Initializer
- uid: Google.Apis.Http.BackOffHandler.HandleResponseAsync*
  commentId: Overload:Google.Apis.Http.BackOffHandler.HandleResponseAsync
  isExternal: false
  name: HandleResponseAsync
  nameWithType: BackOffHandler.HandleResponseAsync
  fullName: Google.Apis.Http.BackOffHandler.HandleResponseAsync
- uid: Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  commentId: M:Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  parent: Google.Apis.Http.IHttpUnsuccessfulResponseHandler
  isExternal: false
  name: HandleResponseAsync(HandleUnsuccessfulResponseArgs)
  nameWithType: IHttpUnsuccessfulResponseHandler.HandleResponseAsync(HandleUnsuccessfulResponseArgs)
  fullName: Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
  spec.csharp:
  - uid: Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
    name: HandleResponseAsync
    nameWithType: IHttpUnsuccessfulResponseHandler.HandleResponseAsync
    fullName: Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Apis.Http.HandleUnsuccessfulResponseArgs
    name: HandleUnsuccessfulResponseArgs
    nameWithType: HandleUnsuccessfulResponseArgs
    fullName: Google.Apis.Http.HandleUnsuccessfulResponseArgs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync(Google.Apis.Http.HandleUnsuccessfulResponseArgs)
    name: HandleResponseAsync
    nameWithType: IHttpUnsuccessfulResponseHandler.HandleResponseAsync
    fullName: Google.Apis.Http.IHttpUnsuccessfulResponseHandler.HandleResponseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Apis.Http.HandleUnsuccessfulResponseArgs
    name: HandleUnsuccessfulResponseArgs
    nameWithType: HandleUnsuccessfulResponseArgs
    fullName: Google.Apis.Http.HandleUnsuccessfulResponseArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.HandleUnsuccessfulResponseArgs
  commentId: T:Google.Apis.Http.HandleUnsuccessfulResponseArgs
  parent: Google.Apis.Http
  isExternal: false
  name: HandleUnsuccessfulResponseArgs
  nameWithType: HandleUnsuccessfulResponseArgs
  fullName: Google.Apis.Http.HandleUnsuccessfulResponseArgs
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Google.Apis.Http.BackOffHandler.HandleExceptionAsync*
  commentId: Overload:Google.Apis.Http.BackOffHandler.HandleExceptionAsync
  isExternal: false
  name: HandleExceptionAsync
  nameWithType: BackOffHandler.HandleExceptionAsync
  fullName: Google.Apis.Http.BackOffHandler.HandleExceptionAsync
- uid: Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  commentId: M:Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  parent: Google.Apis.Http.IHttpExceptionHandler
  isExternal: false
  name: HandleExceptionAsync(HandleExceptionArgs)
  nameWithType: IHttpExceptionHandler.HandleExceptionAsync(HandleExceptionArgs)
  fullName: Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
  spec.csharp:
  - uid: Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
    name: HandleExceptionAsync
    nameWithType: IHttpExceptionHandler.HandleExceptionAsync
    fullName: Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Apis.Http.HandleExceptionArgs
    name: HandleExceptionArgs
    nameWithType: HandleExceptionArgs
    fullName: Google.Apis.Http.HandleExceptionArgs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync(Google.Apis.Http.HandleExceptionArgs)
    name: HandleExceptionAsync
    nameWithType: IHttpExceptionHandler.HandleExceptionAsync
    fullName: Google.Apis.Http.IHttpExceptionHandler.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Apis.Http.HandleExceptionArgs
    name: HandleExceptionArgs
    nameWithType: HandleExceptionArgs
    fullName: Google.Apis.Http.HandleExceptionArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.HandleExceptionArgs
  commentId: T:Google.Apis.Http.HandleExceptionArgs
  parent: Google.Apis.Http
  isExternal: false
  name: HandleExceptionArgs
  nameWithType: HandleExceptionArgs
  fullName: Google.Apis.Http.HandleExceptionArgs
- uid: Google.Apis.Http.BackOffHandler.Wait*
  commentId: Overload:Google.Apis.Http.BackOffHandler.Wait
  isExternal: false
  name: Wait
  nameWithType: BackOffHandler.Wait
  fullName: Google.Apis.Http.BackOffHandler.Wait
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
