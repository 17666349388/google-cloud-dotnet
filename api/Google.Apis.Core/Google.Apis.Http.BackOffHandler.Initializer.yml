### YamlMime:ManagedReference
items:
- uid: Google.Apis.Http.BackOffHandler.Initializer
  commentId: T:Google.Apis.Http.BackOffHandler.Initializer
  id: BackOffHandler.Initializer
  parent: Google.Apis.Http
  children:
  - Google.Apis.Http.BackOffHandler.Initializer.#ctor(Google.Apis.Util.IBackOff)
  - Google.Apis.Http.BackOffHandler.Initializer.BackOff
  - Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
  - Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  - Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc
  - Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
  - Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan
  langs:
  - csharp
  - vb
  name: BackOffHandler.Initializer
  nameWithType: BackOffHandler.Initializer
  fullName: Google.Apis.Http.BackOffHandler.Initializer
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Initializer
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 35
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: An initializer class to initialize a back-off handler.
  example: []
  syntax:
    content: public class Initializer
    content.vb: Public Class Initializer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Google.Apis.Http.BackOffHandler.Initializer.Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Google.Apis.Http.BackOffHandler.Initializer.BackOff
  commentId: P:Google.Apis.Http.BackOffHandler.Initializer.BackOff
  id: BackOff
  parent: Google.Apis.Http.BackOffHandler.Initializer
  langs:
  - csharp
  - vb
  name: BackOff
  nameWithType: BackOffHandler.Initializer.BackOff
  fullName: Google.Apis.Http.BackOffHandler.Initializer.BackOff
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: BackOff
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 38
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: Gets the back-off policy used by this back-off handler.
  example: []
  syntax:
    content: public IBackOff BackOff { get; }
    parameters: []
    return:
      type: Google.Apis.Util.IBackOff
    content.vb: Public ReadOnly Property BackOff As IBackOff
  overload: Google.Apis.Http.BackOffHandler.Initializer.BackOff*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan
  commentId: P:Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan
  id: MaxTimeSpan
  parent: Google.Apis.Http.BackOffHandler.Initializer
  langs:
  - csharp
  - vb
  name: MaxTimeSpan
  nameWithType: BackOffHandler.Initializer.MaxTimeSpan
  fullName: Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: MaxTimeSpan
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 45
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nGets or sets the maximum time span to wait. If the back-off instance returns a greater time span than\nthis value, this handler returns <code>false</code> to both <code>HandleExceptionAsync</code> and \n<code>HandleResponseAsync</code>. Default value is 16 seconds per a retry request.\n"
  example: []
  syntax:
    content: public TimeSpan MaxTimeSpan { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property MaxTimeSpan As TimeSpan
  overload: Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
  commentId: P:Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
  id: HandleUnsuccessfulResponseFunc
  parent: Google.Apis.Http.BackOffHandler.Initializer
  langs:
  - csharp
  - vb
  name: HandleUnsuccessfulResponseFunc
  nameWithType: BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
  fullName: Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: HandleUnsuccessfulResponseFunc
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 51
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nGets or sets a delegate function which indicates whether this back-off handler should handle an \nabnormal HTTP response. The default is <xref href=\"Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public Func<HttpResponseMessage, bool> HandleUnsuccessfulResponseFunc { get; set; }
    parameters: []
    return:
      type: System.Func{System.Net.Http.HttpResponseMessage,System.Boolean}
    content.vb: Public Property HandleUnsuccessfulResponseFunc As Func(Of HttpResponseMessage, Boolean)
  overload: Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc
  commentId: P:Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc
  id: HandleExceptionFunc
  parent: Google.Apis.Http.BackOffHandler.Initializer
  langs:
  - csharp
  - vb
  name: HandleExceptionFunc
  nameWithType: BackOffHandler.Initializer.HandleExceptionFunc
  fullName: Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: HandleExceptionFunc
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 57
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nGets or sets a delegate function which indicates whether this back-off handler should handle an \nexception. The default is <xref href=\"Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public Func<Exception, bool> HandleExceptionFunc { get; set; }
    parameters: []
    return:
      type: System.Func{System.Exception,System.Boolean}
    content.vb: Public Property HandleExceptionFunc As Func(Of Exception, Boolean)
  overload: Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  commentId: F:Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  id: DefaultHandleUnsuccessfulResponseFunc
  parent: Google.Apis.Http.BackOffHandler.Initializer
  langs:
  - csharp
  - vb
  name: DefaultHandleUnsuccessfulResponseFunc
  nameWithType: BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  fullName: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  type: Field
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: DefaultHandleUnsuccessfulResponseFunc
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 60
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: Default function which handles server errors (503).
  example: []
  syntax:
    content: public static readonly Func<HttpResponseMessage, bool> DefaultHandleUnsuccessfulResponseFunc
    return:
      type: System.Func{System.Net.Http.HttpResponseMessage,System.Boolean}
    content.vb: Public Shared ReadOnly DefaultHandleUnsuccessfulResponseFunc As Func(Of HttpResponseMessage, Boolean)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
  commentId: F:Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
  id: DefaultHandleExceptionFunc
  parent: Google.Apis.Http.BackOffHandler.Initializer
  langs:
  - csharp
  - vb
  name: DefaultHandleExceptionFunc
  nameWithType: BackOffHandler.Initializer.DefaultHandleExceptionFunc
  fullName: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
  type: Field
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: DefaultHandleExceptionFunc
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 69
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: "\nDefault function which handles exception which aren&apos;t \n<xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref>. Those exceptions represent a task or an operation\nwhich was canceled and shouldn&apos;t be retried.\n"
  example: []
  syntax:
    content: public static readonly Func<Exception, bool> DefaultHandleExceptionFunc
    return:
      type: System.Func{System.Exception,System.Boolean}
    content.vb: Public Shared ReadOnly DefaultHandleExceptionFunc As Func(Of Exception, Boolean)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Apis.Http.BackOffHandler.Initializer.#ctor(Google.Apis.Util.IBackOff)
  commentId: M:Google.Apis.Http.BackOffHandler.Initializer.#ctor(Google.Apis.Util.IBackOff)
  id: '#ctor(Google.Apis.Util.IBackOff)'
  parent: Google.Apis.Http.BackOffHandler.Initializer
  langs:
  - csharp
  - vb
  name: Initializer(IBackOff)
  nameWithType: BackOffHandler.Initializer.Initializer(IBackOff)
  fullName: Google.Apis.Http.BackOffHandler.Initializer.Initializer(Google.Apis.Util.IBackOff)
  type: Constructor
  source:
    remote:
      path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: .ctor
    path: Src/Support/Google.Apis.Core/Http/BackOffHandler.cs
    startLine: 73
  assemblies:
  - Google.Apis.Core
  namespace: Google.Apis.Http
  summary: Constructs a new initializer by the given back-off.
  example: []
  syntax:
    content: public Initializer(IBackOff backOff)
    parameters:
    - id: backOff
      type: Google.Apis.Util.IBackOff
    content.vb: Public Sub New(backOff As IBackOff)
  overload: Google.Apis.Http.BackOffHandler.Initializer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Google.Apis.Http
  commentId: N:Google.Apis.Http
  name: Google.Apis.Http
  nameWithType: Google.Apis.Http
  fullName: Google.Apis.Http
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.BackOffHandler.Initializer.Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
  commentId: M:Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  parent: Google.Apis.Util.Utilities
  definition: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  name: ThrowIfNull<BackOffHandler.Initializer>(String)
  nameWithType: Utilities.ThrowIfNull<BackOffHandler.Initializer>(String)
  fullName: Google.Apis.Util.Utilities.ThrowIfNull<Google.Apis.Http.BackOffHandler.Initializer>(System.String)
  nameWithType.vb: Utilities.ThrowIfNull(Of BackOffHandler.Initializer)(String)
  fullName.vb: Google.Apis.Util.Utilities.ThrowIfNull(Of Google.Apis.Http.BackOffHandler.Initializer)(System.String)
  name.vb: ThrowIfNull(Of BackOffHandler.Initializer)(String)
  spec.csharp:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
    name: ThrowIfNull<BackOffHandler.Initializer>
    nameWithType: Utilities.ThrowIfNull<BackOffHandler.Initializer>
    fullName: Google.Apis.Util.Utilities.ThrowIfNull<Google.Apis.Http.BackOffHandler.Initializer>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(System.String)
    name: ThrowIfNull(Of BackOffHandler.Initializer)
    nameWithType: Utilities.ThrowIfNull(Of BackOffHandler.Initializer)
    fullName: Google.Apis.Util.Utilities.ThrowIfNull(Of Google.Apis.Http.BackOffHandler.Initializer)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  commentId: M:Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
  isExternal: true
  name: ThrowIfNull<T>(T, String)
  nameWithType: Utilities.ThrowIfNull<T>(T, String)
  fullName: Google.Apis.Util.Utilities.ThrowIfNull<T>(T, System.String)
  nameWithType.vb: Utilities.ThrowIfNull(Of T)(T, String)
  fullName.vb: Google.Apis.Util.Utilities.ThrowIfNull(Of T)(T, System.String)
  name.vb: ThrowIfNull(Of T)(T, String)
  spec.csharp:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull<T>
    nameWithType: Utilities.ThrowIfNull<T>
    fullName: Google.Apis.Util.Utilities.ThrowIfNull<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Util.Utilities.ThrowIfNull``1(``0,System.String)
    name: ThrowIfNull(Of T)
    nameWithType: Utilities.ThrowIfNull(Of T)
    fullName: Google.Apis.Util.Utilities.ThrowIfNull(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util.Utilities
  commentId: T:Google.Apis.Util.Utilities
  parent: Google.Apis.Util
  name: Utilities
  nameWithType: Utilities
  fullName: Google.Apis.Util.Utilities
- uid: Google.Apis.Util
  commentId: N:Google.Apis.Util
  name: Google.Apis.Util
  nameWithType: Google.Apis.Util
  fullName: Google.Apis.Util
- uid: Google.Apis.Http.BackOffHandler.Initializer.BackOff*
  commentId: Overload:Google.Apis.Http.BackOffHandler.Initializer.BackOff
  name: BackOff
  nameWithType: BackOffHandler.Initializer.BackOff
  fullName: Google.Apis.Http.BackOffHandler.Initializer.BackOff
- uid: Google.Apis.Util.IBackOff
  commentId: T:Google.Apis.Util.IBackOff
  parent: Google.Apis.Util
  name: IBackOff
  nameWithType: IBackOff
  fullName: Google.Apis.Util.IBackOff
- uid: Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan*
  commentId: Overload:Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan
  name: MaxTimeSpan
  nameWithType: BackOffHandler.Initializer.MaxTimeSpan
  fullName: Google.Apis.Http.BackOffHandler.Initializer.MaxTimeSpan
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  commentId: F:Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleUnsuccessfulResponseFunc
  isExternal: true
- uid: Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc*
  commentId: Overload:Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
  name: HandleUnsuccessfulResponseFunc
  nameWithType: BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
  fullName: Google.Apis.Http.BackOffHandler.Initializer.HandleUnsuccessfulResponseFunc
- uid: System.Func{System.Net.Http.HttpResponseMessage,System.Boolean}
  commentId: T:System.Func{System.Net.Http.HttpResponseMessage,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<HttpResponseMessage, Boolean>
  nameWithType: Func<HttpResponseMessage, Boolean>
  fullName: System.Func<System.Net.Http.HttpResponseMessage, System.Boolean>
  nameWithType.vb: Func(Of HttpResponseMessage, Boolean)
  fullName.vb: System.Func(Of System.Net.Http.HttpResponseMessage, System.Boolean)
  name.vb: Func(Of HttpResponseMessage, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
  commentId: F:Google.Apis.Http.BackOffHandler.Initializer.DefaultHandleExceptionFunc
  isExternal: true
- uid: Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc*
  commentId: Overload:Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc
  name: HandleExceptionFunc
  nameWithType: BackOffHandler.Initializer.HandleExceptionFunc
  fullName: Google.Apis.Http.BackOffHandler.Initializer.HandleExceptionFunc
- uid: System.Func{System.Exception,System.Boolean}
  commentId: T:System.Func{System.Exception,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Exception, Boolean>
  nameWithType: Func<Exception, Boolean>
  fullName: System.Func<System.Exception, System.Boolean>
  nameWithType.vb: Func(Of Exception, Boolean)
  fullName.vb: System.Func(Of System.Exception, System.Boolean)
  name.vb: Func(Of Exception, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.TaskCanceledException
  commentId: T:System.Threading.Tasks.TaskCanceledException
  isExternal: true
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  isExternal: true
- uid: Google.Apis.Http.BackOffHandler.Initializer.#ctor*
  commentId: Overload:Google.Apis.Http.BackOffHandler.Initializer.#ctor
  name: Initializer
  nameWithType: BackOffHandler.Initializer.Initializer
  fullName: Google.Apis.Http.BackOffHandler.Initializer.Initializer
