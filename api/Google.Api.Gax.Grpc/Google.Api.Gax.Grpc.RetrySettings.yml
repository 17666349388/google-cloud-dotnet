### YamlMime:ManagedReference
items:
- uid: Google.Api.Gax.Grpc.RetrySettings
  commentId: T:Google.Api.Gax.Grpc.RetrySettings
  id: RetrySettings
  parent: Google.Api.Gax.Grpc
  children:
  - Google.Api.Gax.Grpc.RetrySettings.BackoffJitter
  - Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier
  - Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(Grpc.Core.StatusCode[])
  - Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(System.Collections.Generic.IEnumerable{Grpc.Core.StatusCode})
  - Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff(System.Int32,System.TimeSpan,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  - Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff(System.Int32,System.TimeSpan,System.TimeSpan,System.Double,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  - Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
  - Google.Api.Gax.Grpc.RetrySettings.MaxAttempts
  - Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
  - Google.Api.Gax.Grpc.RetrySettings.NextBackoff(System.TimeSpan)
  - Google.Api.Gax.Grpc.RetrySettings.NoJitter
  - Google.Api.Gax.Grpc.RetrySettings.RandomJitter
  - Google.Api.Gax.Grpc.RetrySettings.RetryFilter
  langs:
  - csharp
  - vb
  name: RetrySettings
  nameWithType: RetrySettings
  fullName: Google.Api.Gax.Grpc.RetrySettings
  type: Class
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: RetrySettings
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 19
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nSettings for retrying RPCs.\n"
  example: []
  syntax:
    content: public sealed class RetrySettings
    content.vb: Public NotInheritable Class RetrySettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Api.Gax.Grpc.RetrySettings.MaxAttempts
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.MaxAttempts
  id: MaxAttempts
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: MaxAttempts
  nameWithType: RetrySettings.MaxAttempts
  fullName: Google.Api.Gax.Grpc.RetrySettings.MaxAttempts
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: MaxAttempts
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 24
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nThe maximum number of attempts to make. Always greater than or equal to 1.\n"
  example: []
  syntax:
    content: public int MaxAttempts { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaxAttempts As Integer
  overload: Google.Api.Gax.Grpc.RetrySettings.MaxAttempts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
  id: InitialBackoff
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: InitialBackoff
  nameWithType: RetrySettings.InitialBackoff
  fullName: Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: InitialBackoff
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 29
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nThe backoff time between the first attempt and the first retry. Always non-negative.\n"
  example: []
  syntax:
    content: public TimeSpan InitialBackoff { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property InitialBackoff As TimeSpan
  overload: Google.Api.Gax.Grpc.RetrySettings.InitialBackoff*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
  id: MaxBackoff
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: MaxBackoff
  nameWithType: RetrySettings.MaxBackoff
  fullName: Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: MaxBackoff
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 34
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nThe maximum backoff time between retries. Always non-negative.\n"
  example: []
  syntax:
    content: public TimeSpan MaxBackoff { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property MaxBackoff As TimeSpan
  overload: Google.Api.Gax.Grpc.RetrySettings.MaxBackoff*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier
  id: BackoffMultiplier
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: BackoffMultiplier
  nameWithType: RetrySettings.BackoffMultiplier
  fullName: Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: BackoffMultiplier
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 45
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nThe multiplier to apply to the backoff on each iteration; always greater than or equal to 1.0.\n"
  remarks: "\n<p>\nAs an example, a multiplier of 2.0 with an initial backoff of 0.1s on an RPC would then apply\na backoff of 0.2s, then 0.4s until it is capped by <xref href=\"Google.Api.Gax.Grpc.RetrySettings.MaxBackoff\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public double BackoffMultiplier { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property BackoffMultiplier As Double
  overload: Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.RetryFilter
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.RetryFilter
  id: RetryFilter
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: RetryFilter
  nameWithType: RetrySettings.RetryFilter
  fullName: Google.Api.Gax.Grpc.RetrySettings.RetryFilter
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: RetryFilter
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 51
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nA predicate to determine whether or not a particular exception should cause the operation to be retried.\nUsually this is simply a matter of checking the status codes. This is never null.\n"
  example: []
  syntax:
    content: public Predicate<Exception> RetryFilter { get; }
    parameters: []
    return:
      type: System.Predicate{System.Exception}
    content.vb: Public ReadOnly Property RetryFilter As Predicate(Of Exception)
  overload: Google.Api.Gax.Grpc.RetrySettings.RetryFilter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.BackoffJitter
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.BackoffJitter
  id: BackoffJitter
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: BackoffJitter
  nameWithType: RetrySettings.BackoffJitter
  fullName: Google.Api.Gax.Grpc.RetrySettings.BackoffJitter
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: BackoffJitter
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 63
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nThe delay jitter to apply for delays, defaulting to <xref href=\"Google.Api.Gax.Grpc.RetrySettings.RandomJitter\" data-throw-if-not-resolved=\"false\"></xref>. This is never null.\n"
  remarks: "\n&quot;Jitter&quot; is used to introduce randomness into the pattern of delays. This is to avoid multiple\nclients performing the same delay pattern starting at the same point in time,\nleading to higher-than-necessary contention. The default jitter simply takes each maximum delay\nand returns an actual delay which is a uniformly random value between 0 and the maximum. This\nis good enough for most applications, but makes precise testing difficult.\n"
  example: []
  syntax:
    content: public RetrySettings.IJitter BackoffJitter { get; }
    parameters: []
    return:
      type: Google.Api.Gax.Grpc.RetrySettings.IJitter
    content.vb: Public ReadOnly Property BackoffJitter As RetrySettings.IJitter
  overload: Google.Api.Gax.Grpc.RetrySettings.BackoffJitter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff(System.Int32,System.TimeSpan,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  commentId: M:Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff(System.Int32,System.TimeSpan,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  id: FromConstantBackoff(System.Int32,System.TimeSpan,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: FromConstantBackoff(Int32, TimeSpan, Predicate<Exception>, RetrySettings.IJitter)
  nameWithType: RetrySettings.FromConstantBackoff(Int32, TimeSpan, Predicate<Exception>, RetrySettings.IJitter)
  fullName: Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff(System.Int32, System.TimeSpan, System.Predicate<System.Exception>, Google.Api.Gax.Grpc.RetrySettings.IJitter)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: FromConstantBackoff
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 100
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nReturns a <xref href=\"Google.Api.Gax.Grpc.RetrySettings\" data-throw-if-not-resolved=\"false\"></xref> using the specified maximum number of attempts and a constant backoff.\nJitter is still applied to each backoff, but the &quot;base&quot; value of the backoff is always <code data-dev-comment-type=\"paramref\" class=\"paramref\">backoff</code>.\n"
  example: []
  syntax:
    content: public static RetrySettings FromConstantBackoff(int maxAttempts, TimeSpan backoff, Predicate<Exception> retryFilter, RetrySettings.IJitter backoffJitter = null)
    parameters:
    - id: maxAttempts
      type: System.Int32
      description: The maximum number of attempts to make. Must be positive.
    - id: backoff
      type: System.TimeSpan
      description: The backoff after each failure. Must be non-negative.
    - id: retryFilter
      type: System.Predicate{System.Exception}
      description: The predicate to use to check whether an error should be retried. Must not be null.
    - id: backoffJitter
      type: Google.Api.Gax.Grpc.RetrySettings.IJitter
      description: The jitter to use on each backoff. May be null, in which case <xref href="Google.Api.Gax.Grpc.RetrySettings.RandomJitter" data-throw-if-not-resolved="false"></xref> is used.
    return:
      type: Google.Api.Gax.Grpc.RetrySettings
      description: A retry with constant backoff.
    content.vb: Public Shared Function FromConstantBackoff(maxAttempts As Integer, backoff As TimeSpan, retryFilter As Predicate(Of Exception), backoffJitter As RetrySettings.IJitter = Nothing) As RetrySettings
  overload: Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff*
  nameWithType.vb: RetrySettings.FromConstantBackoff(Int32, TimeSpan, Predicate(Of Exception), RetrySettings.IJitter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff(System.Int32, System.TimeSpan, System.Predicate(Of System.Exception), Google.Api.Gax.Grpc.RetrySettings.IJitter)
  name.vb: FromConstantBackoff(Int32, TimeSpan, Predicate(Of Exception), RetrySettings.IJitter)
- uid: Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff(System.Int32,System.TimeSpan,System.TimeSpan,System.Double,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  commentId: M:Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff(System.Int32,System.TimeSpan,System.TimeSpan,System.Double,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  id: FromExponentialBackoff(System.Int32,System.TimeSpan,System.TimeSpan,System.Double,System.Predicate{System.Exception},Google.Api.Gax.Grpc.RetrySettings.IJitter)
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: FromExponentialBackoff(Int32, TimeSpan, TimeSpan, Double, Predicate<Exception>, RetrySettings.IJitter)
  nameWithType: RetrySettings.FromExponentialBackoff(Int32, TimeSpan, TimeSpan, Double, Predicate<Exception>, RetrySettings.IJitter)
  fullName: Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff(System.Int32, System.TimeSpan, System.TimeSpan, System.Double, System.Predicate<System.Exception>, Google.Api.Gax.Grpc.RetrySettings.IJitter)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: FromExponentialBackoff
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 113
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nReturns a <xref href=\"Google.Api.Gax.Grpc.RetrySettings\" data-throw-if-not-resolved=\"false\"></xref> using the specified maximum number of attempts and an exponential backoff.\n"
  example: []
  syntax:
    content: public static RetrySettings FromExponentialBackoff(int maxAttempts, TimeSpan initialBackoff, TimeSpan maxBackoff, double backoffMultiplier, Predicate<Exception> retryFilter, RetrySettings.IJitter backoffJitter = null)
    parameters:
    - id: maxAttempts
      type: System.Int32
      description: The maximum number of attempts to make. Must be positive.
    - id: initialBackoff
      type: System.TimeSpan
      description: The backoff after the initial failure. Must be non-negative.
    - id: maxBackoff
      type: System.TimeSpan
      description: The maximum backoff. Must be at least <code data-dev-comment-type="paramref" class="paramref">initialBackoff</code>.
    - id: backoffMultiplier
      type: System.Double
      description: The multiplier to apply to backoff times. Must be at least 1.0.
    - id: retryFilter
      type: System.Predicate{System.Exception}
      description: The predicate to use to check whether an error should be retried. Must not be null.
    - id: backoffJitter
      type: Google.Api.Gax.Grpc.RetrySettings.IJitter
      description: The jitter to use on each backoff. May be null, in which case <xref href="Google.Api.Gax.Grpc.RetrySettings.RandomJitter" data-throw-if-not-resolved="false"></xref> is used.
    return:
      type: Google.Api.Gax.Grpc.RetrySettings
      description: A retry with exponential backoff.
    content.vb: Public Shared Function FromExponentialBackoff(maxAttempts As Integer, initialBackoff As TimeSpan, maxBackoff As TimeSpan, backoffMultiplier As Double, retryFilter As Predicate(Of Exception), backoffJitter As RetrySettings.IJitter = Nothing) As RetrySettings
  overload: Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff*
  nameWithType.vb: RetrySettings.FromExponentialBackoff(Int32, TimeSpan, TimeSpan, Double, Predicate(Of Exception), RetrySettings.IJitter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff(System.Int32, System.TimeSpan, System.TimeSpan, System.Double, System.Predicate(Of System.Exception), Google.Api.Gax.Grpc.RetrySettings.IJitter)
  name.vb: FromExponentialBackoff(Int32, TimeSpan, TimeSpan, Double, Predicate(Of Exception), RetrySettings.IJitter)
- uid: Google.Api.Gax.Grpc.RetrySettings.RandomJitter
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.RandomJitter
  id: RandomJitter
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: RandomJitter
  nameWithType: RetrySettings.RandomJitter
  fullName: Google.Api.Gax.Grpc.RetrySettings.RandomJitter
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: RandomJitter
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 139
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nThe default jitter which returns a uniformly distributed random delay between 0 and\nthe specified maximum.\n"
  example: []
  syntax:
    content: public static RetrySettings.IJitter RandomJitter { get; }
    parameters: []
    return:
      type: Google.Api.Gax.Grpc.RetrySettings.IJitter
    content.vb: Public Shared ReadOnly Property RandomJitter As RetrySettings.IJitter
  overload: Google.Api.Gax.Grpc.RetrySettings.RandomJitter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.NoJitter
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.NoJitter
  id: NoJitter
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: NoJitter
  nameWithType: RetrySettings.NoJitter
  fullName: Google.Api.Gax.Grpc.RetrySettings.NoJitter
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: NoJitter
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 144
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nA jitter which simply returns the specified maximum delay.\n"
  example: []
  syntax:
    content: public static RetrySettings.IJitter NoJitter { get; }
    parameters: []
    return:
      type: Google.Api.Gax.Grpc.RetrySettings.IJitter
    content.vb: Public Shared ReadOnly Property NoJitter As RetrySettings.IJitter
  overload: Google.Api.Gax.Grpc.RetrySettings.NoJitter*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(Grpc.Core.StatusCode[])
  commentId: M:Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(Grpc.Core.StatusCode[])
  id: FilterForStatusCodes(Grpc.Core.StatusCode[])
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: FilterForStatusCodes(StatusCode[])
  nameWithType: RetrySettings.FilterForStatusCodes(StatusCode[])
  fullName: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(Grpc.Core.StatusCode[])
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: FilterForStatusCodes
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 151
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nCreates a retry filter based on status codes.\n"
  example: []
  syntax:
    content: public static Predicate<Exception> FilterForStatusCodes(params StatusCode[] statusCodes)
    parameters:
    - id: statusCodes
      type: Grpc.Core.StatusCode[]
      description: The status codes to retry. Must not be null.
    return:
      type: System.Predicate{System.Exception}
      description: A retry filter based on status codes.
    content.vb: Public Shared Function FilterForStatusCodes(ParamArray statusCodes As StatusCode()) As Predicate(Of Exception)
  overload: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes*
  nameWithType.vb: RetrySettings.FilterForStatusCodes(StatusCode())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(Grpc.Core.StatusCode())
  name.vb: FilterForStatusCodes(StatusCode())
- uid: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(System.Collections.Generic.IEnumerable{Grpc.Core.StatusCode})
  commentId: M:Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(System.Collections.Generic.IEnumerable{Grpc.Core.StatusCode})
  id: FilterForStatusCodes(System.Collections.Generic.IEnumerable{Grpc.Core.StatusCode})
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: FilterForStatusCodes(IEnumerable<StatusCode>)
  nameWithType: RetrySettings.FilterForStatusCodes(IEnumerable<StatusCode>)
  fullName: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(System.Collections.Generic.IEnumerable<Grpc.Core.StatusCode>)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: FilterForStatusCodes
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 159
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nCreates a retry filter based on status codes.\n"
  example: []
  syntax:
    content: public static Predicate<Exception> FilterForStatusCodes(IEnumerable<StatusCode> statusCodes)
    parameters:
    - id: statusCodes
      type: System.Collections.Generic.IEnumerable{Grpc.Core.StatusCode}
      description: The status codes to retry. Must not be null.
    return:
      type: System.Predicate{System.Exception}
      description: A retry filter based on status codes.
    content.vb: Public Shared Function FilterForStatusCodes(statusCodes As IEnumerable(Of StatusCode)) As Predicate(Of Exception)
  overload: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes*
  nameWithType.vb: RetrySettings.FilterForStatusCodes(IEnumerable(Of StatusCode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes(System.Collections.Generic.IEnumerable(Of Grpc.Core.StatusCode))
  name.vb: FilterForStatusCodes(IEnumerable(Of StatusCode))
- uid: Google.Api.Gax.Grpc.RetrySettings.NextBackoff(System.TimeSpan)
  commentId: M:Google.Api.Gax.Grpc.RetrySettings.NextBackoff(System.TimeSpan)
  id: NextBackoff(System.TimeSpan)
  parent: Google.Api.Gax.Grpc.RetrySettings
  langs:
  - csharp
  - vb
  name: NextBackoff(TimeSpan)
  nameWithType: RetrySettings.NextBackoff(TimeSpan)
  fullName: Google.Api.Gax.Grpc.RetrySettings.NextBackoff(System.TimeSpan)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/RetrySettings.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: NextBackoff
    path: Google.Api.Gax.Grpc/RetrySettings.cs
    startLine: 171
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nWorks out the next backoff from the current one, based on the multiplier and maximum.\n"
  example: []
  syntax:
    content: public TimeSpan NextBackoff(TimeSpan currentBackoff)
    parameters:
    - id: currentBackoff
      type: System.TimeSpan
      description: The current backoff to use as a basis for the next one.
    return:
      type: System.TimeSpan
      description: The next backoff to use, which is always at least <xref href="Google.Api.Gax.Grpc.RetrySettings.InitialBackoff" data-throw-if-not-resolved="false"></xref> and at most <xref href="Google.Api.Gax.Grpc.RetrySettings.MaxBackoff" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function NextBackoff(currentBackoff As TimeSpan) As TimeSpan
  overload: Google.Api.Gax.Grpc.RetrySettings.NextBackoff*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Google.Api.Gax.Grpc
  commentId: N:Google.Api.Gax.Grpc
  name: Google.Api.Gax.Grpc
  nameWithType: Google.Api.Gax.Grpc
  fullName: Google.Api.Gax.Grpc
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Api.Gax.Grpc.RetrySettings.MaxAttempts*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.MaxAttempts
  name: MaxAttempts
  nameWithType: RetrySettings.MaxAttempts
  fullName: Google.Api.Gax.Grpc.RetrySettings.MaxAttempts
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Google.Api.Gax.Grpc.RetrySettings.InitialBackoff*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
  name: InitialBackoff
  nameWithType: RetrySettings.InitialBackoff
  fullName: Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Google.Api.Gax.Grpc.RetrySettings.MaxBackoff*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
  name: MaxBackoff
  nameWithType: RetrySettings.MaxBackoff
  fullName: Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
- uid: Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.MaxBackoff
  isExternal: true
- uid: Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier
  name: BackoffMultiplier
  nameWithType: RetrySettings.BackoffMultiplier
  fullName: Google.Api.Gax.Grpc.RetrySettings.BackoffMultiplier
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Google.Api.Gax.Grpc.RetrySettings.RetryFilter*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.RetryFilter
  name: RetryFilter
  nameWithType: RetrySettings.RetryFilter
  fullName: Google.Api.Gax.Grpc.RetrySettings.RetryFilter
- uid: System.Predicate{System.Exception}
  commentId: T:System.Predicate{System.Exception}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Exception>
  nameWithType: Predicate<Exception>
  fullName: System.Predicate<System.Exception>
  nameWithType.vb: Predicate(Of Exception)
  fullName.vb: System.Predicate(Of System.Exception)
  name.vb: Predicate(Of Exception)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Api.Gax.Grpc.RetrySettings.RandomJitter
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.RandomJitter
  isExternal: true
- uid: Google.Api.Gax.Grpc.RetrySettings.BackoffJitter*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.BackoffJitter
  name: BackoffJitter
  nameWithType: RetrySettings.BackoffJitter
  fullName: Google.Api.Gax.Grpc.RetrySettings.BackoffJitter
- uid: Google.Api.Gax.Grpc.RetrySettings.IJitter
  commentId: T:Google.Api.Gax.Grpc.RetrySettings.IJitter
  parent: Google.Api.Gax.Grpc
  name: RetrySettings.IJitter
  nameWithType: RetrySettings.IJitter
  fullName: Google.Api.Gax.Grpc.RetrySettings.IJitter
- uid: Google.Api.Gax.Grpc.RetrySettings
  commentId: T:Google.Api.Gax.Grpc.RetrySettings
  parent: Google.Api.Gax.Grpc
  name: RetrySettings
  nameWithType: RetrySettings
  fullName: Google.Api.Gax.Grpc.RetrySettings
- uid: Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff
  name: FromConstantBackoff
  nameWithType: RetrySettings.FromConstantBackoff
  fullName: Google.Api.Gax.Grpc.RetrySettings.FromConstantBackoff
- uid: Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff
  name: FromExponentialBackoff
  nameWithType: RetrySettings.FromExponentialBackoff
  fullName: Google.Api.Gax.Grpc.RetrySettings.FromExponentialBackoff
- uid: Google.Api.Gax.Grpc.RetrySettings.RandomJitter*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.RandomJitter
  name: RandomJitter
  nameWithType: RetrySettings.RandomJitter
  fullName: Google.Api.Gax.Grpc.RetrySettings.RandomJitter
- uid: Google.Api.Gax.Grpc.RetrySettings.NoJitter*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.NoJitter
  name: NoJitter
  nameWithType: RetrySettings.NoJitter
  fullName: Google.Api.Gax.Grpc.RetrySettings.NoJitter
- uid: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes
  name: FilterForStatusCodes
  nameWithType: RetrySettings.FilterForStatusCodes
  fullName: Google.Api.Gax.Grpc.RetrySettings.FilterForStatusCodes
- uid: Grpc.Core.StatusCode[]
  isExternal: true
  name: StatusCode[]
  nameWithType: StatusCode[]
  fullName: Grpc.Core.StatusCode[]
  nameWithType.vb: StatusCode()
  fullName.vb: Grpc.Core.StatusCode()
  name.vb: StatusCode()
  spec.csharp:
  - uid: Grpc.Core.StatusCode
    name: StatusCode
    nameWithType: StatusCode
    fullName: Grpc.Core.StatusCode
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Grpc.Core.StatusCode
    name: StatusCode
    nameWithType: StatusCode
    fullName: Grpc.Core.StatusCode
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{Grpc.Core.StatusCode}
  commentId: T:System.Collections.Generic.IEnumerable{Grpc.Core.StatusCode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<StatusCode>
  nameWithType: IEnumerable<StatusCode>
  fullName: System.Collections.Generic.IEnumerable<Grpc.Core.StatusCode>
  nameWithType.vb: IEnumerable(Of StatusCode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Grpc.Core.StatusCode)
  name.vb: IEnumerable(Of StatusCode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.StatusCode
    name: StatusCode
    nameWithType: StatusCode
    fullName: Grpc.Core.StatusCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.StatusCode
    name: StatusCode
    nameWithType: StatusCode
    fullName: Grpc.Core.StatusCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
  commentId: P:Google.Api.Gax.Grpc.RetrySettings.InitialBackoff
  isExternal: true
- uid: Google.Api.Gax.Grpc.RetrySettings.NextBackoff*
  commentId: Overload:Google.Api.Gax.Grpc.RetrySettings.NextBackoff
  name: NextBackoff
  nameWithType: RetrySettings.NextBackoff
  fullName: Google.Api.Gax.Grpc.RetrySettings.NextBackoff
