### YamlMime:ManagedReference
items:
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  commentId: T:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  id: BidirectionalStreamingBase`2
  parent: Google.Api.Gax.Grpc
  children:
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GetResponseStream
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0)
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0,Grpc.Core.WriteOptions)
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteCompleteAsync
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0)
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0,Grpc.Core.WriteOptions)
  - Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync
  langs:
  - csharp
  - vb
  name: BidirectionalStreamingBase<TRequest, TResponse>
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>
  type: Class
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: BidirectionalStreamingBase
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 20
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nBase class for bidirectional streaming RPC methods.\n"
  example: []
  syntax:
    content: public abstract class BidirectionalStreamingBase<TRequest, TResponse>
    typeParameters:
    - id: TRequest
      description: RPC request type
    - id: TResponse
      description: RPC response type
    content.vb: Public MustInherit Class BidirectionalStreamingBase(Of TRequest, TResponse)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse)
  name.vb: BidirectionalStreamingBase(Of TRequest, TResponse)
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall
  commentId: P:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall
  id: GrpcCall
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: GrpcCall
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.GrpcCall
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.GrpcCall
  type: Property
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GrpcCall
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 29
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nThe underlying gRPC duplex streaming call.\nWarning: DO NOT USE <code>GrpcCall.RequestStream</code> at all if using\n<xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.TryWriteAsync(%600)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteAsync(%600)\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.TryWriteAsync(%600%2cGrpc.Core.WriteOptions)\" data-throw-if-not-resolved=\"false\"></xref> , or <xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteAsync(%600%2cGrpc.Core.WriteOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nDoing so will cause conflict with the write-buffer used within the <code>[Try]WriteAsync</code> methods.\n"
  example: []
  syntax:
    content: public virtual AsyncDuplexStreamingCall<TRequest, TResponse> GrpcCall { get; }
    parameters: []
    return:
      type: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
    content.vb: Public Overridable ReadOnly Property GrpcCall As AsyncDuplexStreamingCall(Of TRequest, TResponse)
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall*
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).GrpcCall
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).GrpcCall
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0)
  id: TryWriteAsync(`0)
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: TryWriteAsync(TRequest)
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.TryWriteAsync(TRequest)
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.TryWriteAsync(TRequest)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: TryWriteAsync
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 43
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nWrites a message to the stream, if there is enough space in the buffer and <xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteCompleteAsync\" data-throw-if-not-resolved=\"false\"></xref>\nhasn&apos;t already been called. The same write options will be used as for the previous message.\n"
  example: []
  syntax:
    content: public virtual Task TryWriteAsync(TRequest message)
    parameters:
    - id: message
      type: '{TRequest}'
      description: The message to write.
    return:
      type: System.Threading.Tasks.Task
      description: >-
        <code>null</code> if the message queue is full or the stream has already been completed;
            otherwise, a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> which will complete when the message has been written to the stream.
    content.vb: Public Overridable Function TryWriteAsync(message As TRequest) As Task
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync*
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteAsync(TRequest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteAsync(TRequest)
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0)
  id: WriteAsync(`0)
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: WriteAsync(TRequest)
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.WriteAsync(TRequest)
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.WriteAsync(TRequest)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: WriteAsync
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 56
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nWrites a message to the stream, if there is enough space in the buffer and <xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteCompleteAsync\" data-throw-if-not-resolved=\"false\"></xref>\nhasn&apos;t already been called. The same write options will be used as for the previous message.\n"
  example: []
  syntax:
    content: public virtual Task WriteAsync(TRequest message)
    parameters:
    - id: message
      type: '{TRequest}'
      description: The message to write.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> which will complete when the message has been written to the stream.
    content.vb: Public Overridable Function WriteAsync(message As TRequest) As Task
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      There isn&apos;t enough space left in the buffer,

      or <xref href="Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteCompleteAsync" data-throw-if-not-resolved="false"></xref> has already been called.
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).WriteAsync(TRequest)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).WriteAsync(TRequest)
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0,Grpc.Core.WriteOptions)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0,Grpc.Core.WriteOptions)
  id: TryWriteAsync(`0,Grpc.Core.WriteOptions)
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: TryWriteAsync(TRequest, WriteOptions)
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.TryWriteAsync(TRequest, WriteOptions)
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.TryWriteAsync(TRequest, Grpc.Core.WriteOptions)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: TryWriteAsync
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 68
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nWrites a message to the stream, if there is enough space in the buffer and <xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteCompleteAsync\" data-throw-if-not-resolved=\"false\"></xref>\nhasn&apos;t already been called.\n"
  example: []
  syntax:
    content: public virtual Task TryWriteAsync(TRequest message, WriteOptions options)
    parameters:
    - id: message
      type: '{TRequest}'
      description: The message to write.
    - id: options
      type: Grpc.Core.WriteOptions
      description: The write options to use for this message.
    return:
      type: System.Threading.Tasks.Task
      description: <code>null</code> if the message queue is full or the stream has already been completed.
    content.vb: Public Overridable Function TryWriteAsync(message As TRequest, options As WriteOptions) As Task
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync*
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteAsync(TRequest, WriteOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteAsync(TRequest, Grpc.Core.WriteOptions)
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0,Grpc.Core.WriteOptions)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0,Grpc.Core.WriteOptions)
  id: WriteAsync(`0,Grpc.Core.WriteOptions)
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: WriteAsync(TRequest, WriteOptions)
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.WriteAsync(TRequest, WriteOptions)
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.WriteAsync(TRequest, Grpc.Core.WriteOptions)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: WriteAsync
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 82
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nWrites a message to the stream, if there is enough space in the buffer and <xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteCompleteAsync\" data-throw-if-not-resolved=\"false\"></xref>\nhasn&apos;t already been called.\n"
  example: []
  syntax:
    content: public virtual Task WriteAsync(TRequest message, WriteOptions options)
    parameters:
    - id: message
      type: '{TRequest}'
      description: The message to write.
    - id: options
      type: Grpc.Core.WriteOptions
      description: The write options to use for this message.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> which will complete when the message has been written to the stream.
    content.vb: Public Overridable Function WriteAsync(message As TRequest, options As WriteOptions) As Task
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      There isn&apos;t enough space left in the buffer,

      or <xref href="Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.WriteCompleteAsync" data-throw-if-not-resolved="false"></xref> has already been called.
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).WriteAsync(TRequest, WriteOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).WriteAsync(TRequest, Grpc.Core.WriteOptions)
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteCompleteAsync
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteCompleteAsync
  id: TryWriteCompleteAsync
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: TryWriteCompleteAsync()
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.TryWriteCompleteAsync()
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.TryWriteCompleteAsync()
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: TryWriteCompleteAsync
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 94
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nCompletes the stream when all buffered messages have been sent.\nOnly the first call to this method on any instance will have any effect;\nsubsequent calls will return <code>null</code>.\n"
  example: []
  syntax:
    content: public virtual Task TryWriteCompleteAsync()
    return:
      type: System.Threading.Tasks.Task
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> which will complete when the stream has finished being completed;

        or <code>null</code> if this method has already been called.
    content.vb: Public Overridable Function TryWriteCompleteAsync As Task
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteCompleteAsync*
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteCompleteAsync()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteCompleteAsync()
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync
  id: WriteCompleteAsync
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: WriteCompleteAsync()
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.WriteCompleteAsync()
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.WriteCompleteAsync()
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: WriteCompleteAsync
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 105
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nCompletes the stream when all buffered messages have been sent. This method can only be called\nonce, and further messages cannot be written after it has been called.\n"
  example: []
  syntax:
    content: public virtual Task WriteCompleteAsync()
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> which will complete when the stream has finished being completed.
    content.vb: Public Overridable Function WriteCompleteAsync As Task
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This method has already been called.
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).WriteCompleteAsync()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).WriteCompleteAsync()
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GetResponseStream
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GetResponseStream
  id: GetResponseStream
  parent: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2
  langs:
  - csharp
  - vb
  name: GetResponseStream()
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.GetResponseStream()
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.GetResponseStream()
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GetResponseStream
    path: Google.Api.Gax.Grpc/BidirectionalStreamingBase.cs
    startLine: 123
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nAsync stream to read streaming responses, exposed as an async sequence.\nThe default implementation will use <xref href=\"Google.Api.Gax.Grpc.BidirectionalStreamingBase%602.GrpcCall\" data-throw-if-not-resolved=\"false\"></xref> to extract a response\nstream, and adapt it to <xref href=\"Google.Api.Gax.Grpc.AsyncResponseStream%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIf this method is called more than once, all the returned enumerators will be enumerating over the\nsame underlying response stream, which may cause confusion. Additionally, the sequence returned by\nthis method can only be iterated over a single time. Attempting to iterate more than once will cause\nan <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual AsyncResponseStream<TResponse> GetResponseStream()
    return:
      type: Google.Api.Gax.Grpc.AsyncResponseStream{{TResponse}}
    content.vb: Public Overridable Function GetResponseStream As AsyncResponseStream(Of TResponse)
  overload: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GetResponseStream*
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).GetResponseStream()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).GetResponseStream()
references:
- uid: Google.Api.Gax.Grpc
  commentId: N:Google.Api.Gax.Grpc
  name: Google.Api.Gax.Grpc
  nameWithType: Google.Api.Gax.Grpc
  fullName: Google.Api.Gax.Grpc
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0)
  isExternal: true
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0)
  isExternal: true
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0,Grpc.Core.WriteOptions)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync(`0,Grpc.Core.WriteOptions)
  isExternal: true
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0,Grpc.Core.WriteOptions)
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync(`0,Grpc.Core.WriteOptions)
  isExternal: true
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall*
  commentId: Overload:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall
  name: GrpcCall
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.GrpcCall
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.GrpcCall
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).GrpcCall
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).GrpcCall
- uid: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall{`0,`1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncDuplexStreamingCall`2
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncDuplexStreamingCall`2
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall`2
  isExternal: true
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: true
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync
  commentId: M:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync
  isExternal: true
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync*
  commentId: Overload:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteAsync
  name: TryWriteAsync
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.TryWriteAsync
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.TryWriteAsync
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteAsync
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteAsync
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync*
  commentId: Overload:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteAsync
  name: WriteAsync
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.WriteAsync
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.WriteAsync
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).WriteAsync
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).WriteAsync
- uid: Grpc.Core.WriteOptions
  commentId: T:Grpc.Core.WriteOptions
  parent: Grpc.Core
  isExternal: true
  name: WriteOptions
  nameWithType: WriteOptions
  fullName: Grpc.Core.WriteOptions
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteCompleteAsync*
  commentId: Overload:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.TryWriteCompleteAsync
  name: TryWriteCompleteAsync
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.TryWriteCompleteAsync
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.TryWriteCompleteAsync
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteCompleteAsync
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).TryWriteCompleteAsync
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync*
  commentId: Overload:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.WriteCompleteAsync
  name: WriteCompleteAsync
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.WriteCompleteAsync
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.WriteCompleteAsync
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).WriteCompleteAsync
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).WriteCompleteAsync
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall
  commentId: P:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GrpcCall
  isExternal: true
- uid: Google.Api.Gax.Grpc.AsyncResponseStream`1
  commentId: T:Google.Api.Gax.Grpc.AsyncResponseStream`1
  name: AsyncResponseStream<TResponse>
  nameWithType: AsyncResponseStream<TResponse>
  fullName: Google.Api.Gax.Grpc.AsyncResponseStream<TResponse>
  nameWithType.vb: AsyncResponseStream(Of TResponse)
  fullName.vb: Google.Api.Gax.Grpc.AsyncResponseStream(Of TResponse)
  name.vb: AsyncResponseStream(Of TResponse)
  spec.csharp:
  - uid: Google.Api.Gax.Grpc.AsyncResponseStream`1
    name: AsyncResponseStream
    nameWithType: AsyncResponseStream
    fullName: Google.Api.Gax.Grpc.AsyncResponseStream
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Api.Gax.Grpc.AsyncResponseStream`1
    name: AsyncResponseStream
    nameWithType: AsyncResponseStream
    fullName: Google.Api.Gax.Grpc.AsyncResponseStream
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GetResponseStream*
  commentId: Overload:Google.Api.Gax.Grpc.BidirectionalStreamingBase`2.GetResponseStream
  name: GetResponseStream
  nameWithType: BidirectionalStreamingBase<TRequest, TResponse>.GetResponseStream
  fullName: Google.Api.Gax.Grpc.BidirectionalStreamingBase<TRequest, TResponse>.GetResponseStream
  nameWithType.vb: BidirectionalStreamingBase(Of TRequest, TResponse).GetResponseStream
  fullName.vb: Google.Api.Gax.Grpc.BidirectionalStreamingBase(Of TRequest, TResponse).GetResponseStream
- uid: Google.Api.Gax.Grpc.AsyncResponseStream{{TResponse}}
  commentId: T:Google.Api.Gax.Grpc.AsyncResponseStream{`1}
  parent: Google.Api.Gax.Grpc
  definition: Google.Api.Gax.Grpc.AsyncResponseStream`1
  name: AsyncResponseStream<TResponse>
  nameWithType: AsyncResponseStream<TResponse>
  fullName: Google.Api.Gax.Grpc.AsyncResponseStream<TResponse>
  nameWithType.vb: AsyncResponseStream(Of TResponse)
  fullName.vb: Google.Api.Gax.Grpc.AsyncResponseStream(Of TResponse)
  name.vb: AsyncResponseStream(Of TResponse)
  spec.csharp:
  - uid: Google.Api.Gax.Grpc.AsyncResponseStream`1
    name: AsyncResponseStream
    nameWithType: AsyncResponseStream
    fullName: Google.Api.Gax.Grpc.AsyncResponseStream
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Google.Api.Gax.Grpc.AsyncResponseStream`1
    name: AsyncResponseStream
    nameWithType: AsyncResponseStream
    fullName: Google.Api.Gax.Grpc.AsyncResponseStream
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
