### YamlMime:ManagedReference
items:
- uid: Google.Api.Gax.Grpc.ChannelPool
  commentId: T:Google.Api.Gax.Grpc.ChannelPool
  id: ChannelPool
  parent: Google.Api.Gax.Grpc
  children:
  - Google.Api.Gax.Grpc.ChannelPool.#ctor(System.Collections.Generic.IEnumerable{System.String})
  - Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint)
  - Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  - Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint)
  - Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  - Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync
  langs:
  - csharp
  - vb
  name: ChannelPool
  nameWithType: ChannelPool
  fullName: Google.Api.Gax.Grpc.ChannelPool
  type: Class
  source:
    remote:
      path: Google.Api.Gax.Grpc/ChannelPool.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: ChannelPool
    path: Google.Api.Gax.Grpc/ChannelPool.cs
    startLine: 22
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nA pool of channels for the same service, but with potentially different endpoints. Each endpoint\nhas a single channel. All channels created by this pool use default application credentials.\nThis class is thread-safe.\n"
  example: []
  syntax:
    content: public sealed class ChannelPool
    content.vb: Public NotInheritable Class ChannelPool
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Api.Gax.Grpc.ChannelPool.#ctor(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Google.Api.Gax.Grpc.ChannelPool.#ctor(System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.String})'
  parent: Google.Api.Gax.Grpc.ChannelPool
  langs:
  - csharp
  - vb
  name: ChannelPool(IEnumerable<String>)
  nameWithType: ChannelPool.ChannelPool(IEnumerable<String>)
  fullName: Google.Api.Gax.Grpc.ChannelPool.ChannelPool(System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: Google.Api.Gax.Grpc/ChannelPool.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: .ctor
    path: Google.Api.Gax.Grpc/ChannelPool.cs
    startLine: 51
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nCreates a channel pool which will apply the specified scopes to the default application credentials\nif they require any.\n"
  example: []
  syntax:
    content: public ChannelPool(IEnumerable<string> scopes)
    parameters:
    - id: scopes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The scopes to apply. Must not be null, and must not contain null references. May be empty.
    content.vb: Public Sub New(scopes As IEnumerable(Of String))
  overload: Google.Api.Gax.Grpc.ChannelPool.#ctor*
  nameWithType.vb: ChannelPool.ChannelPool(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Api.Gax.Grpc.ChannelPool.ChannelPool(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: ChannelPool(IEnumerable(Of String))
- uid: Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync
  commentId: M:Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync
  id: ShutdownChannelsAsync
  parent: Google.Api.Gax.Grpc.ChannelPool
  langs:
  - csharp
  - vb
  name: ShutdownChannelsAsync()
  nameWithType: ChannelPool.ShutdownChannelsAsync()
  fullName: Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync()
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/ChannelPool.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: ShutdownChannelsAsync
    path: Google.Api.Gax.Grpc/ChannelPool.cs
    startLine: 76
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nShuts down all the currently-allocated channels asynchronously. This does not prevent the channel\npool from being used later on, but the currently-allocated channels will not be reused.\n"
  example: []
  syntax:
    content: public Task ShutdownChannelsAsync()
    return:
      type: System.Threading.Tasks.Task
      description: A task which will complete when all the (current) channels have been shut down.
    content.vb: Public Function ShutdownChannelsAsync As Task
  overload: Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint)
  commentId: M:Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint)
  id: GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint)
  parent: Google.Api.Gax.Grpc.ChannelPool
  langs:
  - csharp
  - vb
  name: GetChannel(ServiceEndpoint)
  nameWithType: ChannelPool.GetChannel(ServiceEndpoint)
  fullName: Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/ChannelPool.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GetChannel
    path: Google.Api.Gax.Grpc/ChannelPool.cs
    startLine: 94
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nReturns a channel from this pool, creating a new one if there is no channel\nalready associated with <code data-dev-comment-type=\"paramref\" class=\"paramref\">endpoint</code>. Default channel options are applied.\n"
  example: []
  syntax:
    content: public Channel GetChannel(ServiceEndpoint endpoint)
    parameters:
    - id: endpoint
      type: Google.Api.Gax.Grpc.ServiceEndpoint
      description: The endpoint to connect to. Must not be null.
    return:
      type: Grpc.Core.Channel
      description: A channel for the specified endpoint.
    content.vb: Public Function GetChannel(endpoint As ServiceEndpoint) As Channel
  overload: Google.Api.Gax.Grpc.ChannelPool.GetChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint)
  commentId: M:Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint)
  id: GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint)
  parent: Google.Api.Gax.Grpc.ChannelPool
  langs:
  - csharp
  - vb
  name: GetChannelAsync(ServiceEndpoint)
  nameWithType: ChannelPool.GetChannelAsync(ServiceEndpoint)
  fullName: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/ChannelPool.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GetChannelAsync
    path: Google.Api.Gax.Grpc/ChannelPool.cs
    startLine: 103
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nAsynchronously returns a channel from this pool, creating a new one if there is no channel\nalready associated with <code data-dev-comment-type=\"paramref\" class=\"paramref\">endpoint</code>. Default channel options are applied.\n"
  example: []
  syntax:
    content: public Task<Channel> GetChannelAsync(ServiceEndpoint endpoint)
    parameters:
    - id: endpoint
      type: Google.Api.Gax.Grpc.ServiceEndpoint
      description: The endpoint to connect to. Must not be null.
    return:
      type: System.Threading.Tasks.Task{Grpc.Core.Channel}
      description: >-
        A task representing the asynchronous operation. The value of the completed

        task will be channel for the specified endpoint.
    content.vb: Public Function GetChannelAsync(endpoint As ServiceEndpoint) As Task(Of Channel)
  overload: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  commentId: M:Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  id: GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  parent: Google.Api.Gax.Grpc.ChannelPool
  langs:
  - csharp
  - vb
  name: GetChannel(ServiceEndpoint, IEnumerable<ChannelOption>)
  nameWithType: ChannelPool.GetChannel(ServiceEndpoint, IEnumerable<ChannelOption>)
  fullName: Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint, System.Collections.Generic.IEnumerable<Grpc.Core.ChannelOption>)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/ChannelPool.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GetChannel
    path: Google.Api.Gax.Grpc/ChannelPool.cs
    startLine: 113
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nReturns a channel from this pool, creating a new one if there is no channel\nalready associated with <code data-dev-comment-type=\"paramref\" class=\"paramref\">endpoint</code>.\nThe specified channel options are applied, but only those options.\n"
  example: []
  syntax:
    content: public Channel GetChannel(ServiceEndpoint endpoint, IEnumerable<ChannelOption> channelOptions)
    parameters:
    - id: endpoint
      type: Google.Api.Gax.Grpc.ServiceEndpoint
      description: The endpoint to connect to. Must not be null.
    - id: channelOptions
      type: System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption}
      description: The channel options to include. May be null.
    return:
      type: Grpc.Core.Channel
      description: A channel for the specified endpoint.
    content.vb: Public Function GetChannel(endpoint As ServiceEndpoint, channelOptions As IEnumerable(Of ChannelOption)) As Channel
  overload: Google.Api.Gax.Grpc.ChannelPool.GetChannel*
  nameWithType.vb: ChannelPool.GetChannel(ServiceEndpoint, IEnumerable(Of ChannelOption))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Api.Gax.Grpc.ChannelPool.GetChannel(Google.Api.Gax.Grpc.ServiceEndpoint, System.Collections.Generic.IEnumerable(Of Grpc.Core.ChannelOption))
  name.vb: GetChannel(ServiceEndpoint, IEnumerable(Of ChannelOption))
- uid: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  commentId: M:Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  id: GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})
  parent: Google.Api.Gax.Grpc.ChannelPool
  langs:
  - csharp
  - vb
  name: GetChannelAsync(ServiceEndpoint, IEnumerable<ChannelOption>)
  nameWithType: ChannelPool.GetChannelAsync(ServiceEndpoint, IEnumerable<ChannelOption>)
  fullName: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint, System.Collections.Generic.IEnumerable<Grpc.Core.ChannelOption>)
  type: Method
  source:
    remote:
      path: Google.Api.Gax.Grpc/ChannelPool.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GetChannelAsync
    path: Google.Api.Gax.Grpc/ChannelPool.cs
    startLine: 129
  assemblies:
  - Google.Api.Gax.Grpc
  namespace: Google.Api.Gax.Grpc
  summary: "\nAsynchronously returns a channel from this pool, creating a new one if there is no channel\nalready associated with <code data-dev-comment-type=\"paramref\" class=\"paramref\">endpoint</code>.\nThe specified channel options are applied, but only those options.\n"
  example: []
  syntax:
    content: public Task<Channel> GetChannelAsync(ServiceEndpoint endpoint, IEnumerable<ChannelOption> channelOptions)
    parameters:
    - id: endpoint
      type: Google.Api.Gax.Grpc.ServiceEndpoint
      description: The endpoint to connect to. Must not be null.
    - id: channelOptions
      type: System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption}
      description: The channel options to include. May be null.
    return:
      type: System.Threading.Tasks.Task{Grpc.Core.Channel}
      description: >-
        A task representing the asynchronous operation. The value of the completed

        task will be channel for the specified endpoint.
    content.vb: Public Function GetChannelAsync(endpoint As ServiceEndpoint, channelOptions As IEnumerable(Of ChannelOption)) As Task(Of Channel)
  overload: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync*
  nameWithType.vb: ChannelPool.GetChannelAsync(ServiceEndpoint, IEnumerable(Of ChannelOption))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync(Google.Api.Gax.Grpc.ServiceEndpoint, System.Collections.Generic.IEnumerable(Of Grpc.Core.ChannelOption))
  name.vb: GetChannelAsync(ServiceEndpoint, IEnumerable(Of ChannelOption))
references:
- uid: Google.Api.Gax.Grpc
  commentId: N:Google.Api.Gax.Grpc
  name: Google.Api.Gax.Grpc
  nameWithType: Google.Api.Gax.Grpc
  fullName: Google.Api.Gax.Grpc
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Api.Gax.Grpc.ChannelPool.#ctor*
  commentId: Overload:Google.Api.Gax.Grpc.ChannelPool.#ctor
  name: ChannelPool
  nameWithType: ChannelPool.ChannelPool
  fullName: Google.Api.Gax.Grpc.ChannelPool.ChannelPool
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync*
  commentId: Overload:Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync
  name: ShutdownChannelsAsync
  nameWithType: ChannelPool.ShutdownChannelsAsync
  fullName: Google.Api.Gax.Grpc.ChannelPool.ShutdownChannelsAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Google.Api.Gax.Grpc.ChannelPool.GetChannel*
  commentId: Overload:Google.Api.Gax.Grpc.ChannelPool.GetChannel
  name: GetChannel
  nameWithType: ChannelPool.GetChannel
  fullName: Google.Api.Gax.Grpc.ChannelPool.GetChannel
- uid: Google.Api.Gax.Grpc.ServiceEndpoint
  commentId: T:Google.Api.Gax.Grpc.ServiceEndpoint
  parent: Google.Api.Gax.Grpc
  name: ServiceEndpoint
  nameWithType: ServiceEndpoint
  fullName: Google.Api.Gax.Grpc.ServiceEndpoint
- uid: Grpc.Core.Channel
  commentId: T:Grpc.Core.Channel
  parent: Grpc.Core
  isExternal: true
  name: Channel
  nameWithType: Channel
  fullName: Grpc.Core.Channel
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: true
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync*
  commentId: Overload:Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync
  name: GetChannelAsync
  nameWithType: ChannelPool.GetChannelAsync
  fullName: Google.Api.Gax.Grpc.ChannelPool.GetChannelAsync
- uid: System.Threading.Tasks.Task{Grpc.Core.Channel}
  commentId: T:System.Threading.Tasks.Task{Grpc.Core.Channel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Channel>
  nameWithType: Task<Channel>
  fullName: System.Threading.Tasks.Task<Grpc.Core.Channel>
  nameWithType.vb: Task(Of Channel)
  fullName.vb: System.Threading.Tasks.Task(Of Grpc.Core.Channel)
  name.vb: Task(Of Channel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.Channel
    name: Channel
    nameWithType: Channel
    fullName: Grpc.Core.Channel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.Channel
    name: Channel
    nameWithType: Channel
    fullName: Grpc.Core.Channel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption}
  commentId: T:System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ChannelOption>
  nameWithType: IEnumerable<ChannelOption>
  fullName: System.Collections.Generic.IEnumerable<Grpc.Core.ChannelOption>
  nameWithType.vb: IEnumerable(Of ChannelOption)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Grpc.Core.ChannelOption)
  name.vb: IEnumerable(Of ChannelOption)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.ChannelOption
    name: ChannelOption
    nameWithType: ChannelOption
    fullName: Grpc.Core.ChannelOption
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.ChannelOption
    name: ChannelOption
    nameWithType: ChannelOption
    fullName: Grpc.Core.ChannelOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
