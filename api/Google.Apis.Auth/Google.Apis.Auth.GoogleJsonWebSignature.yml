### YamlMime:ManagedReference
items:
- uid: Google.Apis.Auth.GoogleJsonWebSignature
  commentId: T:Google.Apis.Auth.GoogleJsonWebSignature
  id: GoogleJsonWebSignature
  parent: Google.Apis.Auth
  children:
  - Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String,Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings)
  - Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String,Google.Apis.Util.IClock,System.Boolean)
  langs:
  - csharp
  - vb
  name: GoogleJsonWebSignature
  nameWithType: GoogleJsonWebSignature
  fullName: Google.Apis.Auth.GoogleJsonWebSignature
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/GoogleJsonWebSignature.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GoogleJsonWebSignature
    path: Src/Support/Google.Apis.Auth/GoogleJsonWebSignature.cs
    startLine: 34
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth
  summary: "\nGoogle JSON Web Signature as specified in https://developers.google.com/accounts/docs/OAuth2ServiceAccount.\n"
  example: []
  syntax:
    content: public class GoogleJsonWebSignature
    content.vb: Public Class GoogleJsonWebSignature
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String,Google.Apis.Util.IClock,System.Boolean)
  commentId: M:Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String,Google.Apis.Util.IClock,System.Boolean)
  id: ValidateAsync(System.String,Google.Apis.Util.IClock,System.Boolean)
  parent: Google.Apis.Auth.GoogleJsonWebSignature
  langs:
  - csharp
  - vb
  name: ValidateAsync(String, IClock, Boolean)
  nameWithType: GoogleJsonWebSignature.ValidateAsync(String, IClock, Boolean)
  fullName: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String, Google.Apis.Util.IClock, System.Boolean)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/GoogleJsonWebSignature.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ValidateAsync
    path: Src/Support/Google.Apis.Auth/GoogleJsonWebSignature.cs
    startLine: 69
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth
  summary: "\nValidates a Google-issued Json Web Token (JWT).\nWill throw a <xref href=\"Google.Apis.Auth.InvalidJwtException\" data-throw-if-not-resolved=\"false\"></xref> if the passed value is not valid JWT signed by Google.\n"
  remarks: "\n<p>Follows the procedure to\n<a href=\"https://developers.google.com/identity/protocols/OpenIDConnect#validatinganidtoken\">validate a JWT ID token</a>.\n</p>\n<p>Google certificates are cached, and refreshed once per hour. This can be overridden by setting\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">forceGoogleCertRefresh</code> to true.</p>\n"
  example: []
  syntax:
    content: public static Task<GoogleJsonWebSignature.Payload> ValidateAsync(string jwt, IClock clock = null, bool forceGoogleCertRefresh = false)
    parameters:
    - id: jwt
      type: System.String
      description: The JWT to validate.
    - id: clock
      type: Google.Apis.Util.IClock
      description: Optional. The <xref href="Google.Apis.Util.IClock" data-throw-if-not-resolved="false"></xref> to use for JWT expiration verification. Defaults to the system clock.
    - id: forceGoogleCertRefresh
      type: System.Boolean
      description: Optional. If true forces new certificates to be downloaded from Google. Defaults to false.
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Auth.GoogleJsonWebSignature.Payload}
      description: The JWT payload, if the JWT is valid. Throws an <xref href="Google.Apis.Auth.InvalidJwtException" data-throw-if-not-resolved="false"></xref> otherwise.
    content.vb: Public Shared Function ValidateAsync(jwt As String, clock As IClock = Nothing, forceGoogleCertRefresh As Boolean = False) As Task(Of GoogleJsonWebSignature.Payload)
  overload: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync*
  exceptions:
  - type: Google.Apis.Auth.InvalidJwtException
    commentId: T:Google.Apis.Auth.InvalidJwtException
    description: Thrown when passed a JWT that is not a valid JWT signed by Google.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String,Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings)
  commentId: M:Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String,Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings)
  id: ValidateAsync(System.String,Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings)
  parent: Google.Apis.Auth.GoogleJsonWebSignature
  langs:
  - csharp
  - vb
  name: ValidateAsync(String, GoogleJsonWebSignature.ValidationSettings)
  nameWithType: GoogleJsonWebSignature.ValidateAsync(String, GoogleJsonWebSignature.ValidationSettings)
  fullName: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync(System.String, Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/GoogleJsonWebSignature.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ValidateAsync
    path: Src/Support/Google.Apis.Auth/GoogleJsonWebSignature.cs
    startLine: 154
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth
  summary: "\nValidates a Google-issued Json Web Token (JWT).\nWill throw a <xref href=\"Google.Apis.Auth.InvalidJwtException\" data-throw-if-not-resolved=\"false\"></xref> if the specified JWT fails any validation check.\n"
  remarks: "\n<p>Follows the procedure to\n<a href=\"https://developers.google.com/identity/protocols/OpenIDConnect#validatinganidtoken\">validate a JWT ID token</a>.\n</p>\n<p>\nIssued-at validation and expiry validation is performed using the clock on this local client,\nso local clock inaccuracies can lead to incorrect validation results.\nUse <xref href=\"Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.IssuedAtClockTolerance\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.ExpirationTimeClockTolerance\" data-throw-if-not-resolved=\"false\"></xref>\nto allow for local clock inaccuracy\n<code>IssuedAtClockTolerance</code> defaults to 30 seconds; it is very unlikely a JWT will be issued that isn&apos;t already valid.\n<code>ExpirationTimeClockTolerance</code> defaults to zero seconds; in some use-cases it may be useful to set this to a negative\nvalue to help ensure that passing local validation means it will pass server validation.\nRegardless of whether local validation passed, code must always correctly handle an invalid JWT error\nfrom the server.\n</p>\n<p>Google certificates are cached, and refreshed once per hour. This can be overridden by setting\n<xref href=\"Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.ForceGoogleCertRefresh\" data-throw-if-not-resolved=\"false\"></xref> to true.</p>\n"
  example: []
  syntax:
    content: public static Task<GoogleJsonWebSignature.Payload> ValidateAsync(string jwt, GoogleJsonWebSignature.ValidationSettings validationSettings)
    parameters:
    - id: jwt
      type: System.String
      description: The JWT to validate.
    - id: validationSettings
      type: Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings
      description: Specifies how to carry out the validation.
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Auth.GoogleJsonWebSignature.Payload}
      description: ''
    content.vb: Public Shared Function ValidateAsync(jwt As String, validationSettings As GoogleJsonWebSignature.ValidationSettings) As Task(Of GoogleJsonWebSignature.Payload)
  overload: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Google.Apis.Auth
  commentId: N:Google.Apis.Auth
  name: Google.Apis.Auth
  nameWithType: Google.Apis.Auth
  fullName: Google.Apis.Auth
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Apis.Auth.InvalidJwtException
  commentId: T:Google.Apis.Auth.InvalidJwtException
  name: InvalidJwtException
  nameWithType: InvalidJwtException
  fullName: Google.Apis.Auth.InvalidJwtException
- uid: Google.Apis.Util.IClock
  commentId: T:Google.Apis.Util.IClock
  parent: Google.Apis.Util
  name: IClock
  nameWithType: IClock
  fullName: Google.Apis.Util.IClock
- uid: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync*
  commentId: Overload:Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync
  name: ValidateAsync
  nameWithType: GoogleJsonWebSignature.ValidateAsync
  fullName: Google.Apis.Auth.GoogleJsonWebSignature.ValidateAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Google.Apis.Auth.GoogleJsonWebSignature.Payload}
  commentId: T:System.Threading.Tasks.Task{Google.Apis.Auth.GoogleJsonWebSignature.Payload}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GoogleJsonWebSignature.Payload>
  nameWithType: Task<GoogleJsonWebSignature.Payload>
  fullName: System.Threading.Tasks.Task<Google.Apis.Auth.GoogleJsonWebSignature.Payload>
  nameWithType.vb: Task(Of GoogleJsonWebSignature.Payload)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Apis.Auth.GoogleJsonWebSignature.Payload)
  name.vb: Task(Of GoogleJsonWebSignature.Payload)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Auth.GoogleJsonWebSignature.Payload
    name: GoogleJsonWebSignature.Payload
    nameWithType: GoogleJsonWebSignature.Payload
    fullName: Google.Apis.Auth.GoogleJsonWebSignature.Payload
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Auth.GoogleJsonWebSignature.Payload
    name: GoogleJsonWebSignature.Payload
    nameWithType: GoogleJsonWebSignature.Payload
    fullName: Google.Apis.Auth.GoogleJsonWebSignature.Payload
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Util
  commentId: N:Google.Apis.Util
  name: Google.Apis.Util
  nameWithType: Google.Apis.Util
  fullName: Google.Apis.Util
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.IssuedAtClockTolerance
  commentId: P:Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.IssuedAtClockTolerance
  isExternal: true
- uid: Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.ExpirationTimeClockTolerance
  commentId: P:Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.ExpirationTimeClockTolerance
  isExternal: true
- uid: Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.ForceGoogleCertRefresh
  commentId: P:Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings.ForceGoogleCertRefresh
  isExternal: true
- uid: Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings
  commentId: T:Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings
  parent: Google.Apis.Auth
  name: GoogleJsonWebSignature.ValidationSettings
  nameWithType: GoogleJsonWebSignature.ValidationSettings
  fullName: Google.Apis.Auth.GoogleJsonWebSignature.ValidationSettings
