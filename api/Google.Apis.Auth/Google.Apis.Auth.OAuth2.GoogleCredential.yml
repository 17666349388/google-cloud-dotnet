### YamlMime:ManagedReference
items:
- uid: Google.Apis.Auth.OAuth2.GoogleCredential
  commentId: T:Google.Apis.Auth.OAuth2.GoogleCredential
  id: GoogleCredential
  parent: Google.Apis.Auth.OAuth2
  children:
  - Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.Collections.Generic.IEnumerable{System.String})
  - Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.String[])
  - Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser(System.String)
  - Google.Apis.Auth.OAuth2.GoogleCredential.credential
  - Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken(System.String,Google.Apis.Auth.OAuth2.IAccessMethod)
  - Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential(Google.Apis.Auth.OAuth2.ComputeCredential)
  - Google.Apis.Auth.OAuth2.GoogleCredential.FromFile(System.String)
  - Google.Apis.Auth.OAuth2.GoogleCredential.FromJson(System.String)
  - Google.Apis.Auth.OAuth2.GoogleCredential.FromStream(System.IO.Stream)
  - Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault
  - Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync
  - Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Auth#OAuth2#ITokenAccess#GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  - Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Http#IConfigurableHttpClientInitializer#Initialize(Google.Apis.Http.ConfigurableHttpClient)
  - Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired
  - Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential
  langs:
  - csharp
  - vb
  name: GoogleCredential
  nameWithType: GoogleCredential
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential
  type: Class
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GoogleCredential
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 35
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nCredential for authorizing calls using OAuth 2.0.\nIt is a convenience wrapper that allows handling of different types of \ncredentials (like <xref href=\"Google.Apis.Auth.OAuth2.ServiceAccountCredential\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Google.Apis.Auth.OAuth2.ComputeCredential\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Google.Apis.Auth.OAuth2.UserCredential\" data-throw-if-not-resolved=\"false\"></xref>) in a unified way.\n<p>\nSee <xref href=\"Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync\" data-throw-if-not-resolved=\"false\"></xref> for the credential retrieval logic.\n</p>\n"
  example: []
  syntax:
    content: 'public class GoogleCredential : ICredential, IConfigurableHttpClientInitializer, ITokenAccess'
    content.vb: >-
      Public Class GoogleCredential
          Implements ICredential, IConfigurableHttpClientInitializer, ITokenAccess
  inheritance:
  - System.Object
  implements:
  - Google.Apis.Auth.OAuth2.ICredential
  - Google.Apis.Http.IConfigurableHttpClientInitializer
  - Google.Apis.Auth.OAuth2.ITokenAccess
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.credential
  commentId: F:Google.Apis.Auth.OAuth2.GoogleCredential.credential
  id: credential
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: credential
  nameWithType: GoogleCredential.credential
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.credential
  type: Field
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: credential
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 41
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: The underlying credential being wrapped by this object.
  example: []
  syntax:
    content: protected readonly ICredential credential
    return:
      type: Google.Apis.Auth.OAuth2.ICredential
    content.vb: Protected ReadOnly credential As ICredential
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync
  id: GetApplicationDefaultAsync
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: GetApplicationDefaultAsync()
  nameWithType: GoogleCredential.GetApplicationDefaultAsync()
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GetApplicationDefaultAsync
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 82
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\n<p>Returns the Application Default Credentials which are ambient credentials that identify and authorize\nthe whole application.</p>\n<p>The ambient credentials are determined as following order:</p>\n<ol><li>\nThe environment variable GOOGLE_APPLICATION_CREDENTIALS is checked. If this variable is specified, it\nshould point to a file that defines the credentials. The simplest way to get a credential for this purpose\nis to create a service account using the\n<a href=\"https://console.developers.google.com\">Google Developers Console</a> in the section APIs &amp;\nAuth, in the sub-section Credentials. Create a service account or choose an existing one and select\nGenerate new JSON key. Set the environment variable to the path of the JSON file downloaded.\n</li><li>\nIf you have installed the Google Cloud SDK on your machine and have run the command\n<a href=\"https://cloud.google.com/sdk/gcloud/reference/auth/login\">GCloud Auth Login</a>, your identity can\nbe used as a proxy to test code calling APIs from that machine.\n</li><li>\nIf you are running in Google Compute Engine production, the built-in service account associated with the\nvirtual machine instance will be used.\n</li><li>\nIf all previous steps have failed, <code>InvalidOperationException</code> is thrown.\n</li></ol>\n"
  example: []
  syntax:
    content: public static Task<GoogleCredential> GetApplicationDefaultAsync()
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Auth.OAuth2.GoogleCredential}
      description: A task which completes with the application default credentials.
    content.vb: Public Shared Function GetApplicationDefaultAsync As Task(Of GoogleCredential)
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault
  id: GetApplicationDefault
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: GetApplicationDefault()
  nameWithType: GoogleCredential.GetApplicationDefault()
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault()
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GetApplicationDefault
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 91
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\n<p>Synchronously returns the Application Default Credentials which are ambient credentials that identify and authorize\nthe whole application. See <xref href=\"Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync\" data-throw-if-not-resolved=\"false\"></xref> for details on application default credentials.</p>\n<p>This method will block until the credentials are available (or an exception is thrown).\nIt is highly preferable to call <xref href=\"Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync\" data-throw-if-not-resolved=\"false\"></xref> where possible.</p>\n"
  example: []
  syntax:
    content: public static GoogleCredential GetApplicationDefault()
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: The application default credentials.
    content.vb: Public Shared Function GetApplicationDefault As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromStream(System.IO.Stream)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.FromStream(System.IO.Stream)
  id: FromStream(System.IO.Stream)
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: FromStream(Stream)
  nameWithType: GoogleCredential.FromStream(Stream)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromStream(System.IO.Stream)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: FromStream
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 100
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nLoads credential from stream containing JSON credential data.\n<p>\nThe stream can contain a Service Account key file in JSON format from the Google Developers\nConsole or a stored user credential using the format supported by the Cloud SDK.\n</p>\n"
  example: []
  syntax:
    content: public static GoogleCredential FromStream(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
    content.vb: Public Shared Function FromStream(stream As Stream) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.FromStream*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromFile(System.String)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.FromFile(System.String)
  id: FromFile(System.String)
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: FromFile(String)
  nameWithType: GoogleCredential.FromFile(String)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromFile(System.String)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: FromFile
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 111
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nLoads credential from the specified file containing JSON credential data.\n<p>\nThe file can contain a Service Account key file in JSON format from the Google Developers\nConsole or a stored user credential using the format supported by the Cloud SDK.\n</p>\n"
  example: []
  syntax:
    content: public static GoogleCredential FromFile(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to the credential file.
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: The loaded credentials.
    content.vb: Public Shared Function FromFile(path As String) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.FromFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromJson(System.String)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.FromJson(System.String)
  id: FromJson(System.String)
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: FromJson(String)
  nameWithType: GoogleCredential.FromJson(String)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromJson(System.String)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: FromJson
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 126
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nLoads credential from a string containing JSON credential data.\n<p>\nThe string can contain a Service Account key file in JSON format from the Google Developers\nConsole or a stored user credential using the format supported by the Cloud SDK.\n</p>\n"
  example: []
  syntax:
    content: public static GoogleCredential FromJson(string json)
    parameters:
    - id: json
      type: System.String
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
    content.vb: Public Shared Function FromJson(json As String) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.FromJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken(System.String,Google.Apis.Auth.OAuth2.IAccessMethod)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken(System.String,Google.Apis.Auth.OAuth2.IAccessMethod)
  id: FromAccessToken(System.String,Google.Apis.Auth.OAuth2.IAccessMethod)
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: FromAccessToken(String, IAccessMethod)
  nameWithType: GoogleCredential.FromAccessToken(String, IAccessMethod)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken(System.String, Google.Apis.Auth.OAuth2.IAccessMethod)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: FromAccessToken
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 136
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nCreate a <xref href=\"Google.Apis.Auth.OAuth2.GoogleCredential\" data-throw-if-not-resolved=\"false\"></xref> directly from the provided access token.\nThe access token will not be automatically refreshed.\n"
  example: []
  syntax:
    content: public static GoogleCredential FromAccessToken(string accessToken, IAccessMethod accessMethod = null)
    parameters:
    - id: accessToken
      type: System.String
      description: The access token to use within this credential.
    - id: accessMethod
      type: Google.Apis.Auth.OAuth2.IAccessMethod
      description: >-
        Optional. The <xref href="Google.Apis.Auth.OAuth2.IAccessMethod" data-throw-if-not-resolved="false"></xref> to use within this credential.

        If <code>null</code>, will default to <xref href="Google.Apis.Auth.OAuth2.BearerToken.AuthorizationHeaderAccessMethod" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: A credential based on the provided access token.
    content.vb: Public Shared Function FromAccessToken(accessToken As String, accessMethod As IAccessMethod = Nothing) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential(Google.Apis.Auth.OAuth2.ComputeCredential)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential(Google.Apis.Auth.OAuth2.ComputeCredential)
  id: FromComputeCredential(Google.Apis.Auth.OAuth2.ComputeCredential)
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: FromComputeCredential(ComputeCredential)
  nameWithType: GoogleCredential.FromComputeCredential(ComputeCredential)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential(Google.Apis.Auth.OAuth2.ComputeCredential)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: FromComputeCredential
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 176
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nCreate a <xref href=\"Google.Apis.Auth.OAuth2.GoogleCredential\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"Google.Apis.Auth.OAuth2.ComputeCredential\" data-throw-if-not-resolved=\"false\"></xref>.\nIn general, do not use this method. Call <xref href=\"Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync\" data-throw-if-not-resolved=\"false\"></xref>, which will provide the most suitable\ncredentials for the current platform.\n"
  example: []
  syntax:
    content: public static GoogleCredential FromComputeCredential(ComputeCredential computeCredential = null)
    parameters:
    - id: computeCredential
      type: Google.Apis.Auth.OAuth2.ComputeCredential
      description: >-
        Optional. The compute credential to use in the returned <xref href="Google.Apis.Auth.OAuth2.GoogleCredential" data-throw-if-not-resolved="false"></xref>.

        If <code>null</code>, then a new <xref href="Google.Apis.Auth.OAuth2.ComputeCredential" data-throw-if-not-resolved="false"></xref> will be instantiated, using the default

        <xref href="Google.Apis.Auth.OAuth2.ComputeCredential.Initializer" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: A <xref href="Google.Apis.Auth.OAuth2.GoogleCredential" data-throw-if-not-resolved="false"></xref> with an underlying <xref href="Google.Apis.Auth.OAuth2.ComputeCredential" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function FromComputeCredential(computeCredential As ComputeCredential = Nothing) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired
  commentId: P:Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired
  id: IsCreateScopedRequired
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: IsCreateScopedRequired
  nameWithType: GoogleCredential.IsCreateScopedRequired
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: IsCreateScopedRequired
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 206
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\n<p>Returns <code>true</code> only if this credential type has no scopes by default and requires\na call to <see cref=\"o:CreateScoped\"></see> before use.</p>\n\n<p>Credentials need to have scopes in them before they can be used to access Google services.\nSome Credential types have scopes built-in, and some don&apos;t. This property indicates whether\nthe Credential type has scopes built-in.</p>\n\n<ol><li>\n<xref href=\"Google.Apis.Auth.OAuth2.ComputeCredential\" data-throw-if-not-resolved=\"false\"></xref> has scopes built-in. Nothing additional is required.\n</li><li>\n<xref href=\"Google.Apis.Auth.OAuth2.UserCredential\" data-throw-if-not-resolved=\"false\"></xref> has scopes built-in, as they were obtained during the consent\nscreen. Nothing additional is required.</li><li>\n<xref href=\"Google.Apis.Auth.OAuth2.ServiceAccountCredential\" data-throw-if-not-resolved=\"false\"></xref> does not have scopes built-in by default. Caller should\ninvoke <see cref=\"o:CreateScoped\"></see> to add scopes to the credential.\n</li></ol>\n"
  example: []
  syntax:
    content: public virtual bool IsCreateScopedRequired { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsCreateScopedRequired As Boolean
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.Collections.Generic.IEnumerable{System.String})
  id: CreateScoped(System.Collections.Generic.IEnumerable{System.String})
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: CreateScoped(IEnumerable<String>)
  nameWithType: GoogleCredential.CreateScoped(IEnumerable<String>)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: CreateScoped
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 212
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nIf the credential supports scopes, creates a copy with the specified scopes. Otherwise, it returns the same\ninstance.\n"
  example: []
  syntax:
    content: public virtual GoogleCredential CreateScoped(IEnumerable<string> scopes)
    parameters:
    - id: scopes
      type: System.Collections.Generic.IEnumerable{System.String}
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
    content.vb: Public Overridable Function CreateScoped(scopes As IEnumerable(Of String)) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped*
  nameWithType.vb: GoogleCredential.CreateScoped(IEnumerable(Of String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateScoped(IEnumerable(Of String))
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser(System.String)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser(System.String)
  id: CreateWithUser(System.String)
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: CreateWithUser(String)
  nameWithType: GoogleCredential.CreateWithUser(String)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser(System.String)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: CreateWithUser
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 222
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nIf the credential supports setting the user, creates a copy with the specified user.\nOtherwise, it throws <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.\nOnly Service Credentials support this operation.\n"
  example: []
  syntax:
    content: public virtual GoogleCredential CreateWithUser(string user)
    parameters:
    - id: user
      type: System.String
      description: The user to set in the returned credential.
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: This credential with the user set to <code data-dev-comment-type="paramref" class="paramref">user</code>.
    content.vb: Public Overridable Function CreateWithUser(user As String) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: When the credential type doesn&apos;t support setting the user.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.String[])
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.String[])
  id: CreateScoped(System.String[])
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: CreateScoped(String[])
  nameWithType: GoogleCredential.CreateScoped(String[])
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.String[])
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: CreateScoped
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 228
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nIf the credential supports scopes, creates a copy with the specified scopes. Otherwise, it returns the same\ninstance.\n"
  example: []
  syntax:
    content: public GoogleCredential CreateScoped(params string[] scopes)
    parameters:
    - id: scopes
      type: System.String[]
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
    content.vb: Public Function CreateScoped(ParamArray scopes As String()) As GoogleCredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped*
  nameWithType.vb: GoogleCredential.CreateScoped(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped(System.String())
  name.vb: CreateScoped(String())
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Http#IConfigurableHttpClientInitializer#Initialize(Google.Apis.Http.ConfigurableHttpClient)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Http#IConfigurableHttpClientInitializer#Initialize(Google.Apis.Http.ConfigurableHttpClient)
  id: Google#Apis#Http#IConfigurableHttpClientInitializer#Initialize(Google.Apis.Http.ConfigurableHttpClient)
  isEii: true
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: IConfigurableHttpClientInitializer.Initialize(ConfigurableHttpClient)
  nameWithType: GoogleCredential.IConfigurableHttpClientInitializer.Initialize(ConfigurableHttpClient)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(Google.Apis.Http.ConfigurableHttpClient)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 230
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  syntax:
    content: void IConfigurableHttpClientInitializer.Initialize(ConfigurableHttpClient httpClient)
    parameters:
    - id: httpClient
      type: Google.Apis.Http.ConfigurableHttpClient
    content.vb: Sub Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(httpClient As ConfigurableHttpClient) Implements IConfigurableHttpClientInitializer.Initialize
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Http#IConfigurableHttpClientInitializer#Initialize*
  implements:
  - Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(Google.Apis.Http.ConfigurableHttpClient)
  nameWithType.vb: GoogleCredential.Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(ConfigurableHttpClient)
  name.vb: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(ConfigurableHttpClient)
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Auth#OAuth2#ITokenAccess#GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Auth#OAuth2#ITokenAccess#GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  id: Google#Apis#Auth#OAuth2#ITokenAccess#GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  isEii: true
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: ITokenAccess.GetAccessTokenForRequestAsync(String, CancellationToken)
  nameWithType: GoogleCredential.ITokenAccess.GetAccessTokenForRequestAsync(String, CancellationToken)
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 235
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  syntax:
    content: Task<string> ITokenAccess.GetAccessTokenForRequestAsync(string authUri, CancellationToken cancellationToken)
    parameters:
    - id: authUri
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(authUri As String, cancellationToken As CancellationToken) As Task(Of String) Implements ITokenAccess.GetAccessTokenForRequestAsync
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Auth#OAuth2#ITokenAccess#GetAccessTokenForRequestAsync*
  implements:
  - Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: GoogleCredential.Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(String, CancellationToken)
  name.vb: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(String, CancellationToken)
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential
  commentId: P:Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential
  id: UnderlyingCredential
  parent: Google.Apis.Auth.OAuth2.GoogleCredential
  langs:
  - csharp
  - vb
  name: UnderlyingCredential
  nameWithType: GoogleCredential.UnderlyingCredential
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential
  type: Property
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: UnderlyingCredential
    path: Src/Support/Google.Apis.Auth/OAuth2/GoogleCredential.cs
    startLine: 243
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nGets the underlying credential instance being wrapped.\n"
  example: []
  syntax:
    content: public ICredential UnderlyingCredential { get; }
    parameters: []
    return:
      type: Google.Apis.Auth.OAuth2.ICredential
    content.vb: Public ReadOnly Property UnderlyingCredential As ICredential
  overload: Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Google.Apis.Auth.OAuth2.ServiceAccountCredential
  commentId: T:Google.Apis.Auth.OAuth2.ServiceAccountCredential
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: ServiceAccountCredential
  nameWithType: ServiceAccountCredential
  fullName: Google.Apis.Auth.OAuth2.ServiceAccountCredential
- uid: Google.Apis.Auth.OAuth2.ComputeCredential
  commentId: T:Google.Apis.Auth.OAuth2.ComputeCredential
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: ComputeCredential
  nameWithType: ComputeCredential
  fullName: Google.Apis.Auth.OAuth2.ComputeCredential
- uid: Google.Apis.Auth.OAuth2.UserCredential
  commentId: T:Google.Apis.Auth.OAuth2.UserCredential
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: UserCredential
  nameWithType: UserCredential
  fullName: Google.Apis.Auth.OAuth2.UserCredential
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync
- uid: Google.Apis.Auth.OAuth2
  commentId: N:Google.Apis.Auth.OAuth2
  isExternal: false
  name: Google.Apis.Auth.OAuth2
  nameWithType: Google.Apis.Auth.OAuth2
  fullName: Google.Apis.Auth.OAuth2
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Google.Apis.Auth.OAuth2.ICredential
  commentId: T:Google.Apis.Auth.OAuth2.ICredential
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: ICredential
  nameWithType: ICredential
  fullName: Google.Apis.Auth.OAuth2.ICredential
- uid: Google.Apis.Http.IConfigurableHttpClientInitializer
  commentId: T:Google.Apis.Http.IConfigurableHttpClientInitializer
  parent: Google.Apis.Http
  isExternal: false
  name: IConfigurableHttpClientInitializer
  nameWithType: IConfigurableHttpClientInitializer
  fullName: Google.Apis.Http.IConfigurableHttpClientInitializer
- uid: Google.Apis.Auth.OAuth2.ITokenAccess
  commentId: T:Google.Apis.Auth.OAuth2.ITokenAccess
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: ITokenAccess
  nameWithType: ITokenAccess
  fullName: Google.Apis.Auth.OAuth2.ITokenAccess
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Apis.Http
  commentId: N:Google.Apis.Http
  isExternal: false
  name: Google.Apis.Http
  nameWithType: Google.Apis.Http
  fullName: Google.Apis.Http
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync
  isExternal: false
  name: GetApplicationDefaultAsync
  nameWithType: GoogleCredential.GetApplicationDefaultAsync
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefaultAsync
- uid: System.Threading.Tasks.Task{Google.Apis.Auth.OAuth2.GoogleCredential}
  commentId: T:System.Threading.Tasks.Task{Google.Apis.Auth.OAuth2.GoogleCredential}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GoogleCredential>
  nameWithType: Task<GoogleCredential>
  fullName: System.Threading.Tasks.Task<Google.Apis.Auth.OAuth2.GoogleCredential>
  nameWithType.vb: Task(Of GoogleCredential)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Apis.Auth.OAuth2.GoogleCredential)
  name.vb: Task(Of GoogleCredential)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Auth.OAuth2.GoogleCredential
    name: GoogleCredential
    nameWithType: GoogleCredential
    fullName: Google.Apis.Auth.OAuth2.GoogleCredential
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Auth.OAuth2.GoogleCredential
    name: GoogleCredential
    nameWithType: GoogleCredential
    fullName: Google.Apis.Auth.OAuth2.GoogleCredential
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault
  isExternal: false
  name: GetApplicationDefault
  nameWithType: GoogleCredential.GetApplicationDefault
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault
- uid: Google.Apis.Auth.OAuth2.GoogleCredential
  commentId: T:Google.Apis.Auth.OAuth2.GoogleCredential
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: GoogleCredential
  nameWithType: GoogleCredential
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromStream*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.FromStream
  isExternal: false
  name: FromStream
  nameWithType: GoogleCredential.FromStream
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromStream
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromFile*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.FromFile
  isExternal: false
  name: FromFile
  nameWithType: GoogleCredential.FromFile
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromFile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromJson*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.FromJson
  isExternal: false
  name: FromJson
  nameWithType: GoogleCredential.FromJson
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromJson
- uid: Google.Apis.Auth.OAuth2.IAccessMethod
  commentId: T:Google.Apis.Auth.OAuth2.IAccessMethod
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: IAccessMethod
  nameWithType: IAccessMethod
  fullName: Google.Apis.Auth.OAuth2.IAccessMethod
- uid: Google.Apis.Auth.OAuth2.BearerToken.AuthorizationHeaderAccessMethod
  commentId: T:Google.Apis.Auth.OAuth2.BearerToken.AuthorizationHeaderAccessMethod
  isExternal: false
  name: BearerToken.AuthorizationHeaderAccessMethod
  nameWithType: BearerToken.AuthorizationHeaderAccessMethod
  fullName: Google.Apis.Auth.OAuth2.BearerToken.AuthorizationHeaderAccessMethod
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken
  isExternal: false
  name: FromAccessToken
  nameWithType: GoogleCredential.FromAccessToken
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromAccessToken
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault
  commentId: M:Google.Apis.Auth.OAuth2.GoogleCredential.GetApplicationDefault
- uid: Google.Apis.Auth.OAuth2.ComputeCredential.Initializer
  commentId: T:Google.Apis.Auth.OAuth2.ComputeCredential.Initializer
  parent: Google.Apis.Auth.OAuth2
  isExternal: false
  name: ComputeCredential.Initializer
  nameWithType: ComputeCredential.Initializer
  fullName: Google.Apis.Auth.OAuth2.ComputeCredential.Initializer
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential
  isExternal: false
  name: FromComputeCredential
  nameWithType: GoogleCredential.FromComputeCredential
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.FromComputeCredential
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired
  isExternal: false
  name: IsCreateScopedRequired
  nameWithType: GoogleCredential.IsCreateScopedRequired
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.IsCreateScopedRequired
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped
  isExternal: false
  name: CreateScoped
  nameWithType: GoogleCredential.CreateScoped
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.CreateScoped
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser
  isExternal: false
  name: CreateWithUser
  nameWithType: GoogleCredential.CreateWithUser
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.CreateWithUser
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Http#IConfigurableHttpClientInitializer#Initialize*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Http#IConfigurableHttpClientInitializer#Initialize
  isExternal: false
  name: IConfigurableHttpClientInitializer.Initialize
  nameWithType: GoogleCredential.IConfigurableHttpClientInitializer.Initialize
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize
  nameWithType.vb: GoogleCredential.Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize
  name.vb: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize
- uid: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(Google.Apis.Http.ConfigurableHttpClient)
  commentId: M:Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(Google.Apis.Http.ConfigurableHttpClient)
  parent: Google.Apis.Http.IConfigurableHttpClientInitializer
  isExternal: false
  name: Initialize(ConfigurableHttpClient)
  nameWithType: IConfigurableHttpClientInitializer.Initialize(ConfigurableHttpClient)
  fullName: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(Google.Apis.Http.ConfigurableHttpClient)
  spec.csharp:
  - uid: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(Google.Apis.Http.ConfigurableHttpClient)
    name: Initialize
    nameWithType: IConfigurableHttpClientInitializer.Initialize
    fullName: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Apis.Http.ConfigurableHttpClient
    name: ConfigurableHttpClient
    nameWithType: ConfigurableHttpClient
    fullName: Google.Apis.Http.ConfigurableHttpClient
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize(Google.Apis.Http.ConfigurableHttpClient)
    name: Initialize
    nameWithType: IConfigurableHttpClientInitializer.Initialize
    fullName: Google.Apis.Http.IConfigurableHttpClientInitializer.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: Google.Apis.Http.ConfigurableHttpClient
    name: ConfigurableHttpClient
    nameWithType: ConfigurableHttpClient
    fullName: Google.Apis.Http.ConfigurableHttpClient
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Apis.Http.ConfigurableHttpClient
  commentId: T:Google.Apis.Http.ConfigurableHttpClient
  parent: Google.Apis.Http
  isExternal: false
  name: ConfigurableHttpClient
  nameWithType: ConfigurableHttpClient
  fullName: Google.Apis.Http.ConfigurableHttpClient
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Auth#OAuth2#ITokenAccess#GetAccessTokenForRequestAsync*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.Google#Apis#Auth#OAuth2#ITokenAccess#GetAccessTokenForRequestAsync
  isExternal: false
  name: ITokenAccess.GetAccessTokenForRequestAsync
  nameWithType: GoogleCredential.ITokenAccess.GetAccessTokenForRequestAsync
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
  nameWithType.vb: GoogleCredential.Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
  name.vb: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
- uid: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  parent: Google.Apis.Auth.OAuth2.ITokenAccess
  isExternal: true
  name: GetAccessTokenForRequestAsync(String, CancellationToken)
  nameWithType: ITokenAccess.GetAccessTokenForRequestAsync(String, CancellationToken)
  fullName: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
    name: GetAccessTokenForRequestAsync
    nameWithType: ITokenAccess.GetAccessTokenForRequestAsync
    fullName: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
    name: GetAccessTokenForRequestAsync
    nameWithType: ITokenAccess.GetAccessTokenForRequestAsync
    fullName: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential*
  commentId: Overload:Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential
  isExternal: false
  name: UnderlyingCredential
  nameWithType: GoogleCredential.UnderlyingCredential
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential.UnderlyingCredential
