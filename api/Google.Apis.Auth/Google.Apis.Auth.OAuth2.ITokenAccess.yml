### YamlMime:ManagedReference
items:
- uid: Google.Apis.Auth.OAuth2.ITokenAccess
  commentId: T:Google.Apis.Auth.OAuth2.ITokenAccess
  id: ITokenAccess
  parent: Google.Apis.Auth.OAuth2
  children:
  - Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ITokenAccess
  nameWithType: ITokenAccess
  fullName: Google.Apis.Auth.OAuth2.ITokenAccess
  type: Interface
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/ITokenAccess.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: ITokenAccess
    path: Src/Support/Google.Apis.Auth/OAuth2/ITokenAccess.cs
    startLine: 29
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nAllows direct retrieval of access tokens to authenticate requests.\nThis is necessary for workflows where you don&apos;t want to use \n<xref href=\"Google.Apis.Services.BaseClientService\" data-throw-if-not-resolved=\"false\"></xref> to access the API.\n(e.g. gRPC that implemenents the entire HTTP2 stack internally).\n"
  example: []
  syntax:
    content: public interface ITokenAccess
    content.vb: Public Interface ITokenAccess
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  id: GetAccessTokenForRequestAsync(System.String,System.Threading.CancellationToken)
  parent: Google.Apis.Auth.OAuth2.ITokenAccess
  langs:
  - csharp
  - vb
  name: GetAccessTokenForRequestAsync(String, CancellationToken)
  nameWithType: ITokenAccess.GetAccessTokenForRequestAsync(String, CancellationToken)
  fullName: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Src/Support/Google.Apis.Auth/OAuth2/ITokenAccess.cs
      branch: master
      repo: https://github.com/google/google-api-dotnet-client
    id: GetAccessTokenForRequestAsync
    path: Src/Support/Google.Apis.Auth/OAuth2/ITokenAccess.cs
    startLine: 42
  assemblies:
  - Google.Apis.Auth
  namespace: Google.Apis.Auth.OAuth2
  summary: "\nGets an access token to authorize a request.\nImplementations should handle automatic refreshes of the token\nif they are supported.\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">authUri</code> might be required by some credential types\n(e.g. the JWT access token) while other credential types\nmigth just ignore it.\n"
  example: []
  syntax:
    content: Task<string> GetAccessTokenForRequestAsync(string authUri = null, CancellationToken cancellationToken = default (CancellationToken))
    parameters:
    - id: authUri
      type: System.String
      description: The URI the returned token will grant access to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The access token.
    content.vb: Function GetAccessTokenForRequestAsync(authUri As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync*
references:
- uid: Google.Apis.Services.BaseClientService
  commentId: T:Google.Apis.Services.BaseClientService
- uid: Google.Apis.Auth.OAuth2
  commentId: N:Google.Apis.Auth.OAuth2
  isExternal: false
  name: Google.Apis.Auth.OAuth2
  nameWithType: Google.Apis.Auth.OAuth2
  fullName: Google.Apis.Auth.OAuth2
- uid: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync*
  commentId: Overload:Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
  isExternal: false
  name: GetAccessTokenForRequestAsync
  nameWithType: ITokenAccess.GetAccessTokenForRequestAsync
  fullName: Google.Apis.Auth.OAuth2.ITokenAccess.GetAccessTokenForRequestAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
