### YamlMime:ManagedReference
items:
- uid: Google.Api.Gax.TaskExtensions
  commentId: T:Google.Api.Gax.TaskExtensions
  id: TaskExtensions
  parent: Google.Api.Gax
  children:
  - Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions``1(System.Threading.Tasks.Task{``0})
  - Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions(System.Threading.Tasks.Task)
  langs:
  - csharp
  - vb
  name: TaskExtensions
  nameWithType: TaskExtensions
  fullName: Google.Api.Gax.TaskExtensions
  type: Class
  source:
    remote:
      path: src/Google.Api.Gax/TaskExtensions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: TaskExtensions
    path: src/Google.Api.Gax/TaskExtensions.cs
    startLine: 17
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nExtension methods for tasks.\n"
  example: []
  syntax:
    content: public static class TaskExtensions
    content.vb: Public Module TaskExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions``1(System.Threading.Tasks.Task{``0})
  commentId: M:Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions``1(System.Threading.Tasks.Task{``0})
  id: ResultWithUnwrappedExceptions``1(System.Threading.Tasks.Task{``0})
  isExtensionMethod: true
  parent: Google.Api.Gax.TaskExtensions
  langs:
  - csharp
  - vb
  name: ResultWithUnwrappedExceptions<T>(Task<T>)
  nameWithType: TaskExtensions.ResultWithUnwrappedExceptions<T>(Task<T>)
  fullName: Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions<T>(System.Threading.Tasks.Task<T>)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/TaskExtensions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: ResultWithUnwrappedExceptions
    path: src/Google.Api.Gax/TaskExtensions.cs
    startLine: 26
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nSynchronously waits for the given task to complete, and returns the result.\nAny <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> thrown is unwrapped to the first inner exception.\n"
  example: []
  syntax:
    content: public static T ResultWithUnwrappedExceptions<T>(this Task<T> task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task{{T}}
      description: The task to wait for.
    typeParameters:
    - id: T
      description: The result type of the task
    return:
      type: '{T}'
      description: The result of the completed task.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ResultWithUnwrappedExceptions(Of T)(task As Task(Of T)) As T
  overload: Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions*
  nameWithType.vb: TaskExtensions.ResultWithUnwrappedExceptions(Of T)(Task(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions(Of T)(System.Threading.Tasks.Task(Of T))
  name.vb: ResultWithUnwrappedExceptions(Of T)(Task(Of T))
- uid: Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions(System.Threading.Tasks.Task)
  commentId: M:Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions(System.Threading.Tasks.Task)
  id: WaitWithUnwrappedExceptions(System.Threading.Tasks.Task)
  isExtensionMethod: true
  parent: Google.Api.Gax.TaskExtensions
  langs:
  - csharp
  - vb
  name: WaitWithUnwrappedExceptions(Task)
  nameWithType: TaskExtensions.WaitWithUnwrappedExceptions(Task)
  fullName: Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions(System.Threading.Tasks.Task)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/TaskExtensions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: WaitWithUnwrappedExceptions
    path: src/Google.Api.Gax/TaskExtensions.cs
    startLine: 37
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nSynchronously waits for the given task to complete.\nAny <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> thrown is unwrapped to the first inner exception.\n"
  example: []
  syntax:
    content: public static void WaitWithUnwrappedExceptions(this Task task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The task to wait for.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WaitWithUnwrappedExceptions(task As Task)
  overload: Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Google.Api.Gax
  commentId: N:Google.Api.Gax
  isExternal: false
  name: Google.Api.Gax
  nameWithType: Google.Api.Gax
  fullName: Google.Api.Gax
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.AggregateException
  commentId: T:System.AggregateException
- uid: Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions*
  commentId: Overload:Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions
  isExternal: false
  name: ResultWithUnwrappedExceptions
  nameWithType: TaskExtensions.ResultWithUnwrappedExceptions
  fullName: Google.Api.Gax.TaskExtensions.ResultWithUnwrappedExceptions
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions*
  commentId: Overload:Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions
  isExternal: false
  name: WaitWithUnwrappedExceptions
  nameWithType: TaskExtensions.WaitWithUnwrappedExceptions
  fullName: Google.Api.Gax.TaskExtensions.WaitWithUnwrappedExceptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
