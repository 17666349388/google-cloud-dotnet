### YamlMime:ManagedReference
items:
- uid: Google.Api.Gax.GaxPreconditions
  commentId: T:Google.Api.Gax.GaxPreconditions
  id: GaxPreconditions
  parent: Google.Api.Gax
  children:
  - Google.Api.Gax.GaxPreconditions.CheckArgument(System.Boolean,System.String,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckArgument``1(System.Boolean,System.String,System.String,``0)
  - Google.Api.Gax.GaxPreconditions.CheckArgument``2(System.Boolean,System.String,System.String,``0,``1)
  - Google.Api.Gax.GaxPreconditions.CheckArgumentRange(System.Int32,System.String,System.Int32,System.Int32)
  - Google.Api.Gax.GaxPreconditions.CheckArgumentRange``1(``0,System.String,``0,``0)
  - Google.Api.Gax.GaxPreconditions.CheckArgumentRange``1(System.Nullable{``0},System.String,``0,``0)
  - Google.Api.Gax.GaxPreconditions.CheckEnumValue``1(``0,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Double,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int32,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int64,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Double},System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Int32},System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Int64},System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay(System.TimeSpan,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNotNull``1(``0,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty(System.String,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckState(System.Boolean,System.String)
  - Google.Api.Gax.GaxPreconditions.CheckState``1(System.Boolean,System.String,``0)
  - Google.Api.Gax.GaxPreconditions.CheckState``2(System.Boolean,System.String,``0,``1)
  langs:
  - csharp
  - vb
  name: GaxPreconditions
  nameWithType: GaxPreconditions
  fullName: Google.Api.Gax.GaxPreconditions
  type: Class
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GaxPreconditions
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 22
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nPreconditions for checking method arguments, state etc.\n"
  example: []
  syntax:
    content: public static class GaxPreconditions
    content.vb: Public Module GaxPreconditions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Google.Api.Gax.GaxPreconditions.CheckNotNull``1(``0,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNotNull``1(``0,System.String)
  id: CheckNotNull``1(``0,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNotNull<T>(T, String)
  nameWithType: GaxPreconditions.CheckNotNull<T>(T, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNotNull<T>(T, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNotNull
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 41
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument (to the calling method) is non-null.\n"
  example: []
  syntax:
    content: 'public static T CheckNotNull<T>(T argument, string paramName)where T : class'
    parameters:
    - id: argument
      type: '{T}'
      description: The argument provided for the parameter.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    typeParameters:
    - id: T
      description: The type of the parameter.
    return:
      type: '{T}'
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it is not null
    content.vb: Public Shared Function CheckNotNull(Of T As Class)(argument As T, paramName As String) As T
  overload: Google.Api.Gax.GaxPreconditions.CheckNotNull*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">argument</code> is null
  nameWithType.vb: GaxPreconditions.CheckNotNull(Of T)(T, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckNotNull(Of T)(T, System.String)
  name.vb: CheckNotNull(Of T)(T, String)
- uid: Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty(System.String,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty(System.String,System.String)
  id: CheckNotNullOrEmpty(System.String,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNotNullOrEmpty(String, String)
  nameWithType: GaxPreconditions.CheckNotNullOrEmpty(String, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNotNullOrEmpty
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 52
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that a string argument is neither null, nor an empty string.\n"
  example: []
  syntax:
    content: public static string CheckNotNullOrEmpty(string argument, string paramName)
    parameters:
    - id: argument
      type: System.String
      description: The argument provided for the parameter.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    return:
      type: System.String
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it is not null or empty
    content.vb: Public Shared Function CheckNotNullOrEmpty(argument As String, paramName As String) As String
  overload: Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">argument</code> is null
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">argument</code> is empty
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Api.Gax.GaxPreconditions.CheckArgumentRange(System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckArgumentRange(System.Int32,System.String,System.Int32,System.Int32)
  id: CheckArgumentRange(System.Int32,System.String,System.Int32,System.Int32)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckArgumentRange(Int32, String, Int32, Int32)
  nameWithType: GaxPreconditions.CheckArgumentRange(Int32, String, Int32, Int32)
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgumentRange(System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckArgumentRange
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 73
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value is valid.\n"
  remarks: "\nNote that the upper bound (<code data-dev-comment-type=\"paramref\" class=\"paramref\">maxInclusive</code>) is inclusive,\nnot exclusive. This is deliberate, to allow the specification of ranges which include\n<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static int CheckArgumentRange(int argument, string paramName, int minInclusive, int maxInclusive)
    parameters:
    - id: argument
      type: System.Int32
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    - id: minInclusive
      type: System.Int32
      description: The smallest valid value.
    - id: maxInclusive
      type: System.Int32
      description: The largest valid value.
    return:
      type: System.Int32
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was in range
    content.vb: Public Shared Function CheckArgumentRange(argument As Integer, paramName As String, minInclusive As Integer, maxInclusive As Integer) As Integer
  overload: Google.Api.Gax.GaxPreconditions.CheckArgumentRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was outside the specified range.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Api.Gax.GaxPreconditions.CheckArgumentRange``1(``0,System.String,``0,``0)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckArgumentRange``1(``0,System.String,``0,``0)
  id: CheckArgumentRange``1(``0,System.String,``0,``0)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckArgumentRange<T>(T, String, T, T)
  nameWithType: GaxPreconditions.CheckArgumentRange<T>(T, String, T, T)
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgumentRange<T>(T, System.String, T, T)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckArgumentRange
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 91
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value is valid.\n"
  remarks: "\nNote that the upper bound (<code data-dev-comment-type=\"paramref\" class=\"paramref\">maxInclusive</code>) is inclusive,\nnot exclusive. This is deliberate, to allow the specification of ranges which include\n<xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static T CheckArgumentRange<T>(T argument, string paramName, T minInclusive, T maxInclusive)where T : IComparable<T>'
    parameters:
    - id: argument
      type: '{T}'
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    - id: minInclusive
      type: '{T}'
      description: The smallest valid value.
    - id: maxInclusive
      type: '{T}'
      description: The largest valid value.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was in range
    content.vb: Public Shared Function CheckArgumentRange(Of T As IComparable(Of T))(argument As T, paramName As String, minInclusive As T, maxInclusive As T) As T
  overload: Google.Api.Gax.GaxPreconditions.CheckArgumentRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was outside the specified range.
  nameWithType.vb: GaxPreconditions.CheckArgumentRange(Of T)(T, String, T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckArgumentRange(Of T)(T, System.String, T, T)
  name.vb: CheckArgumentRange(Of T)(T, String, T, T)
- uid: Google.Api.Gax.GaxPreconditions.CheckArgumentRange``1(System.Nullable{``0},System.String,``0,``0)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckArgumentRange``1(System.Nullable{``0},System.String,``0,``0)
  id: CheckArgumentRange``1(System.Nullable{``0},System.String,``0,``0)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckArgumentRange<T>(Nullable<T>, String, T, T)
  nameWithType: GaxPreconditions.CheckArgumentRange<T>(Nullable<T>, String, T, T)
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgumentRange<T>(System.Nullable<T>, System.String, T, T)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckArgumentRange
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 109
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value, if not <code>null</code>, is valid.\n"
  remarks: "\nNote that the upper bound (<code data-dev-comment-type=\"paramref\" class=\"paramref\">maxInclusive</code>) is inclusive,\nnot exclusive. This is deliberate, to allow the specification of ranges which include\n<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static T? CheckArgumentRange<T>(T? argument, string paramName, T minInclusive, T maxInclusive)where T : struct, IComparable<T>'
    parameters:
    - id: argument
      type: System.Nullable{{T}}
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    - id: minInclusive
      type: '{T}'
      description: The smallest valid value.
    - id: maxInclusive
      type: '{T}'
      description: The largest valid value.
    typeParameters:
    - id: T
    return:
      type: System.Nullable{{T}}
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was in range, or <code>null</code>.
    content.vb: Public Shared Function CheckArgumentRange(Of T As {Structure, IComparable(Of T)})(argument As T?, paramName As String, minInclusive As T, maxInclusive As T) As T?
  overload: Google.Api.Gax.GaxPreconditions.CheckArgumentRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was outside the specified range.
  nameWithType.vb: GaxPreconditions.CheckArgumentRange(Of T)(Nullable(Of T), String, T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckArgumentRange(Of T)(System.Nullable(Of T), System.String, T, T)
  name.vb: CheckArgumentRange(Of T)(Nullable(Of T), String, T, T)
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int32,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int32,System.String)
  id: CheckNonNegative(System.Int32,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNonNegative(Int32, String)
  nameWithType: GaxPreconditions.CheckNonNegative(Int32, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNonNegative
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 119
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value is not negative.\n"
  example: []
  syntax:
    content: public static int CheckNonNegative(int argument, string paramName)
    parameters:
    - id: argument
      type: System.Int32
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    return:
      type: System.Int32
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was non-negative.
    content.vb: Public Shared Function CheckNonNegative(argument As Integer, paramName As String) As Integer
  overload: Google.Api.Gax.GaxPreconditions.CheckNonNegative*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was negative.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Int32},System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Int32},System.String)
  id: CheckNonNegative(System.Nullable{System.Int32},System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNonNegative(Nullable<Int32>, String)
  nameWithType: GaxPreconditions.CheckNonNegative(Nullable<Int32>, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable<System.Int32>, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNonNegative
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 129
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value, if not <code>null</code>, is not negative.\n"
  example: []
  syntax:
    content: public static int ? CheckNonNegative(int ? argument, string paramName)
    parameters:
    - id: argument
      type: System.Nullable{System.Int32}
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    return:
      type: System.Nullable{System.Int32}
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was non-negative, or <code>null</code>.
    content.vb: Public Shared Function CheckNonNegative(argument As Integer?, paramName As String) As Integer?
  overload: Google.Api.Gax.GaxPreconditions.CheckNonNegative*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was negative.
  nameWithType.vb: GaxPreconditions.CheckNonNegative(Nullable(Of Int32), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable(Of System.Int32), System.String)
  name.vb: CheckNonNegative(Nullable(Of Int32), String)
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int64,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int64,System.String)
  id: CheckNonNegative(System.Int64,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNonNegative(Int64, String)
  nameWithType: GaxPreconditions.CheckNonNegative(Int64, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Int64, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNonNegative
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 139
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value is not negative.\n"
  example: []
  syntax:
    content: public static long CheckNonNegative(long argument, string paramName)
    parameters:
    - id: argument
      type: System.Int64
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    return:
      type: System.Int64
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was non-negative.
    content.vb: Public Shared Function CheckNonNegative(argument As Long, paramName As String) As Long
  overload: Google.Api.Gax.GaxPreconditions.CheckNonNegative*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was negative.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Int64},System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Int64},System.String)
  id: CheckNonNegative(System.Nullable{System.Int64},System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNonNegative(Nullable<Int64>, String)
  nameWithType: GaxPreconditions.CheckNonNegative(Nullable<Int64>, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable<System.Int64>, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNonNegative
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 149
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value, if not <code>null</code>, is not negative.\n"
  example: []
  syntax:
    content: public static long ? CheckNonNegative(long ? argument, string paramName)
    parameters:
    - id: argument
      type: System.Nullable{System.Int64}
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    return:
      type: System.Nullable{System.Int64}
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was non-negative, or <code>null</code>.
    content.vb: Public Shared Function CheckNonNegative(argument As Long?, paramName As String) As Long?
  overload: Google.Api.Gax.GaxPreconditions.CheckNonNegative*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was negative.
  nameWithType.vb: GaxPreconditions.CheckNonNegative(Nullable(Of Int64), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable(Of System.Int64), System.String)
  name.vb: CheckNonNegative(Nullable(Of Int64), String)
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Double,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Double,System.String)
  id: CheckNonNegative(System.Double,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNonNegative(Double, String)
  nameWithType: GaxPreconditions.CheckNonNegative(Double, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Double, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNonNegative
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 159
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value is not negative.\n"
  example: []
  syntax:
    content: public static double CheckNonNegative(double argument, string paramName)
    parameters:
    - id: argument
      type: System.Double
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    return:
      type: System.Double
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was non-negative.
    content.vb: Public Shared Function CheckNonNegative(argument As Double, paramName As String) As Double
  overload: Google.Api.Gax.GaxPreconditions.CheckNonNegative*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was negative.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Double},System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable{System.Double},System.String)
  id: CheckNonNegative(System.Nullable{System.Double},System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNonNegative(Nullable<Double>, String)
  nameWithType: GaxPreconditions.CheckNonNegative(Nullable<Double>, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable<System.Double>, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNonNegative
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 169
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given argument value, if not <code>null</code>, is not negative.\n"
  example: []
  syntax:
    content: public static double ? CheckNonNegative(double ? argument, string paramName)
    parameters:
    - id: argument
      type: System.Nullable{System.Double}
      description: The value of the argument passed to the calling method.
    - id: paramName
      type: System.String
      description: The name of the parameter in the calling method.
    return:
      type: System.Nullable{System.Double}
      description: <code data-dev-comment-type="paramref" class="paramref">argument</code> if it was non-negative, or <code>null</code>.
    content.vb: Public Shared Function CheckNonNegative(argument As Double?, paramName As String) As Double?
  overload: Google.Api.Gax.GaxPreconditions.CheckNonNegative*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The argument was negative.
  nameWithType.vb: GaxPreconditions.CheckNonNegative(Nullable(Of Double), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckNonNegative(System.Nullable(Of System.Double), System.String)
  name.vb: CheckNonNegative(Nullable(Of Double), String)
- uid: Google.Api.Gax.GaxPreconditions.CheckState(System.Boolean,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckState(System.Boolean,System.String)
  id: CheckState(System.Boolean,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckState(Boolean, String)
  nameWithType: GaxPreconditions.CheckState(Boolean, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckState(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckState
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 179
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that given condition is met, throwing an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public static void CheckState(bool condition, string message)
    parameters:
    - id: condition
      type: System.Boolean
      description: The (already evaluated) condition to check.
    - id: message
      type: System.String
      description: >-
        The message to include in the exception, if generated. This should not

        use interpolation, as the interpolation would be performed regardless of whether or

        not an exception is thrown.
    content.vb: Public Shared Sub CheckState(condition As Boolean, message As String)
  overload: Google.Api.Gax.GaxPreconditions.CheckState*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Api.Gax.GaxPreconditions.CheckState``1(System.Boolean,System.String,``0)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckState``1(System.Boolean,System.String,``0)
  id: CheckState``1(System.Boolean,System.String,``0)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckState<T>(Boolean, String, T)
  nameWithType: GaxPreconditions.CheckState<T>(Boolean, String, T)
  fullName: Google.Api.Gax.GaxPreconditions.CheckState<T>(System.Boolean, System.String, T)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckState
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 194
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that given condition is met, throwing an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public static void CheckState<T>(bool condition, string format, T arg0)
    parameters:
    - id: condition
      type: System.Boolean
      description: The (already evaluated) condition to check.
    - id: format
      type: System.String
      description: >-
        The format string to use to create the exception message if the

        condition is not met.
    - id: arg0
      type: '{T}'
      description: The argument to the format string.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub CheckState(Of T)(condition As Boolean, format As String, arg0 As T)
  overload: Google.Api.Gax.GaxPreconditions.CheckState*
  nameWithType.vb: GaxPreconditions.CheckState(Of T)(Boolean, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckState(Of T)(System.Boolean, System.String, T)
  name.vb: CheckState(Of T)(Boolean, String, T)
- uid: Google.Api.Gax.GaxPreconditions.CheckState``2(System.Boolean,System.String,``0,``1)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckState``2(System.Boolean,System.String,``0,``1)
  id: CheckState``2(System.Boolean,System.String,``0,``1)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckState<T1, T2>(Boolean, String, T1, T2)
  nameWithType: GaxPreconditions.CheckState<T1, T2>(Boolean, String, T1, T2)
  fullName: Google.Api.Gax.GaxPreconditions.CheckState<T1, T2>(System.Boolean, System.String, T1, T2)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckState
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 210
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that given condition is met, throwing an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public static void CheckState<T1, T2>(bool condition, string format, T1 arg0, T2 arg1)
    parameters:
    - id: condition
      type: System.Boolean
      description: The (already evaluated) condition to check.
    - id: format
      type: System.String
      description: >-
        The format string to use to create the exception message if the

        condition is not met.
    - id: arg0
      type: '{T1}'
      description: The first argument to the format string.
    - id: arg1
      type: '{T2}'
      description: The second argument to the format string.
    typeParameters:
    - id: T1
    - id: T2
    content.vb: Public Shared Sub CheckState(Of T1, T2)(condition As Boolean, format As String, arg0 As T1, arg1 As T2)
  overload: Google.Api.Gax.GaxPreconditions.CheckState*
  nameWithType.vb: GaxPreconditions.CheckState(Of T1, T2)(Boolean, String, T1, T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckState(Of T1, T2)(System.Boolean, System.String, T1, T2)
  name.vb: CheckState(Of T1, T2)(Boolean, String, T1, T2)
- uid: Google.Api.Gax.GaxPreconditions.CheckArgument(System.Boolean,System.String,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckArgument(System.Boolean,System.String,System.String)
  id: CheckArgument(System.Boolean,System.String,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckArgument(Boolean, String, String)
  nameWithType: GaxPreconditions.CheckArgument(Boolean, String, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgument(System.Boolean, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckArgument
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 227
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that given argument-based condition is met, throwing an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public static void CheckArgument(bool condition, string paramName, string message)
    parameters:
    - id: condition
      type: System.Boolean
      description: The (already evaluated) condition to check.
    - id: paramName
      type: System.String
      description: The name of the parameter whose value is being tested.
    - id: message
      type: System.String
      description: >-
        The message to include in the exception, if generated. This should not

        use interpolation, as the interpolation would be performed regardless of whether or not an exception

        is thrown.
    content.vb: Public Shared Sub CheckArgument(condition As Boolean, paramName As String, message As String)
  overload: Google.Api.Gax.GaxPreconditions.CheckArgument*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Google.Api.Gax.GaxPreconditions.CheckArgument``1(System.Boolean,System.String,System.String,``0)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckArgument``1(System.Boolean,System.String,System.String,``0)
  id: CheckArgument``1(System.Boolean,System.String,System.String,``0)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckArgument<T>(Boolean, String, String, T)
  nameWithType: GaxPreconditions.CheckArgument<T>(Boolean, String, String, T)
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgument<T>(System.Boolean, System.String, System.String, T)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckArgument
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 243
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that given argument-based condition is met, throwing an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public static void CheckArgument<T>(bool condition, string paramName, string format, T arg0)
    parameters:
    - id: condition
      type: System.Boolean
      description: The (already evaluated) condition to check.
    - id: paramName
      type: System.String
      description: The name of the parameter whose value is being tested.
    - id: format
      type: System.String
      description: >-
        The format string to use to create the exception message if the

        condition is not met.
    - id: arg0
      type: '{T}'
      description: The argument to the format string.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub CheckArgument(Of T)(condition As Boolean, paramName As String, format As String, arg0 As T)
  overload: Google.Api.Gax.GaxPreconditions.CheckArgument*
  nameWithType.vb: GaxPreconditions.CheckArgument(Of T)(Boolean, String, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckArgument(Of T)(System.Boolean, System.String, System.String, T)
  name.vb: CheckArgument(Of T)(Boolean, String, String, T)
- uid: Google.Api.Gax.GaxPreconditions.CheckArgument``2(System.Boolean,System.String,System.String,``0,``1)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckArgument``2(System.Boolean,System.String,System.String,``0,``1)
  id: CheckArgument``2(System.Boolean,System.String,System.String,``0,``1)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckArgument<T1, T2>(Boolean, String, String, T1, T2)
  nameWithType: GaxPreconditions.CheckArgument<T1, T2>(Boolean, String, String, T1, T2)
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgument<T1, T2>(System.Boolean, System.String, System.String, T1, T2)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckArgument
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 260
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that given argument-based condition is met, throwing an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public static void CheckArgument<T1, T2>(bool condition, string paramName, string format, T1 arg0, T2 arg1)
    parameters:
    - id: condition
      type: System.Boolean
      description: The (already evaluated) condition to check.
    - id: paramName
      type: System.String
      description: The name of the parameter whose value is being tested.
    - id: format
      type: System.String
      description: >-
        The format string to use to create the exception message if the

        condition is not met.
    - id: arg0
      type: '{T1}'
      description: The first argument to the format string.
    - id: arg1
      type: '{T2}'
      description: The second argument to the format string.
    typeParameters:
    - id: T1
    - id: T2
    content.vb: Public Shared Sub CheckArgument(Of T1, T2)(condition As Boolean, paramName As String, format As String, arg0 As T1, arg1 As T2)
  overload: Google.Api.Gax.GaxPreconditions.CheckArgument*
  nameWithType.vb: GaxPreconditions.CheckArgument(Of T1, T2)(Boolean, String, String, T1, T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckArgument(Of T1, T2)(System.Boolean, System.String, System.String, T1, T2)
  name.vb: CheckArgument(Of T1, T2)(Boolean, String, String, T1, T2)
- uid: Google.Api.Gax.GaxPreconditions.CheckEnumValue``1(``0,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckEnumValue``1(``0,System.String)
  id: CheckEnumValue``1(``0,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckEnumValue<T>(T, String)
  nameWithType: GaxPreconditions.CheckEnumValue<T>(T, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckEnumValue<T>(T, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckEnumValue
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 275
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given value is in fact defined in the enum used as the type argument of the method.\n"
  example: []
  syntax:
    content: 'public static T CheckEnumValue<T>(T value, string paramName)where T : struct'
    parameters:
    - id: value
      type: '{T}'
      description: The value to check.
    - id: paramName
      type: System.String
      description: The name of the parameter whose value is being tested.
    typeParameters:
    - id: T
      description: The enum type to check the value within.
    return:
      type: '{T}'
      description: <code data-dev-comment-type="paramref" class="paramref">value</code> if it was a defined value
    content.vb: Public Shared Function CheckEnumValue(Of T As Structure)(value As T, paramName As String) As T
  overload: Google.Api.Gax.GaxPreconditions.CheckEnumValue*
  nameWithType.vb: GaxPreconditions.CheckEnumValue(Of T)(T, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Google.Api.Gax.GaxPreconditions.CheckEnumValue(Of T)(T, System.String)
  name.vb: CheckEnumValue(Of T)(T, String)
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay(System.TimeSpan,System.String)
  commentId: M:Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay(System.TimeSpan,System.String)
  id: CheckNonNegativeDelay(System.TimeSpan,System.String)
  parent: Google.Api.Gax.GaxPreconditions
  langs:
  - csharp
  - vb
  name: CheckNonNegativeDelay(TimeSpan, String)
  nameWithType: GaxPreconditions.CheckNonNegativeDelay(TimeSpan, String)
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay(System.TimeSpan, System.String)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax/GaxPreconditions.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: CheckNonNegativeDelay
    path: src/Google.Api.Gax/GaxPreconditions.cs
    startLine: 290
  assemblies:
  - Google.Api.Gax
  namespace: Google.Api.Gax
  summary: "\nChecks that the given <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> used as a delay is non-negative. This is a very specific\ncall; most users won&apos;t need it.\n"
  example: []
  syntax:
    content: public static TimeSpan CheckNonNegativeDelay(TimeSpan value, string paramName)
    parameters:
    - id: value
      type: System.TimeSpan
      description: The value to check.
    - id: paramName
      type: System.String
      description: The name of the parameter whose value is being tested.
    return:
      type: System.TimeSpan
    content.vb: Public Shared Function CheckNonNegativeDelay(value As TimeSpan, paramName As String) As TimeSpan
  overload: Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Google.Api.Gax
  commentId: N:Google.Api.Gax
  isExternal: false
  name: Google.Api.Gax
  nameWithType: Google.Api.Gax
  fullName: Google.Api.Gax
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Api.Gax.GaxPreconditions.CheckNotNull*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckNotNull
  isExternal: false
  name: CheckNotNull
  nameWithType: GaxPreconditions.CheckNotNull
  fullName: Google.Api.Gax.GaxPreconditions.CheckNotNull
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty
  isExternal: false
  name: CheckNotNullOrEmpty
  nameWithType: GaxPreconditions.CheckNotNullOrEmpty
  fullName: Google.Api.Gax.GaxPreconditions.CheckNotNullOrEmpty
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
- uid: Google.Api.Gax.GaxPreconditions.CheckArgumentRange*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckArgumentRange
  isExternal: false
  name: CheckArgumentRange
  nameWithType: GaxPreconditions.CheckArgumentRange
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgumentRange
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64.MaxValue
  commentId: F:System.Int64.MaxValue
- uid: System.Nullable{{T}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegative*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckNonNegative
  isExternal: false
  name: CheckNonNegative
  nameWithType: GaxPreconditions.CheckNonNegative
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegative
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Google.Api.Gax.GaxPreconditions.CheckState*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckState
  isExternal: false
  name: CheckState
  nameWithType: GaxPreconditions.CheckState
  fullName: Google.Api.Gax.GaxPreconditions.CheckState
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T1
  isExternal: false
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  isExternal: false
  name: T2
  nameWithType: T2
  fullName: T2
- uid: Google.Api.Gax.GaxPreconditions.CheckArgument*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckArgument
  isExternal: false
  name: CheckArgument
  nameWithType: GaxPreconditions.CheckArgument
  fullName: Google.Api.Gax.GaxPreconditions.CheckArgument
- uid: Google.Api.Gax.GaxPreconditions.CheckEnumValue*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckEnumValue
  isExternal: false
  name: CheckEnumValue
  nameWithType: GaxPreconditions.CheckEnumValue
  fullName: Google.Api.Gax.GaxPreconditions.CheckEnumValue
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay*
  commentId: Overload:Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay
  isExternal: false
  name: CheckNonNegativeDelay
  nameWithType: GaxPreconditions.CheckNonNegativeDelay
  fullName: Google.Api.Gax.GaxPreconditions.CheckNonNegativeDelay
