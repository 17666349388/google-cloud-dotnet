### YamlMime:ManagedReference
items:
- uid: Google.Api.Gax.Rest.ScopedCredentialProvider
  commentId: T:Google.Api.Gax.Rest.ScopedCredentialProvider
  id: ScopedCredentialProvider
  parent: Google.Api.Gax.Rest
  children:
  - Google.Api.Gax.Rest.ScopedCredentialProvider.#ctor(System.Collections.Generic.IEnumerable{System.String})
  - Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials(Google.Apis.Auth.OAuth2.GoogleCredential)
  - Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync(Google.Apis.Auth.OAuth2.GoogleCredential)
  langs:
  - csharp
  - vb
  name: ScopedCredentialProvider
  nameWithType: ScopedCredentialProvider
  fullName: Google.Api.Gax.Rest.ScopedCredentialProvider
  type: Class
  source:
    remote:
      path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: ScopedCredentialProvider
    path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
    startLine: 18
  assemblies:
  - Google.Api.Gax.Rest
  namespace: Google.Api.Gax.Rest
  summary: "\nSimple factory of scoped credentials, which caches a scoped version of the\ndefault application credentials to avoid repeated authentication.\n"
  example: []
  syntax:
    content: public sealed class ScopedCredentialProvider
    content.vb: Public NotInheritable Class ScopedCredentialProvider
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Google.Api.Gax.Rest.ScopedCredentialProvider.#ctor(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Google.Api.Gax.Rest.ScopedCredentialProvider.#ctor(System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.String})'
  parent: Google.Api.Gax.Rest.ScopedCredentialProvider
  langs:
  - csharp
  - vb
  name: ScopedCredentialProvider(IEnumerable<String>)
  nameWithType: ScopedCredentialProvider.ScopedCredentialProvider(IEnumerable<String>)
  fullName: Google.Api.Gax.Rest.ScopedCredentialProvider.ScopedCredentialProvider(System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: .ctor
    path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
    startLine: 34
  assemblies:
  - Google.Api.Gax.Rest
  namespace: Google.Api.Gax.Rest
  summary: "\nCreates a channel pool which will apply the specified scopes to the credentials if they require any.\n"
  example: []
  syntax:
    content: public ScopedCredentialProvider(IEnumerable<string> scopes)
    parameters:
    - id: scopes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The scopes to apply. Must not be null, and must not contain null references. May be empty.
    content.vb: Public Sub New(scopes As IEnumerable(Of String))
  overload: Google.Api.Gax.Rest.ScopedCredentialProvider.#ctor*
  nameWithType.vb: ScopedCredentialProvider.ScopedCredentialProvider(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Google.Api.Gax.Rest.ScopedCredentialProvider.ScopedCredentialProvider(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: ScopedCredentialProvider(IEnumerable(Of String))
- uid: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials(Google.Apis.Auth.OAuth2.GoogleCredential)
  commentId: M:Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials(Google.Apis.Auth.OAuth2.GoogleCredential)
  id: GetCredentials(Google.Apis.Auth.OAuth2.GoogleCredential)
  parent: Google.Api.Gax.Rest.ScopedCredentialProvider
  langs:
  - csharp
  - vb
  name: GetCredentials(GoogleCredential)
  nameWithType: ScopedCredentialProvider.GetCredentials(GoogleCredential)
  fullName: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials(Google.Apis.Auth.OAuth2.GoogleCredential)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GetCredentials
    path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
    startLine: 49
  assemblies:
  - Google.Api.Gax.Rest
  namespace: Google.Api.Gax.Rest
  summary: "\nReturns credentials with the scopes applied if required.\n"
  example: []
  syntax:
    content: public GoogleCredential GetCredentials(GoogleCredential credentials)
    parameters:
    - id: credentials
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: >-
        Existing credentials, if any. This may be null,

        in which case the default application credentials will be used.
    return:
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: >-
        A task representing the asynchronous operation. The result of the task

        is the scoped credentials.
    content.vb: Public Function GetCredentials(credentials As GoogleCredential) As GoogleCredential
  overload: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync(Google.Apis.Auth.OAuth2.GoogleCredential)
  commentId: M:Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync(Google.Apis.Auth.OAuth2.GoogleCredential)
  id: GetCredentialsAsync(Google.Apis.Auth.OAuth2.GoogleCredential)
  parent: Google.Api.Gax.Rest.ScopedCredentialProvider
  langs:
  - csharp
  - vb
  name: GetCredentialsAsync(GoogleCredential)
  nameWithType: ScopedCredentialProvider.GetCredentialsAsync(GoogleCredential)
  fullName: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync(Google.Apis.Auth.OAuth2.GoogleCredential)
  type: Method
  source:
    remote:
      path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: GetCredentialsAsync
    path: src/Google.Api.Gax.Rest/ScopedCredentialProvider.cs
    startLine: 62
  assemblies:
  - Google.Api.Gax.Rest
  namespace: Google.Api.Gax.Rest
  summary: "\nAsynchronously returns credentials with the scopes applied if required.\n"
  example: []
  syntax:
    content: public Task<GoogleCredential> GetCredentialsAsync(GoogleCredential credentials)
    parameters:
    - id: credentials
      type: Google.Apis.Auth.OAuth2.GoogleCredential
      description: >-
        Existing credentials, if any. This may be null,

        in which case the default application credentials will be used.
    return:
      type: System.Threading.Tasks.Task{Google.Apis.Auth.OAuth2.GoogleCredential}
      description: >-
        A task representing the asynchronous operation. The result of the task

        is the scoped credentials.
    content.vb: Public Function GetCredentialsAsync(credentials As GoogleCredential) As Task(Of GoogleCredential)
  overload: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Google.Api.Gax.Rest
  commentId: N:Google.Api.Gax.Rest
  isExternal: false
  name: Google.Api.Gax.Rest
  nameWithType: Google.Api.Gax.Rest
  fullName: Google.Api.Gax.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Google.Api.Gax.Rest.ScopedCredentialProvider.#ctor*
  commentId: Overload:Google.Api.Gax.Rest.ScopedCredentialProvider.#ctor
  isExternal: false
  name: ScopedCredentialProvider
  nameWithType: ScopedCredentialProvider.ScopedCredentialProvider
  fullName: Google.Api.Gax.Rest.ScopedCredentialProvider.ScopedCredentialProvider
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials*
  commentId: Overload:Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials
  isExternal: false
  name: GetCredentials
  nameWithType: ScopedCredentialProvider.GetCredentials
  fullName: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentials
- uid: Google.Apis.Auth.OAuth2.GoogleCredential
  commentId: T:Google.Apis.Auth.OAuth2.GoogleCredential
  parent: Google.Apis.Auth.OAuth2
  isExternal: true
  name: GoogleCredential
  nameWithType: GoogleCredential
  fullName: Google.Apis.Auth.OAuth2.GoogleCredential
- uid: Google.Apis.Auth.OAuth2
  commentId: N:Google.Apis.Auth.OAuth2
  isExternal: false
  name: Google.Apis.Auth.OAuth2
  nameWithType: Google.Apis.Auth.OAuth2
  fullName: Google.Apis.Auth.OAuth2
- uid: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync*
  commentId: Overload:Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync
  isExternal: false
  name: GetCredentialsAsync
  nameWithType: ScopedCredentialProvider.GetCredentialsAsync
  fullName: Google.Api.Gax.Rest.ScopedCredentialProvider.GetCredentialsAsync
- uid: System.Threading.Tasks.Task{Google.Apis.Auth.OAuth2.GoogleCredential}
  commentId: T:System.Threading.Tasks.Task{Google.Apis.Auth.OAuth2.GoogleCredential}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GoogleCredential>
  nameWithType: Task<GoogleCredential>
  fullName: System.Threading.Tasks.Task<Google.Apis.Auth.OAuth2.GoogleCredential>
  nameWithType.vb: Task(Of GoogleCredential)
  fullName.vb: System.Threading.Tasks.Task(Of Google.Apis.Auth.OAuth2.GoogleCredential)
  name.vb: Task(Of GoogleCredential)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Google.Apis.Auth.OAuth2.GoogleCredential
    name: GoogleCredential
    nameWithType: GoogleCredential
    fullName: Google.Apis.Auth.OAuth2.GoogleCredential
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Google.Apis.Auth.OAuth2.GoogleCredential
    name: GoogleCredential
    nameWithType: GoogleCredential
    fullName: Google.Apis.Auth.OAuth2.GoogleCredential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
