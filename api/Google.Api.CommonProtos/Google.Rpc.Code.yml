### YamlMime:ManagedReference
items:
- uid: Google.Rpc.Code
  commentId: T:Google.Rpc.Code
  id: Code
  parent: Google.Rpc
  children:
  - Google.Rpc.Code.Aborted
  - Google.Rpc.Code.AlreadyExists
  - Google.Rpc.Code.Cancelled
  - Google.Rpc.Code.DataLoss
  - Google.Rpc.Code.DeadlineExceeded
  - Google.Rpc.Code.FailedPrecondition
  - Google.Rpc.Code.Internal
  - Google.Rpc.Code.InvalidArgument
  - Google.Rpc.Code.NotFound
  - Google.Rpc.Code.Ok
  - Google.Rpc.Code.OutOfRange
  - Google.Rpc.Code.PermissionDenied
  - Google.Rpc.Code.ResourceExhausted
  - Google.Rpc.Code.Unauthenticated
  - Google.Rpc.Code.Unavailable
  - Google.Rpc.Code.Unimplemented
  - Google.Rpc.Code.Unknown
  langs:
  - csharp
  - vb
  name: Code
  nameWithType: Code
  fullName: Google.Rpc.Code
  type: Enum
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Code
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 59
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe canonical error codes for Google APIs.\n\nSometimes multiple error codes may apply.  Services should return\nthe most specific error code that applies.  For example, prefer\n`OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.\nSimilarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over `FAILED_PRECONDITION`.\n"
  example: []
  syntax:
    content: public enum Code
    content.vb: Public Enum Code
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: Google.Rpc.Code.Ok
  commentId: F:Google.Rpc.Code.Ok
  id: Ok
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Ok
  nameWithType: Code.Ok
  fullName: Google.Rpc.Code.Ok
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Ok
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 65
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nNot an error; returned on success\n\nHTTP Mapping: 200 OK\n"
  example: []
  syntax:
    content: >-
      [OriginalName("OK")]

      Ok = 0
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("OK")>

      Ok = 0
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: OK
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.Cancelled
  commentId: F:Google.Rpc.Code.Cancelled
  id: Cancelled
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Cancelled
  nameWithType: Code.Cancelled
  fullName: Google.Rpc.Code.Cancelled
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Cancelled
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 71
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe operation was cancelled, typically by the caller.\n\nHTTP Mapping: 499 Client Closed Request\n"
  example: []
  syntax:
    content: >-
      [OriginalName("CANCELLED")]

      Cancelled = 1
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("CANCELLED")>

      Cancelled = 1
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CANCELLED
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.Unknown
  commentId: F:Google.Rpc.Code.Unknown
  id: Unknown
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Unknown
  nameWithType: Code.Unknown
  fullName: Google.Rpc.Code.Unknown
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Unknown
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 81
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nUnknown error.  For example, this error may be returned when\na `Status` value received from another address space belongs to\nan error space that is not known in this address space.  Also\nerrors raised by APIs that do not return enough error information\nmay be converted to this error.\n\nHTTP Mapping: 500 Internal Server Error\n"
  example: []
  syntax:
    content: >-
      [OriginalName("UNKNOWN")]

      Unknown = 2
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("UNKNOWN")>

      Unknown = 2
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: UNKNOWN
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.InvalidArgument
  commentId: F:Google.Rpc.Code.InvalidArgument
  id: InvalidArgument
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: InvalidArgument
  nameWithType: Code.InvalidArgument
  fullName: Google.Rpc.Code.InvalidArgument
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: InvalidArgument
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 90
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe client specified an invalid argument.  Note that this differs\nfrom `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments\nthat are problematic regardless of the state of the system\n(e.g., a malformed file name).\n\nHTTP Mapping: 400 Bad Request\n"
  example: []
  syntax:
    content: >-
      [OriginalName("INVALID_ARGUMENT")]

      InvalidArgument = 3
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("INVALID_ARGUMENT")>

      InvalidArgument = 3
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: INVALID_ARGUMENT
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.DeadlineExceeded
  commentId: F:Google.Rpc.Code.DeadlineExceeded
  id: DeadlineExceeded
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: DeadlineExceeded
  nameWithType: Code.DeadlineExceeded
  fullName: Google.Rpc.Code.DeadlineExceeded
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: DeadlineExceeded
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 100
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe deadline expired before the operation could complete. For operations\nthat change the state of the system, this error may be returned\neven if the operation has completed successfully.  For example, a\nsuccessful response from a server could have been delayed long\nenough for the deadline to expire.\n\nHTTP Mapping: 504 Gateway Timeout\n"
  example: []
  syntax:
    content: >-
      [OriginalName("DEADLINE_EXCEEDED")]

      DeadlineExceeded = 4
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("DEADLINE_EXCEEDED")>

      DeadlineExceeded = 4
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEADLINE_EXCEEDED
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.NotFound
  commentId: F:Google.Rpc.Code.NotFound
  id: NotFound
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: NotFound
  nameWithType: Code.NotFound
  fullName: Google.Rpc.Code.NotFound
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: NotFound
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 112
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nSome requested entity (e.g., file or directory) was not found.\n\nNote to server developers: if a request is denied for an entire class\nof users, such as gradual feature rollout or undocumented whitelist,\n`NOT_FOUND` may be used. If a request is denied for some users within\na class of users, such as user-based access control, `PERMISSION_DENIED`\nmust be used.\n\nHTTP Mapping: 404 Not Found\n"
  example: []
  syntax:
    content: >-
      [OriginalName("NOT_FOUND")]

      NotFound = 5
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("NOT_FOUND")>

      NotFound = 5
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: NOT_FOUND
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.AlreadyExists
  commentId: F:Google.Rpc.Code.AlreadyExists
  id: AlreadyExists
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: AlreadyExists
  nameWithType: Code.AlreadyExists
  fullName: Google.Rpc.Code.AlreadyExists
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: AlreadyExists
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 119
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe entity that a client attempted to create (e.g., file or directory)\nalready exists.\n\nHTTP Mapping: 409 Conflict\n"
  example: []
  syntax:
    content: >-
      [OriginalName("ALREADY_EXISTS")]

      AlreadyExists = 6
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("ALREADY_EXISTS")>

      AlreadyExists = 6
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ALREADY_EXISTS
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.PermissionDenied
  commentId: F:Google.Rpc.Code.PermissionDenied
  id: PermissionDenied
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: PermissionDenied
  nameWithType: Code.PermissionDenied
  fullName: Google.Rpc.Code.PermissionDenied
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: PermissionDenied
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 132
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe caller does not have permission to execute the specified\noperation. `PERMISSION_DENIED` must not be used for rejections\ncaused by exhausting some resource (use `RESOURCE_EXHAUSTED`\ninstead for those errors). `PERMISSION_DENIED` must not be\nused if the caller can not be identified (use `UNAUTHENTICATED`\ninstead for those errors). This error code does not imply the\nrequest is valid or the requested entity exists or satisfies\nother pre-conditions.\n\nHTTP Mapping: 403 Forbidden\n"
  example: []
  syntax:
    content: >-
      [OriginalName("PERMISSION_DENIED")]

      PermissionDenied = 7
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("PERMISSION_DENIED")>

      PermissionDenied = 7
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: PERMISSION_DENIED
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.Unauthenticated
  commentId: F:Google.Rpc.Code.Unauthenticated
  id: Unauthenticated
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Unauthenticated
  nameWithType: Code.Unauthenticated
  fullName: Google.Rpc.Code.Unauthenticated
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Unauthenticated
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 139
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe request does not have valid authentication credentials for the\noperation.\n\nHTTP Mapping: 401 Unauthorized\n"
  example: []
  syntax:
    content: >-
      [OriginalName("UNAUTHENTICATED")]

      Unauthenticated = 16
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("UNAUTHENTICATED")>

      Unauthenticated = 16
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: UNAUTHENTICATED
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.ResourceExhausted
  commentId: F:Google.Rpc.Code.ResourceExhausted
  id: ResourceExhausted
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: ResourceExhausted
  nameWithType: Code.ResourceExhausted
  fullName: Google.Rpc.Code.ResourceExhausted
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: ResourceExhausted
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 146
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nSome resource has been exhausted, perhaps a per-user quota, or\nperhaps the entire file system is out of space.\n\nHTTP Mapping: 429 Too Many Requests\n"
  example: []
  syntax:
    content: >-
      [OriginalName("RESOURCE_EXHAUSTED")]

      ResourceExhausted = 8
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("RESOURCE_EXHAUSTED")>

      ResourceExhausted = 8
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: RESOURCE_EXHAUSTED
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.FailedPrecondition
  commentId: F:Google.Rpc.Code.FailedPrecondition
  id: FailedPrecondition
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: FailedPrecondition
  nameWithType: Code.FailedPrecondition
  fullName: Google.Rpc.Code.FailedPrecondition
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: FailedPrecondition
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 167
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe operation was rejected because the system is not in a state\nrequired for the operation&apos;s execution.  For example, the directory\nto be deleted is non-empty, an rmdir operation is applied to\na non-directory, etc.\n\nService implementors can use the following guidelines to decide\nbetween `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:\n(a) Use `UNAVAILABLE` if the client can retry just the failing call.\n(b) Use `ABORTED` if the client should retry at a higher level\n(e.g., when a client-specified test-and-set fails, indicating the\nclient should restart a read-modify-write sequence).\n(c) Use `FAILED_PRECONDITION` if the client should not retry until\nthe system state has been explicitly fixed.  E.g., if an &quot;rmdir&quot;\nfails because the directory is non-empty, `FAILED_PRECONDITION`\nshould be returned since the client should not retry unless\nthe files are deleted from the directory.\n\nHTTP Mapping: 400 Bad Request\n"
  example: []
  syntax:
    content: >-
      [OriginalName("FAILED_PRECONDITION")]

      FailedPrecondition = 9
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("FAILED_PRECONDITION")>

      FailedPrecondition = 9
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: FAILED_PRECONDITION
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.Aborted
  commentId: F:Google.Rpc.Code.Aborted
  id: Aborted
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Aborted
  nameWithType: Code.Aborted
  fullName: Google.Rpc.Code.Aborted
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Aborted
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 177
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe operation was aborted, typically due to a concurrency issue such as\na sequencer check failure or transaction abort.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 409 Conflict\n"
  example: []
  syntax:
    content: >-
      [OriginalName("ABORTED")]

      Aborted = 10
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("ABORTED")>

      Aborted = 10
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ABORTED
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.OutOfRange
  commentId: F:Google.Rpc.Code.OutOfRange
  id: OutOfRange
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: OutOfRange
  nameWithType: Code.OutOfRange
  fullName: Google.Rpc.Code.OutOfRange
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: OutOfRange
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 197
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe operation was attempted past the valid range.  E.g., seeking or\nreading past end-of-file.\n\nUnlike `INVALID_ARGUMENT`, this error indicates a problem that may\nbe fixed if the system state changes. For example, a 32-bit file\nsystem will generate `INVALID_ARGUMENT` if asked to read at an\noffset that is not in the range [0,2^32-1], but it will generate\n`OUT_OF_RANGE` if asked to read from an offset past the current\nfile size.\n\nThere is a fair bit of overlap between `FAILED_PRECONDITION` and\n`OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific\nerror) when it applies so that callers who are iterating through\na space can easily look for an `OUT_OF_RANGE` error to detect when\nthey are done.\n\nHTTP Mapping: 400 Bad Request\n"
  example: []
  syntax:
    content: >-
      [OriginalName("OUT_OF_RANGE")]

      OutOfRange = 11
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("OUT_OF_RANGE")>

      OutOfRange = 11
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: OUT_OF_RANGE
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.Unimplemented
  commentId: F:Google.Rpc.Code.Unimplemented
  id: Unimplemented
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Unimplemented
  nameWithType: Code.Unimplemented
  fullName: Google.Rpc.Code.Unimplemented
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Unimplemented
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 204
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe operation is not implemented or is not supported/enabled in this\nservice.\n\nHTTP Mapping: 501 Not Implemented\n"
  example: []
  syntax:
    content: >-
      [OriginalName("UNIMPLEMENTED")]

      Unimplemented = 12
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("UNIMPLEMENTED")>

      Unimplemented = 12
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: UNIMPLEMENTED
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.Internal
  commentId: F:Google.Rpc.Code.Internal
  id: Internal
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Internal
  nameWithType: Code.Internal
  fullName: Google.Rpc.Code.Internal
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Internal
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 212
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nInternal errors.  This means that some invariants expected by the\nunderlying system have been broken.  This error code is reserved\nfor serious errors.\n\nHTTP Mapping: 500 Internal Server Error\n"
  example: []
  syntax:
    content: >-
      [OriginalName("INTERNAL")]

      Internal = 13
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("INTERNAL")>

      Internal = 13
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: INTERNAL
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.Unavailable
  commentId: F:Google.Rpc.Code.Unavailable
  id: Unavailable
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: Unavailable
  nameWithType: Code.Unavailable
  fullName: Google.Rpc.Code.Unavailable
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: Unavailable
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 223
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nThe service is currently unavailable.  This is most likely a\ntransient condition, which can be corrected by retrying with\na backoff.\n\nSee the guidelines above for deciding between `FAILED_PRECONDITION`,\n`ABORTED`, and `UNAVAILABLE`.\n\nHTTP Mapping: 503 Service Unavailable\n"
  example: []
  syntax:
    content: >-
      [OriginalName("UNAVAILABLE")]

      Unavailable = 14
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("UNAVAILABLE")>

      Unavailable = 14
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: UNAVAILABLE
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Google.Rpc.Code.DataLoss
  commentId: F:Google.Rpc.Code.DataLoss
  id: DataLoss
  parent: Google.Rpc.Code
  langs:
  - csharp
  - vb
  name: DataLoss
  nameWithType: Code.DataLoss
  fullName: Google.Rpc.Code.DataLoss
  type: Field
  source:
    remote:
      path: src/Google.Api.CommonProtos/Rpc/Code.cs
      branch: master
      repo: https://github.com/googleapis/gax-dotnet
    id: DataLoss
    path: src/Google.Api.CommonProtos/Rpc/Code.cs
    startLine: 229
  assemblies:
  - Google.Api.CommonProtos
  namespace: Google.Rpc
  summary: "\nUnrecoverable data loss or corruption.\n\nHTTP Mapping: 500 Internal Server Error\n"
  example: []
  syntax:
    content: >-
      [OriginalName("DATA_LOSS")]

      DataLoss = 15
    return:
      type: Google.Rpc.Code
    content.vb: >-
      <OriginalName("DATA_LOSS")>

      DataLoss = 15
  attributes:
  - type: Google.Protobuf.Reflection.OriginalNameAttribute
    ctor: Google.Protobuf.Reflection.OriginalNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DATA_LOSS
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Google.Rpc
  commentId: N:Google.Rpc
  isExternal: false
  name: Google.Rpc
  nameWithType: Google.Rpc
  fullName: Google.Rpc
- uid: Google.Rpc.Code
  commentId: T:Google.Rpc.Code
  parent: Google.Rpc
  isExternal: false
  name: Code
  nameWithType: Code
  fullName: Google.Rpc.Code
