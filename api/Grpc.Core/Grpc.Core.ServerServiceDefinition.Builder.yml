### YamlMime:ManagedReference
items:
- uid: Grpc.Core.ServerServiceDefinition.Builder
  commentId: T:Grpc.Core.ServerServiceDefinition.Builder
  id: ServerServiceDefinition.Builder
  parent: Grpc.Core
  children:
  - Grpc.Core.ServerServiceDefinition.Builder.#ctor
  - Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ClientStreamingServerMethod{``0,``1})
  - Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  - Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ServerStreamingServerMethod{``0,``1})
  - Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.UnaryServerMethod{``0,``1})
  - Grpc.Core.ServerServiceDefinition.Builder.Build
  langs:
  - csharp
  - vb
  name: ServerServiceDefinition.Builder
  nameWithType: ServerServiceDefinition.Builder
  fullName: Grpc.Core.ServerServiceDefinition.Builder
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Builder
    path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
    startLine: 60
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nBuilder class for <xref href=\"Grpc.Core.ServerServiceDefinition\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class Builder
    content.vb: Public Class Builder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Grpc.Core.ServerServiceDefinition.Builder.#ctor
  commentId: M:Grpc.Core.ServerServiceDefinition.Builder.#ctor
  id: '#ctor'
  parent: Grpc.Core.ServerServiceDefinition.Builder
  langs:
  - csharp
  - vb
  name: Builder()
  nameWithType: ServerServiceDefinition.Builder.Builder()
  fullName: Grpc.Core.ServerServiceDefinition.Builder.Builder()
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
    startLine: 70
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nCreates a new instance of builder.\n"
  example: []
  syntax:
    content: public Builder()
    content.vb: Public Sub New
  overload: Grpc.Core.ServerServiceDefinition.Builder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.UnaryServerMethod{``0,``1})
  commentId: M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.UnaryServerMethod{``0,``1})
  id: AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.UnaryServerMethod{``0,``1})
  parent: Grpc.Core.ServerServiceDefinition.Builder
  langs:
  - csharp
  - vb
  name: AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, UnaryServerMethod<TRequest, TResponse>)
  nameWithType: ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, UnaryServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, Grpc.Core.UnaryServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AddMethod
    path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
    startLine: 82
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAdds a definition for a single request - single response method.\n"
  example: []
  syntax:
    content: >-
      public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, UnaryServerMethod<TRequest, TResponse> handler)
          where TRequest : class where TResponse : class
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
      description: The method.
    - id: handler
      type: Grpc.Core.UnaryServerMethod{{TRequest},{TResponse}}
      description: The method handler.
    typeParameters:
    - id: TRequest
      description: The request message class.
    - id: TResponse
      description: The response message class.
    return:
      type: Grpc.Core.ServerServiceDefinition.Builder
      description: This builder instance.
    content.vb: Public Function AddMethod(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), handler As UnaryServerMethod(Of TRequest, TResponse)) As ServerServiceDefinition.Builder
  overload: Grpc.Core.ServerServiceDefinition.Builder.AddMethod*
  nameWithType.vb: ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), UnaryServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), Grpc.Core.UnaryServerMethod(Of TRequest, TResponse))
  name.vb: AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), UnaryServerMethod(Of TRequest, TResponse))
- uid: Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ClientStreamingServerMethod{``0,``1})
  commentId: M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ClientStreamingServerMethod{``0,``1})
  id: AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ClientStreamingServerMethod{``0,``1})
  parent: Grpc.Core.ServerServiceDefinition.Builder
  langs:
  - csharp
  - vb
  name: AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ClientStreamingServerMethod<TRequest, TResponse>)
  nameWithType: ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ClientStreamingServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, Grpc.Core.ClientStreamingServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AddMethod
    path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
    startLine: 101
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAdds a definition for a client streaming method.\n"
  example: []
  syntax:
    content: >-
      public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ClientStreamingServerMethod<TRequest, TResponse> handler)
          where TRequest : class where TResponse : class
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
      description: The method.
    - id: handler
      type: Grpc.Core.ClientStreamingServerMethod{{TRequest},{TResponse}}
      description: The method handler.
    typeParameters:
    - id: TRequest
      description: The request message class.
    - id: TResponse
      description: The response message class.
    return:
      type: Grpc.Core.ServerServiceDefinition.Builder
      description: This builder instance.
    content.vb: Public Function AddMethod(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), handler As ClientStreamingServerMethod(Of TRequest, TResponse)) As ServerServiceDefinition.Builder
  overload: Grpc.Core.ServerServiceDefinition.Builder.AddMethod*
  nameWithType.vb: ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), ClientStreamingServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), Grpc.Core.ClientStreamingServerMethod(Of TRequest, TResponse))
  name.vb: AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), ClientStreamingServerMethod(Of TRequest, TResponse))
- uid: Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ServerStreamingServerMethod{``0,``1})
  commentId: M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ServerStreamingServerMethod{``0,``1})
  id: AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ServerStreamingServerMethod{``0,``1})
  parent: Grpc.Core.ServerServiceDefinition.Builder
  langs:
  - csharp
  - vb
  name: AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ServerStreamingServerMethod<TRequest, TResponse>)
  nameWithType: ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ServerStreamingServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, Grpc.Core.ServerStreamingServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AddMethod
    path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
    startLine: 120
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAdds a definition for a server streaming method.\n"
  example: []
  syntax:
    content: >-
      public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ServerStreamingServerMethod<TRequest, TResponse> handler)
          where TRequest : class where TResponse : class
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
      description: The method.
    - id: handler
      type: Grpc.Core.ServerStreamingServerMethod{{TRequest},{TResponse}}
      description: The method handler.
    typeParameters:
    - id: TRequest
      description: The request message class.
    - id: TResponse
      description: The response message class.
    return:
      type: Grpc.Core.ServerServiceDefinition.Builder
      description: This builder instance.
    content.vb: Public Function AddMethod(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), handler As ServerStreamingServerMethod(Of TRequest, TResponse)) As ServerServiceDefinition.Builder
  overload: Grpc.Core.ServerServiceDefinition.Builder.AddMethod*
  nameWithType.vb: ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), ServerStreamingServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), Grpc.Core.ServerStreamingServerMethod(Of TRequest, TResponse))
  name.vb: AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), ServerStreamingServerMethod(Of TRequest, TResponse))
- uid: Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  commentId: M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  id: AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  parent: Grpc.Core.ServerServiceDefinition.Builder
  langs:
  - csharp
  - vb
  name: AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, DuplexStreamingServerMethod<TRequest, TResponse>)
  nameWithType: ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, DuplexStreamingServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.ServerServiceDefinition.Builder.AddMethod<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, Grpc.Core.DuplexStreamingServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AddMethod
    path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
    startLine: 139
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAdds a definition for a bidirectional streaming method.\n"
  example: []
  syntax:
    content: >-
      public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, DuplexStreamingServerMethod<TRequest, TResponse> handler)
          where TRequest : class where TResponse : class
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
      description: The method.
    - id: handler
      type: Grpc.Core.DuplexStreamingServerMethod{{TRequest},{TResponse}}
      description: The method handler.
    typeParameters:
    - id: TRequest
      description: The request message class.
    - id: TResponse
      description: The response message class.
    return:
      type: Grpc.Core.ServerServiceDefinition.Builder
      description: This builder instance.
    content.vb: Public Function AddMethod(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), handler As DuplexStreamingServerMethod(Of TRequest, TResponse)) As ServerServiceDefinition.Builder
  overload: Grpc.Core.ServerServiceDefinition.Builder.AddMethod*
  nameWithType.vb: ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), DuplexStreamingServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.ServerServiceDefinition.Builder.AddMethod(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), Grpc.Core.DuplexStreamingServerMethod(Of TRequest, TResponse))
  name.vb: AddMethod(Of TRequest, TResponse)(Method(Of TRequest, TResponse), DuplexStreamingServerMethod(Of TRequest, TResponse))
- uid: Grpc.Core.ServerServiceDefinition.Builder.Build
  commentId: M:Grpc.Core.ServerServiceDefinition.Builder.Build
  id: Build
  parent: Grpc.Core.ServerServiceDefinition.Builder
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: ServerServiceDefinition.Builder.Build()
  fullName: Grpc.Core.ServerServiceDefinition.Builder.Build()
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Build
    path: src/csharp/Grpc.Core.Api/ServerServiceDefinition.cs
    startLine: 154
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nCreates an immutable <code>ServerServiceDefinition</code> from this builder.\n"
  example: []
  syntax:
    content: public ServerServiceDefinition Build()
    return:
      type: Grpc.Core.ServerServiceDefinition
      description: The <code>ServerServiceDefinition</code> object.
    content.vb: Public Function Build As ServerServiceDefinition
  overload: Grpc.Core.ServerServiceDefinition.Builder.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Grpc.Core.ServerServiceDefinition
  commentId: T:Grpc.Core.ServerServiceDefinition
  parent: Grpc.Core
  name: ServerServiceDefinition
  nameWithType: ServerServiceDefinition
  fullName: Grpc.Core.ServerServiceDefinition
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.ServerServiceDefinition.Builder.#ctor*
  commentId: Overload:Grpc.Core.ServerServiceDefinition.Builder.#ctor
  name: Builder
  nameWithType: ServerServiceDefinition.Builder.Builder
  fullName: Grpc.Core.ServerServiceDefinition.Builder.Builder
- uid: Grpc.Core.ServerServiceDefinition.Builder.AddMethod*
  commentId: Overload:Grpc.Core.ServerServiceDefinition.Builder.AddMethod
  name: AddMethod
  nameWithType: ServerServiceDefinition.Builder.AddMethod
  fullName: Grpc.Core.ServerServiceDefinition.Builder.AddMethod
- uid: Grpc.Core.Method{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Method{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.Method`2
  name: Method<TRequest, TResponse>
  nameWithType: Method<TRequest, TResponse>
  fullName: Grpc.Core.Method<TRequest, TResponse>
  nameWithType.vb: Method(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse)
  name.vb: Method(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.UnaryServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.UnaryServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.UnaryServerMethod`2
  name: UnaryServerMethod<TRequest, TResponse>
  nameWithType: UnaryServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.UnaryServerMethod<TRequest, TResponse>
  nameWithType.vb: UnaryServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.UnaryServerMethod(Of TRequest, TResponse)
  name.vb: UnaryServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ServerServiceDefinition.Builder
  commentId: T:Grpc.Core.ServerServiceDefinition.Builder
  parent: Grpc.Core
  name: ServerServiceDefinition.Builder
  nameWithType: ServerServiceDefinition.Builder
  fullName: Grpc.Core.ServerServiceDefinition.Builder
- uid: Grpc.Core.Method`2
  commentId: T:Grpc.Core.Method`2
  name: Method<TRequest, TResponse>
  nameWithType: Method<TRequest, TResponse>
  fullName: Grpc.Core.Method<TRequest, TResponse>
  nameWithType.vb: Method(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse)
  name.vb: Method(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.UnaryServerMethod`2
  commentId: T:Grpc.Core.UnaryServerMethod`2
  name: UnaryServerMethod<TRequest, TResponse>
  nameWithType: UnaryServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.UnaryServerMethod<TRequest, TResponse>
  nameWithType.vb: UnaryServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.UnaryServerMethod(Of TRequest, TResponse)
  name.vb: UnaryServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ClientStreamingServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.ClientStreamingServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.ClientStreamingServerMethod`2
  name: ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType: ClientStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ClientStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ClientStreamingServerMethod`2
  commentId: T:Grpc.Core.ClientStreamingServerMethod`2
  name: ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType: ClientStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ClientStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ServerStreamingServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.ServerStreamingServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.ServerStreamingServerMethod`2
  name: ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType: ServerStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ServerStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ServerStreamingServerMethod`2
  commentId: T:Grpc.Core.ServerStreamingServerMethod`2
  name: ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType: ServerStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ServerStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.DuplexStreamingServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.DuplexStreamingServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.DuplexStreamingServerMethod`2
  name: DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType: DuplexStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.DuplexStreamingServerMethod(Of TRequest, TResponse)
  name.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.DuplexStreamingServerMethod`2
  commentId: T:Grpc.Core.DuplexStreamingServerMethod`2
  name: DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType: DuplexStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.DuplexStreamingServerMethod(Of TRequest, TResponse)
  name.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ServerServiceDefinition.Builder.Build*
  commentId: Overload:Grpc.Core.ServerServiceDefinition.Builder.Build
  name: Build
  nameWithType: ServerServiceDefinition.Builder.Build
  fullName: Grpc.Core.ServerServiceDefinition.Builder.Build
