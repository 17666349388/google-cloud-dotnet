### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Method`2
  commentId: T:Grpc.Core.Method`2
  id: Method`2
  parent: Grpc.Core
  children:
  - Grpc.Core.Method`2.#ctor(Grpc.Core.MethodType,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1})
  - Grpc.Core.Method`2.FullName
  - Grpc.Core.Method`2.Name
  - Grpc.Core.Method`2.RequestMarshaller
  - Grpc.Core.Method`2.ResponseMarshaller
  - Grpc.Core.Method`2.ServiceName
  - Grpc.Core.Method`2.Type
  langs:
  - csharp
  - vb
  name: Method<TRequest, TResponse>
  nameWithType: Method<TRequest, TResponse>
  fullName: Grpc.Core.Method<TRequest, TResponse>
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: Method
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 88
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nA description of a remote method.\n"
  example: []
  syntax:
    content: 'public class Method<TRequest, TResponse> : IMethod'
    typeParameters:
    - id: TRequest
      description: Request message type for this method.
    - id: TResponse
      description: Response message type for this method.
    content.vb: >-
      Public Class Method(Of TRequest, TResponse)
          Implements IMethod
  inheritance:
  - System.Object
  implements:
  - Grpc.Core.IMethod
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Method(Of TRequest, TResponse)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse)
  name.vb: Method(Of TRequest, TResponse)
- uid: Grpc.Core.Method`2.#ctor(Grpc.Core.MethodType,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1})
  commentId: M:Grpc.Core.Method`2.#ctor(Grpc.Core.MethodType,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1})
  id: '#ctor(Grpc.Core.MethodType,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1})'
  parent: Grpc.Core.Method`2
  langs:
  - csharp
  - vb
  name: Method(MethodType, String, String, Marshaller<TRequest>, Marshaller<TResponse>)
  nameWithType: Method<TRequest, TResponse>.Method(MethodType, String, String, Marshaller<TRequest>, Marshaller<TResponse>)
  fullName: Grpc.Core.Method<TRequest, TResponse>.Method(Grpc.Core.MethodType, System.String, System.String, Grpc.Core.Marshaller<TRequest>, Grpc.Core.Marshaller<TResponse>)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 105
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of the <code>Method</code> class.\n"
  example: []
  syntax:
    content: public Method(MethodType type, string serviceName, string name, Marshaller<TRequest> requestMarshaller, Marshaller<TResponse> responseMarshaller)
    parameters:
    - id: type
      type: Grpc.Core.MethodType
      description: Type of method.
    - id: serviceName
      type: System.String
      description: Name of service this method belongs to.
    - id: name
      type: System.String
      description: Unqualified name of the method.
    - id: requestMarshaller
      type: Grpc.Core.Marshaller{{TRequest}}
      description: Marshaller used for request messages.
    - id: responseMarshaller
      type: Grpc.Core.Marshaller{{TResponse}}
      description: Marshaller used for response messages.
    content.vb: Public Sub New(type As MethodType, serviceName As String, name As String, requestMarshaller As Marshaller(Of TRequest), responseMarshaller As Marshaller(Of TResponse))
  overload: Grpc.Core.Method`2.#ctor*
  nameWithType.vb: Method(Of TRequest, TResponse).Method(MethodType, String, String, Marshaller(Of TRequest), Marshaller(Of TResponse))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).Method(Grpc.Core.MethodType, System.String, System.String, Grpc.Core.Marshaller(Of TRequest), Grpc.Core.Marshaller(Of TResponse))
  name.vb: Method(MethodType, String, String, Marshaller(Of TRequest), Marshaller(Of TResponse))
- uid: Grpc.Core.Method`2.Type
  commentId: P:Grpc.Core.Method`2.Type
  id: Type
  parent: Grpc.Core.Method`2
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Method<TRequest, TResponse>.Type
  fullName: Grpc.Core.Method<TRequest, TResponse>.Type
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: Type
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 118
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the type of the method.\n"
  example: []
  syntax:
    content: public MethodType Type { get; }
    parameters: []
    return:
      type: Grpc.Core.MethodType
    content.vb: Public ReadOnly Property Type As MethodType
  overload: Grpc.Core.Method`2.Type*
  implements:
  - Grpc.Core.IMethod.Type
  nameWithType.vb: Method(Of TRequest, TResponse).Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).Type
- uid: Grpc.Core.Method`2.ServiceName
  commentId: P:Grpc.Core.Method`2.ServiceName
  id: ServiceName
  parent: Grpc.Core.Method`2
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: Method<TRequest, TResponse>.ServiceName
  fullName: Grpc.Core.Method<TRequest, TResponse>.ServiceName
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: ServiceName
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 129
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the name of the service to which this method belongs.\n"
  example: []
  syntax:
    content: public string ServiceName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ServiceName As String
  overload: Grpc.Core.Method`2.ServiceName*
  implements:
  - Grpc.Core.IMethod.ServiceName
  nameWithType.vb: Method(Of TRequest, TResponse).ServiceName
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).ServiceName
- uid: Grpc.Core.Method`2.Name
  commentId: P:Grpc.Core.Method`2.Name
  id: Name
  parent: Grpc.Core.Method`2
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Method<TRequest, TResponse>.Name
  fullName: Grpc.Core.Method<TRequest, TResponse>.Name
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: Name
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 140
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the unqualified name of the method.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Grpc.Core.Method`2.Name*
  implements:
  - Grpc.Core.IMethod.Name
  nameWithType.vb: Method(Of TRequest, TResponse).Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).Name
- uid: Grpc.Core.Method`2.RequestMarshaller
  commentId: P:Grpc.Core.Method`2.RequestMarshaller
  id: RequestMarshaller
  parent: Grpc.Core.Method`2
  langs:
  - csharp
  - vb
  name: RequestMarshaller
  nameWithType: Method<TRequest, TResponse>.RequestMarshaller
  fullName: Grpc.Core.Method<TRequest, TResponse>.RequestMarshaller
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: RequestMarshaller
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 151
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the marshaller used for request messages.\n"
  example: []
  syntax:
    content: public Marshaller<TRequest> RequestMarshaller { get; }
    parameters: []
    return:
      type: Grpc.Core.Marshaller{{TRequest}}
    content.vb: Public ReadOnly Property RequestMarshaller As Marshaller(Of TRequest)
  overload: Grpc.Core.Method`2.RequestMarshaller*
  nameWithType.vb: Method(Of TRequest, TResponse).RequestMarshaller
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).RequestMarshaller
- uid: Grpc.Core.Method`2.ResponseMarshaller
  commentId: P:Grpc.Core.Method`2.ResponseMarshaller
  id: ResponseMarshaller
  parent: Grpc.Core.Method`2
  langs:
  - csharp
  - vb
  name: ResponseMarshaller
  nameWithType: Method<TRequest, TResponse>.ResponseMarshaller
  fullName: Grpc.Core.Method<TRequest, TResponse>.ResponseMarshaller
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: ResponseMarshaller
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 162
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the marshaller used for response messages.\n"
  example: []
  syntax:
    content: public Marshaller<TResponse> ResponseMarshaller { get; }
    parameters: []
    return:
      type: Grpc.Core.Marshaller{{TResponse}}
    content.vb: Public ReadOnly Property ResponseMarshaller As Marshaller(Of TResponse)
  overload: Grpc.Core.Method`2.ResponseMarshaller*
  nameWithType.vb: Method(Of TRequest, TResponse).ResponseMarshaller
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).ResponseMarshaller
- uid: Grpc.Core.Method`2.FullName
  commentId: P:Grpc.Core.Method`2.FullName
  id: FullName
  parent: Grpc.Core.Method`2
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: Method<TRequest, TResponse>.FullName
  fullName: Grpc.Core.Method<TRequest, TResponse>.FullName
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Method.cs
      branch: v1.2.x
      repo: https://github.com/grpc/grpc
    id: FullName
    path: src/csharp/Grpc.Core/Method.cs
    startLine: 174
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the fully qualified name of the method. On the server side, methods are dispatched\nbased on this name.\n"
  example: []
  syntax:
    content: public string FullName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FullName As String
  overload: Grpc.Core.Method`2.FullName*
  implements:
  - Grpc.Core.IMethod.FullName
  nameWithType.vb: Method(Of TRequest, TResponse).FullName
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).FullName
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Grpc.Core.IMethod
  commentId: T:Grpc.Core.IMethod
  parent: Grpc.Core
  isExternal: false
  name: IMethod
  nameWithType: IMethod
  fullName: Grpc.Core.IMethod
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.Method`2.#ctor*
  commentId: Overload:Grpc.Core.Method`2.#ctor
  isExternal: false
  name: Method
  nameWithType: Method<TRequest, TResponse>.Method
  fullName: Grpc.Core.Method<TRequest, TResponse>.Method
  nameWithType.vb: Method(Of TRequest, TResponse).Method
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).Method
- uid: Grpc.Core.MethodType
  commentId: T:Grpc.Core.MethodType
  parent: Grpc.Core
  isExternal: false
  name: MethodType
  nameWithType: MethodType
  fullName: Grpc.Core.MethodType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Grpc.Core.Marshaller{{TRequest}}
  commentId: T:Grpc.Core.Marshaller{`0}
  parent: Grpc.Core
  definition: Grpc.Core.Marshaller`1
  name: Marshaller<TRequest>
  nameWithType: Marshaller<TRequest>
  fullName: Grpc.Core.Marshaller<TRequest>
  nameWithType.vb: Marshaller(Of TRequest)
  fullName.vb: Grpc.Core.Marshaller(Of TRequest)
  name.vb: Marshaller(Of TRequest)
  spec.csharp:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Marshaller{{TResponse}}
  commentId: T:Grpc.Core.Marshaller{`1}
  parent: Grpc.Core
  definition: Grpc.Core.Marshaller`1
  name: Marshaller<TResponse>
  nameWithType: Marshaller<TResponse>
  fullName: Grpc.Core.Marshaller<TResponse>
  nameWithType.vb: Marshaller(Of TResponse)
  fullName.vb: Grpc.Core.Marshaller(Of TResponse)
  name.vb: Marshaller(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Marshaller`1
  commentId: T:Grpc.Core.Marshaller`1
  isExternal: false
  name: Marshaller<T>
  nameWithType: Marshaller<T>
  fullName: Grpc.Core.Marshaller<T>
  nameWithType.vb: Marshaller(Of T)
  fullName.vb: Grpc.Core.Marshaller(Of T)
  name.vb: Marshaller(Of T)
  spec.csharp:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Method`2.Type*
  commentId: Overload:Grpc.Core.Method`2.Type
  isExternal: false
  name: Type
  nameWithType: Method<TRequest, TResponse>.Type
  fullName: Grpc.Core.Method<TRequest, TResponse>.Type
  nameWithType.vb: Method(Of TRequest, TResponse).Type
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).Type
- uid: Grpc.Core.IMethod.Type
  commentId: P:Grpc.Core.IMethod.Type
  parent: Grpc.Core.IMethod
  isExternal: false
  name: Type
  nameWithType: IMethod.Type
  fullName: Grpc.Core.IMethod.Type
- uid: Grpc.Core.Method`2.ServiceName*
  commentId: Overload:Grpc.Core.Method`2.ServiceName
  isExternal: false
  name: ServiceName
  nameWithType: Method<TRequest, TResponse>.ServiceName
  fullName: Grpc.Core.Method<TRequest, TResponse>.ServiceName
  nameWithType.vb: Method(Of TRequest, TResponse).ServiceName
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).ServiceName
- uid: Grpc.Core.IMethod.ServiceName
  commentId: P:Grpc.Core.IMethod.ServiceName
  parent: Grpc.Core.IMethod
  isExternal: false
  name: ServiceName
  nameWithType: IMethod.ServiceName
  fullName: Grpc.Core.IMethod.ServiceName
- uid: Grpc.Core.Method`2.Name*
  commentId: Overload:Grpc.Core.Method`2.Name
  isExternal: false
  name: Name
  nameWithType: Method<TRequest, TResponse>.Name
  fullName: Grpc.Core.Method<TRequest, TResponse>.Name
  nameWithType.vb: Method(Of TRequest, TResponse).Name
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).Name
- uid: Grpc.Core.IMethod.Name
  commentId: P:Grpc.Core.IMethod.Name
  parent: Grpc.Core.IMethod
  isExternal: false
  name: Name
  nameWithType: IMethod.Name
  fullName: Grpc.Core.IMethod.Name
- uid: Grpc.Core.Method`2.RequestMarshaller*
  commentId: Overload:Grpc.Core.Method`2.RequestMarshaller
  isExternal: false
  name: RequestMarshaller
  nameWithType: Method<TRequest, TResponse>.RequestMarshaller
  fullName: Grpc.Core.Method<TRequest, TResponse>.RequestMarshaller
  nameWithType.vb: Method(Of TRequest, TResponse).RequestMarshaller
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).RequestMarshaller
- uid: Grpc.Core.Method`2.ResponseMarshaller*
  commentId: Overload:Grpc.Core.Method`2.ResponseMarshaller
  isExternal: false
  name: ResponseMarshaller
  nameWithType: Method<TRequest, TResponse>.ResponseMarshaller
  fullName: Grpc.Core.Method<TRequest, TResponse>.ResponseMarshaller
  nameWithType.vb: Method(Of TRequest, TResponse).ResponseMarshaller
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).ResponseMarshaller
- uid: Grpc.Core.Method`2.FullName*
  commentId: Overload:Grpc.Core.Method`2.FullName
  isExternal: false
  name: FullName
  nameWithType: Method<TRequest, TResponse>.FullName
  fullName: Grpc.Core.Method<TRequest, TResponse>.FullName
  nameWithType.vb: Method(Of TRequest, TResponse).FullName
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse).FullName
- uid: Grpc.Core.IMethod.FullName
  commentId: P:Grpc.Core.IMethod.FullName
  parent: Grpc.Core.IMethod
  isExternal: false
  name: FullName
  nameWithType: IMethod.FullName
  fullName: Grpc.Core.IMethod.FullName
