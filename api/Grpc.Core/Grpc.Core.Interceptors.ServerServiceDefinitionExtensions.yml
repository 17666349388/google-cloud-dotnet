### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions
  commentId: T:Grpc.Core.Interceptors.ServerServiceDefinitionExtensions
  id: ServerServiceDefinitionExtensions
  parent: Grpc.Core.Interceptors
  children:
  - Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor)
  - Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor[])
  langs:
  - csharp
  - vb
  name: ServerServiceDefinitionExtensions
  nameWithType: ServerServiceDefinitionExtensions
  fullName: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/ServerServiceDefinitionExtensions.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: ServerServiceDefinitionExtensions
    path: src/csharp/Grpc.Core/Interceptors/ServerServiceDefinitionExtensions.cs
    startLine: 27
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nExtends the ServerServiceDefinition class to add methods used to register interceptors on the server side.\n"
  example: []
  syntax:
    content: public static class ServerServiceDefinitionExtensions
    content.vb: Public Module ServerServiceDefinitionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor)
  commentId: M:Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor)
  id: Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor)
  isExtensionMethod: true
  parent: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions
  langs:
  - csharp
  - vb
  name: Intercept(ServerServiceDefinition, Interceptor)
  nameWithType: ServerServiceDefinitionExtensions.Intercept(ServerServiceDefinition, Interceptor)
  fullName: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition, Grpc.Core.Interceptors.Interceptor)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/ServerServiceDefinitionExtensions.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Intercept
    path: src/csharp/Grpc.Core/Interceptors/ServerServiceDefinitionExtensions.cs
    startLine: 42
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nReturns a <xref href=\"Grpc.Core.ServerServiceDefinition\" data-throw-if-not-resolved=\"false\"></xref> instance that\nintercepts incoming calls to the underlying service handler through the given interceptor.\n"
  remarks: "\nMultiple interceptors can be added on top of each other by calling\n&quot;serverServiceDefinition.Intercept(a, b, c)&quot;.  The order of invocation will be &quot;a&quot;, &quot;b&quot;, and then &quot;c&quot;.\nInterceptors can be later added to an existing intercepted service definition, effectively\nbuilding a chain like &quot;serverServiceDefinition.Intercept(c).Intercept(b).Intercept(a)&quot;.  Note that\nin this case, the last interceptor added will be the first to take control.\n"
  example: []
  syntax:
    content: public static ServerServiceDefinition Intercept(this ServerServiceDefinition serverServiceDefinition, Interceptor interceptor)
    parameters:
    - id: serverServiceDefinition
      type: Grpc.Core.ServerServiceDefinition
      description: The <xref href="Grpc.Core.ServerServiceDefinition" data-throw-if-not-resolved="false"></xref> instance to register interceptors on.
    - id: interceptor
      type: Grpc.Core.Interceptors.Interceptor
      description: The interceptor to intercept the incoming invocations with.
    return:
      type: Grpc.Core.ServerServiceDefinition
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intercept(serverServiceDefinition As ServerServiceDefinition, interceptor As Interceptor) As ServerServiceDefinition
  overload: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor[])
  commentId: M:Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor[])
  id: Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor[])
  isExtensionMethod: true
  parent: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions
  langs:
  - csharp
  - vb
  name: Intercept(ServerServiceDefinition, Interceptor[])
  nameWithType: ServerServiceDefinitionExtensions.Intercept(ServerServiceDefinition, Interceptor[])
  fullName: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition, Grpc.Core.Interceptors.Interceptor[])
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/ServerServiceDefinitionExtensions.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Intercept
    path: src/csharp/Grpc.Core/Interceptors/ServerServiceDefinitionExtensions.cs
    startLine: 68
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nReturns a <xref href=\"Grpc.Core.ServerServiceDefinition\" data-throw-if-not-resolved=\"false\"></xref> instance that\nintercepts incoming calls to the underlying service handler through the given interceptors.\n"
  remarks: "\nMultiple interceptors can be added on top of each other by calling\n&quot;serverServiceDefinition.Intercept(a, b, c)&quot;.  The order of invocation will be &quot;a&quot;, &quot;b&quot;, and then &quot;c&quot;.\nInterceptors can be later added to an existing intercepted service definition, effectively\nbuilding a chain like &quot;serverServiceDefinition.Intercept(c).Intercept(b).Intercept(a)&quot;.  Note that\nin this case, the last interceptor added will be the first to take control.\n"
  example: []
  syntax:
    content: public static ServerServiceDefinition Intercept(this ServerServiceDefinition serverServiceDefinition, params Interceptor[] interceptors)
    parameters:
    - id: serverServiceDefinition
      type: Grpc.Core.ServerServiceDefinition
      description: The <xref href="Grpc.Core.ServerServiceDefinition" data-throw-if-not-resolved="false"></xref> instance to register interceptors on.
    - id: interceptors
      type: Grpc.Core.Interceptors.Interceptor[]
      description: "\nAn array of interceptors to intercept the incoming invocations with.\nControl is passed to the interceptors in the order specified.\n"
    return:
      type: Grpc.Core.ServerServiceDefinition
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intercept(serverServiceDefinition As ServerServiceDefinition, ParamArray interceptors As Interceptor()) As ServerServiceDefinition
  overload: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept*
  nameWithType.vb: ServerServiceDefinitionExtensions.Intercept(ServerServiceDefinition, Interceptor())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition, Grpc.Core.Interceptors.Interceptor())
  name.vb: Intercept(ServerServiceDefinition, Interceptor())
references:
- uid: Grpc.Core.Interceptors
  commentId: N:Grpc.Core.Interceptors
  name: Grpc.Core.Interceptors
  nameWithType: Grpc.Core.Interceptors
  fullName: Grpc.Core.Interceptors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.ServerServiceDefinition
  commentId: T:Grpc.Core.ServerServiceDefinition
  parent: Grpc.Core
  name: ServerServiceDefinition
  nameWithType: ServerServiceDefinition
  fullName: Grpc.Core.ServerServiceDefinition
- uid: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept*
  commentId: Overload:Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept
  name: Intercept
  nameWithType: ServerServiceDefinitionExtensions.Intercept
  fullName: Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept
- uid: Grpc.Core.Interceptors.Interceptor
  commentId: T:Grpc.Core.Interceptors.Interceptor
  parent: Grpc.Core.Interceptors
  name: Interceptor
  nameWithType: Interceptor
  fullName: Grpc.Core.Interceptors.Interceptor
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: Grpc.Core.Interceptors.Interceptor[]
  isExternal: true
  name: Interceptor[]
  nameWithType: Interceptor[]
  fullName: Grpc.Core.Interceptors.Interceptor[]
  nameWithType.vb: Interceptor()
  fullName.vb: Grpc.Core.Interceptors.Interceptor()
  name.vb: Interceptor()
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor
    name: Interceptor
    nameWithType: Interceptor
    fullName: Grpc.Core.Interceptors.Interceptor
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor
    name: Interceptor
    nameWithType: Interceptor
    fullName: Grpc.Core.Interceptors.Interceptor
  - name: ()
    nameWithType: ()
    fullName: ()
