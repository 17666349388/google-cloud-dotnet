### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
  id: Interceptor.AsyncServerStreamingCallContinuation`2
  parent: Grpc.Core.Interceptors
  children: []
  langs:
  - csharp
  - vb
  name: Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  type: Delegate
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Interceptors/Interceptor.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AsyncServerStreamingCallContinuation
    path: src/csharp/Grpc.Core.Api/Interceptors/Interceptor.cs
    startLine: 103
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core.Interceptors
  summary: "\nRepresents a continuation for intercepting asynchronous server-streaming invocations.\nA delegate of this type is passed to the AsyncServerStreamingCall method\nwhen an outgoing invocation is being intercepted and calling the\ndelegate will invoke the next interceptor in the chain, or the underlying\ncall invoker if called from the last interceptor. The interceptor is\nallowed to call it zero, one, or multiple times, passing it the appropriate\nrequest value and context as it sees fit.\n"
  example: []
  syntax:
    content: >-
      public delegate AsyncServerStreamingCall<TResponse> AsyncServerStreamingCallContinuation<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context)
          where TRequest : class where TResponse : class;
    parameters:
    - id: request
      type: '{TRequest}'
      description: The request value to continue the invocation with.
    - id: context
      type: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
      description: "\nThe <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\ninstance to pass to the next step in the invocation process.\n"
    typeParameters:
    - id: TRequest
      description: Request message type for this invocation.
    - id: TResponse
      description: Response message type for this invocation.
    return:
      type: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
      description: "\nAn instance of <xref href=\"Grpc.Core.AsyncServerStreamingCall%601\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting an asynchronous invocation of a server-streaming RPC.\nThe interceptor can choose to return the same object returned from\nthe continuation delegate or an arbitrarily constructed instance as it sees fit.\n"
    content.vb: Public Delegate Function AsyncServerStreamingCallContinuation(Of TRequest As Class, TResponse As Class)(request As TRequest, context As ClientInterceptorContext(Of TRequest, TResponse)) As AsyncServerStreamingCall(Of TResponse)
  nameWithType.vb: Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
references:
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext`2
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncServerStreamingCall`1
  commentId: T:Grpc.Core.AsyncServerStreamingCall`1
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors
  commentId: N:Grpc.Core.Interceptors
  name: Grpc.Core.Interceptors
  nameWithType: Grpc.Core.Interceptors
  fullName: Grpc.Core.Interceptors
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.ClientInterceptorContext`2
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
  commentId: T:Grpc.Core.AsyncServerStreamingCall{``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncServerStreamingCall`1
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
