### YamlMime:ManagedReference
items:
- uid: Grpc.Core.ServerPort
  commentId: T:Grpc.Core.ServerPort
  id: ServerPort
  parent: Grpc.Core
  children:
  - Grpc.Core.ServerPort.#ctor(System.String,System.Int32,Grpc.Core.ServerCredentials)
  - Grpc.Core.ServerPort.BoundPort
  - Grpc.Core.ServerPort.Credentials
  - Grpc.Core.ServerPort.Host
  - Grpc.Core.ServerPort.PickUnused
  - Grpc.Core.ServerPort.Port
  langs:
  - csharp
  - vb
  name: ServerPort
  nameWithType: ServerPort
  fullName: Grpc.Core.ServerPort
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerPort.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: ServerPort
    path: src/csharp/Grpc.Core/ServerPort.cs
    startLine: 27
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nA port exposed by a server.\n"
  example: []
  syntax:
    content: public class ServerPort
    content.vb: Public Class ServerPort
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Grpc.Core.ServerPort.PickUnused
  commentId: F:Grpc.Core.ServerPort.PickUnused
  id: PickUnused
  parent: Grpc.Core.ServerPort
  langs:
  - csharp
  - vb
  name: PickUnused
  nameWithType: ServerPort.PickUnused
  fullName: Grpc.Core.ServerPort.PickUnused
  type: Field
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerPort.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: PickUnused
    path: src/csharp/Grpc.Core/ServerPort.cs
    startLine: 33
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nPass this value as port to have the server choose an unused listening port for you.\nPorts added to a server will contain the bound port in their <xref href=\"Grpc.Core.ServerPort.BoundPort\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  example: []
  syntax:
    content: public const int PickUnused = 0
    return:
      type: System.Int32
    content.vb: Public Const PickUnused As Integer = 0
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Grpc.Core.ServerPort.#ctor(System.String,System.Int32,Grpc.Core.ServerCredentials)
  commentId: M:Grpc.Core.ServerPort.#ctor(System.String,System.Int32,Grpc.Core.ServerCredentials)
  id: '#ctor(System.String,System.Int32,Grpc.Core.ServerCredentials)'
  parent: Grpc.Core.ServerPort
  langs:
  - csharp
  - vb
  name: ServerPort(String, Int32, ServerCredentials)
  nameWithType: ServerPort.ServerPort(String, Int32, ServerCredentials)
  fullName: Grpc.Core.ServerPort.ServerPort(System.String, System.Int32, Grpc.Core.ServerCredentials)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerPort.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ServerPort.cs
    startLine: 47
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates a new port on which server should listen.\n"
  example: []
  syntax:
    content: public ServerPort(string host, int port, ServerCredentials credentials)
    parameters:
    - id: host
      type: System.String
      description: the host
    - id: port
      type: System.Int32
      description: the port. If zero, an unused port is chosen automatically.
    - id: credentials
      type: Grpc.Core.ServerCredentials
      description: credentials to use to secure this port.
    content.vb: Public Sub New(host As String, port As Integer, credentials As ServerCredentials)
  overload: Grpc.Core.ServerPort.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.ServerPort.Host
  commentId: P:Grpc.Core.ServerPort.Host
  id: Host
  parent: Grpc.Core.ServerPort
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: ServerPort.Host
  fullName: Grpc.Core.ServerPort.Host
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerPort.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Host
    path: src/csharp/Grpc.Core/ServerPort.cs
    startLine: 66
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  example: []
  syntax:
    content: public string Host { get; }
    parameters: []
    return:
      type: System.String
      description: The host.
    content.vb: Public ReadOnly Property Host As String
  overload: Grpc.Core.ServerPort.Host*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.ServerPort.Port
  commentId: P:Grpc.Core.ServerPort.Port
  id: Port
  parent: Grpc.Core.ServerPort
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: ServerPort.Port
  fullName: Grpc.Core.ServerPort.Port
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerPort.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Port
    path: src/csharp/Grpc.Core/ServerPort.cs
    startLine: 75
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  example: []
  syntax:
    content: public int Port { get; }
    parameters: []
    return:
      type: System.Int32
      description: The port.
    content.vb: Public ReadOnly Property Port As Integer
  overload: Grpc.Core.ServerPort.Port*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.ServerPort.Credentials
  commentId: P:Grpc.Core.ServerPort.Credentials
  id: Credentials
  parent: Grpc.Core.ServerPort
  langs:
  - csharp
  - vb
  name: Credentials
  nameWithType: ServerPort.Credentials
  fullName: Grpc.Core.ServerPort.Credentials
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerPort.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Credentials
    path: src/csharp/Grpc.Core/ServerPort.cs
    startLine: 84
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  example: []
  syntax:
    content: public ServerCredentials Credentials { get; }
    parameters: []
    return:
      type: Grpc.Core.ServerCredentials
      description: The server credentials.
    content.vb: Public ReadOnly Property Credentials As ServerCredentials
  overload: Grpc.Core.ServerPort.Credentials*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.ServerPort.BoundPort
  commentId: P:Grpc.Core.ServerPort.BoundPort
  id: BoundPort
  parent: Grpc.Core.ServerPort
  langs:
  - csharp
  - vb
  name: BoundPort
  nameWithType: ServerPort.BoundPort
  fullName: Grpc.Core.ServerPort.BoundPort
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerPort.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: BoundPort
    path: src/csharp/Grpc.Core/ServerPort.cs
    startLine: 96
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  example: []
  syntax:
    content: public int BoundPort { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe port actually bound by the server. This is useful if you let server\npick port automatically. <xref href=\"Grpc.Core.ServerPort.PickUnused\" data-throw-if-not-resolved=\"false\"></xref>\n"
    content.vb: Public ReadOnly Property BoundPort As Integer
  overload: Grpc.Core.ServerPort.BoundPort*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.ServerPort.BoundPort
  commentId: P:Grpc.Core.ServerPort.BoundPort
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Grpc.Core.ServerPort.#ctor*
  commentId: Overload:Grpc.Core.ServerPort.#ctor
  isExternal: false
  name: ServerPort
  nameWithType: ServerPort.ServerPort
  fullName: Grpc.Core.ServerPort.ServerPort
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Grpc.Core.ServerCredentials
  commentId: T:Grpc.Core.ServerCredentials
  parent: Grpc.Core
  isExternal: false
  name: ServerCredentials
  nameWithType: ServerCredentials
  fullName: Grpc.Core.ServerCredentials
- uid: Grpc.Core.ServerPort.Host*
  commentId: Overload:Grpc.Core.ServerPort.Host
  isExternal: false
  name: Host
  nameWithType: ServerPort.Host
  fullName: Grpc.Core.ServerPort.Host
- uid: Grpc.Core.ServerPort.Port*
  commentId: Overload:Grpc.Core.ServerPort.Port
  isExternal: false
  name: Port
  nameWithType: ServerPort.Port
  fullName: Grpc.Core.ServerPort.Port
- uid: Grpc.Core.ServerPort.Credentials*
  commentId: Overload:Grpc.Core.ServerPort.Credentials
  isExternal: false
  name: Credentials
  nameWithType: ServerPort.Credentials
  fullName: Grpc.Core.ServerPort.Credentials
- uid: Grpc.Core.ServerPort.PickUnused
  commentId: F:Grpc.Core.ServerPort.PickUnused
- uid: Grpc.Core.ServerPort.BoundPort*
  commentId: Overload:Grpc.Core.ServerPort.BoundPort
  isExternal: false
  name: BoundPort
  nameWithType: ServerPort.BoundPort
  fullName: Grpc.Core.ServerPort.BoundPort
