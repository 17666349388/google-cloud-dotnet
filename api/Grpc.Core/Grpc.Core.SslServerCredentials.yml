### YamlMime:ManagedReference
items:
- uid: Grpc.Core.SslServerCredentials
  commentId: T:Grpc.Core.SslServerCredentials
  id: SslServerCredentials
  parent: Grpc.Core
  children:
  - Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair})
  - Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair},System.String,System.Boolean)
  - Grpc.Core.SslServerCredentials.ForceClientAuthentication
  - Grpc.Core.SslServerCredentials.KeyCertificatePairs
  - Grpc.Core.SslServerCredentials.RootCertificates
  langs:
  - csharp
  - vb
  name: SslServerCredentials
  nameWithType: SslServerCredentials
  fullName: Grpc.Core.SslServerCredentials
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerCredentials.cs
      branch: v1.3.x
      repo: https://github.com/grpc/grpc
    id: SslServerCredentials
    path: src/csharp/Grpc.Core/ServerCredentials.cs
    startLine: 77
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nServer-side SSL credentials.\n"
  example: []
  syntax:
    content: 'public class SslServerCredentials : ServerCredentials'
    content.vb: >-
      Public Class SslServerCredentials
          Inherits ServerCredentials
  inheritance:
  - System.Object
  - Grpc.Core.ServerCredentials
  inheritedMembers:
  - Grpc.Core.ServerCredentials.Insecure
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair},System.String,System.Boolean)
  commentId: M:Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair},System.String,System.Boolean)
  id: '#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair},System.String,System.Boolean)'
  parent: Grpc.Core.SslServerCredentials
  langs:
  - csharp
  - vb
  name: SslServerCredentials(IEnumerable<KeyCertificatePair>, String, Boolean)
  nameWithType: SslServerCredentials.SslServerCredentials(IEnumerable<KeyCertificatePair>, String, Boolean)
  fullName: Grpc.Core.SslServerCredentials.SslServerCredentials(System.Collections.Generic.IEnumerable<Grpc.Core.KeyCertificatePair>, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerCredentials.cs
      branch: v1.3.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ServerCredentials.cs
    startLine: 89
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates server-side SSL credentials.\n"
  example: []
  syntax:
    content: public SslServerCredentials(IEnumerable<KeyCertificatePair> keyCertificatePairs, string rootCertificates, bool forceClientAuth)
    parameters:
    - id: keyCertificatePairs
      type: System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair}
      description: Key-certificates to use.
    - id: rootCertificates
      type: System.String
      description: PEM encoded client root certificates used to authenticate client.
    - id: forceClientAuth
      type: System.Boolean
      description: If true, client will be rejected unless it proves its unthenticity using against rootCertificates.
    content.vb: Public Sub New(keyCertificatePairs As IEnumerable(Of KeyCertificatePair), rootCertificates As String, forceClientAuth As Boolean)
  overload: Grpc.Core.SslServerCredentials.#ctor*
  nameWithType.vb: SslServerCredentials.SslServerCredentials(IEnumerable(Of KeyCertificatePair), String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.SslServerCredentials.SslServerCredentials(System.Collections.Generic.IEnumerable(Of Grpc.Core.KeyCertificatePair), System.String, System.Boolean)
  name.vb: SslServerCredentials(IEnumerable(Of KeyCertificatePair), String, Boolean)
- uid: Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair})
  commentId: M:Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair})
  id: '#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair})'
  parent: Grpc.Core.SslServerCredentials
  langs:
  - csharp
  - vb
  name: SslServerCredentials(IEnumerable<KeyCertificatePair>)
  nameWithType: SslServerCredentials.SslServerCredentials(IEnumerable<KeyCertificatePair>)
  fullName: Grpc.Core.SslServerCredentials.SslServerCredentials(System.Collections.Generic.IEnumerable<Grpc.Core.KeyCertificatePair>)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerCredentials.cs
      branch: v1.3.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ServerCredentials.cs
    startLine: 109
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates server-side SSL credentials.\nThis constructor should be use if you do not wish to autheticate client\nusing client root certificates.\n"
  example: []
  syntax:
    content: public SslServerCredentials(IEnumerable<KeyCertificatePair> keyCertificatePairs)
    parameters:
    - id: keyCertificatePairs
      type: System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair}
      description: Key-certificates to use.
    content.vb: Public Sub New(keyCertificatePairs As IEnumerable(Of KeyCertificatePair))
  overload: Grpc.Core.SslServerCredentials.#ctor*
  nameWithType.vb: SslServerCredentials.SslServerCredentials(IEnumerable(Of KeyCertificatePair))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.SslServerCredentials.SslServerCredentials(System.Collections.Generic.IEnumerable(Of Grpc.Core.KeyCertificatePair))
  name.vb: SslServerCredentials(IEnumerable(Of KeyCertificatePair))
- uid: Grpc.Core.SslServerCredentials.KeyCertificatePairs
  commentId: P:Grpc.Core.SslServerCredentials.KeyCertificatePairs
  id: KeyCertificatePairs
  parent: Grpc.Core.SslServerCredentials
  langs:
  - csharp
  - vb
  name: KeyCertificatePairs
  nameWithType: SslServerCredentials.KeyCertificatePairs
  fullName: Grpc.Core.SslServerCredentials.KeyCertificatePairs
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerCredentials.cs
      branch: v1.3.x
      repo: https://github.com/grpc/grpc
    id: KeyCertificatePairs
    path: src/csharp/Grpc.Core/ServerCredentials.cs
    startLine: 116
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nKey-certificate pairs.\n"
  example: []
  syntax:
    content: public IList<KeyCertificatePair> KeyCertificatePairs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Grpc.Core.KeyCertificatePair}
    content.vb: Public ReadOnly Property KeyCertificatePairs As IList(Of KeyCertificatePair)
  overload: Grpc.Core.SslServerCredentials.KeyCertificatePairs*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.SslServerCredentials.RootCertificates
  commentId: P:Grpc.Core.SslServerCredentials.RootCertificates
  id: RootCertificates
  parent: Grpc.Core.SslServerCredentials
  langs:
  - csharp
  - vb
  name: RootCertificates
  nameWithType: SslServerCredentials.RootCertificates
  fullName: Grpc.Core.SslServerCredentials.RootCertificates
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerCredentials.cs
      branch: v1.3.x
      repo: https://github.com/grpc/grpc
    id: RootCertificates
    path: src/csharp/Grpc.Core/ServerCredentials.cs
    startLine: 127
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nPEM encoded client root certificates.\n"
  example: []
  syntax:
    content: public string RootCertificates { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property RootCertificates As String
  overload: Grpc.Core.SslServerCredentials.RootCertificates*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.SslServerCredentials.ForceClientAuthentication
  commentId: P:Grpc.Core.SslServerCredentials.ForceClientAuthentication
  id: ForceClientAuthentication
  parent: Grpc.Core.SslServerCredentials
  langs:
  - csharp
  - vb
  name: ForceClientAuthentication
  nameWithType: SslServerCredentials.ForceClientAuthentication
  fullName: Grpc.Core.SslServerCredentials.ForceClientAuthentication
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ServerCredentials.cs
      branch: v1.3.x
      repo: https://github.com/grpc/grpc
    id: ForceClientAuthentication
    path: src/csharp/Grpc.Core/ServerCredentials.cs
    startLine: 138
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nIf true, the authenticity of client check will be enforced.\n"
  example: []
  syntax:
    content: public bool ForceClientAuthentication { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ForceClientAuthentication As Boolean
  overload: Grpc.Core.SslServerCredentials.ForceClientAuthentication*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Grpc.Core.ServerCredentials
  commentId: T:Grpc.Core.ServerCredentials
  parent: Grpc.Core
  isExternal: false
  name: ServerCredentials
  nameWithType: ServerCredentials
  fullName: Grpc.Core.ServerCredentials
- uid: Grpc.Core.ServerCredentials.Insecure
  commentId: P:Grpc.Core.ServerCredentials.Insecure
  parent: Grpc.Core.ServerCredentials
  isExternal: false
  name: Insecure
  nameWithType: ServerCredentials.Insecure
  fullName: Grpc.Core.ServerCredentials.Insecure
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.SslServerCredentials.#ctor*
  commentId: Overload:Grpc.Core.SslServerCredentials.#ctor
  isExternal: false
  name: SslServerCredentials
  nameWithType: SslServerCredentials.SslServerCredentials
  fullName: Grpc.Core.SslServerCredentials.SslServerCredentials
- uid: System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair}
  commentId: T:System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyCertificatePair>
  nameWithType: IEnumerable<KeyCertificatePair>
  fullName: System.Collections.Generic.IEnumerable<Grpc.Core.KeyCertificatePair>
  nameWithType.vb: IEnumerable(Of KeyCertificatePair)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Grpc.Core.KeyCertificatePair)
  name.vb: IEnumerable(Of KeyCertificatePair)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.KeyCertificatePair
    name: KeyCertificatePair
    nameWithType: KeyCertificatePair
    fullName: Grpc.Core.KeyCertificatePair
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.KeyCertificatePair
    name: KeyCertificatePair
    nameWithType: KeyCertificatePair
    fullName: Grpc.Core.KeyCertificatePair
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Grpc.Core.SslServerCredentials.KeyCertificatePairs*
  commentId: Overload:Grpc.Core.SslServerCredentials.KeyCertificatePairs
  isExternal: false
  name: KeyCertificatePairs
  nameWithType: SslServerCredentials.KeyCertificatePairs
  fullName: Grpc.Core.SslServerCredentials.KeyCertificatePairs
- uid: System.Collections.Generic.IList{Grpc.Core.KeyCertificatePair}
  commentId: T:System.Collections.Generic.IList{Grpc.Core.KeyCertificatePair}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<KeyCertificatePair>
  nameWithType: IList<KeyCertificatePair>
  fullName: System.Collections.Generic.IList<Grpc.Core.KeyCertificatePair>
  nameWithType.vb: IList(Of KeyCertificatePair)
  fullName.vb: System.Collections.Generic.IList(Of Grpc.Core.KeyCertificatePair)
  name.vb: IList(Of KeyCertificatePair)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.KeyCertificatePair
    name: KeyCertificatePair
    nameWithType: KeyCertificatePair
    fullName: Grpc.Core.KeyCertificatePair
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.KeyCertificatePair
    name: KeyCertificatePair
    nameWithType: KeyCertificatePair
    fullName: Grpc.Core.KeyCertificatePair
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.SslServerCredentials.RootCertificates*
  commentId: Overload:Grpc.Core.SslServerCredentials.RootCertificates
  isExternal: false
  name: RootCertificates
  nameWithType: SslServerCredentials.RootCertificates
  fullName: Grpc.Core.SslServerCredentials.RootCertificates
- uid: Grpc.Core.SslServerCredentials.ForceClientAuthentication*
  commentId: Overload:Grpc.Core.SslServerCredentials.ForceClientAuthentication
  isExternal: false
  name: ForceClientAuthentication
  nameWithType: SslServerCredentials.ForceClientAuthentication
  fullName: Grpc.Core.SslServerCredentials.ForceClientAuthentication
