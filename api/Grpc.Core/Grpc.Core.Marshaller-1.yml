### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Marshaller`1
  commentId: T:Grpc.Core.Marshaller`1
  id: Marshaller`1
  parent: Grpc.Core
  children:
  - Grpc.Core.Marshaller`1.#ctor(System.Func{`0,System.Byte[]},System.Func{System.Byte[],`0})
  - Grpc.Core.Marshaller`1.Deserializer
  - Grpc.Core.Marshaller`1.Serializer
  langs:
  - csharp
  - vb
  name: Marshaller<T>
  nameWithType: Marshaller<T>
  fullName: Grpc.Core.Marshaller<T>
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Marshaller.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Marshaller
    path: src/csharp/Grpc.Core/Marshaller.cs
    startLine: 26
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nEncapsulates the logic for serializing and deserializing messages.\n"
  example: []
  syntax:
    content: public class Marshaller<T>
    typeParameters:
    - id: T
    content.vb: Public Class Marshaller(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Marshaller(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Grpc.Core.Marshaller(Of T)
  name.vb: Marshaller(Of T)
- uid: Grpc.Core.Marshaller`1.#ctor(System.Func{`0,System.Byte[]},System.Func{System.Byte[],`0})
  commentId: M:Grpc.Core.Marshaller`1.#ctor(System.Func{`0,System.Byte[]},System.Func{System.Byte[],`0})
  id: '#ctor(System.Func{`0,System.Byte[]},System.Func{System.Byte[],`0})'
  parent: Grpc.Core.Marshaller`1
  langs:
  - csharp
  - vb
  name: Marshaller(Func<T, Byte[]>, Func<Byte[], T>)
  nameWithType: Marshaller<T>.Marshaller(Func<T, Byte[]>, Func<Byte[], T>)
  fullName: Grpc.Core.Marshaller<T>.Marshaller(System.Func<T, System.Byte[]>, System.Func<System.Byte[], T>)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/Marshaller.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/Marshaller.cs
    startLine: 36
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new marshaller.\n"
  example: []
  syntax:
    content: public Marshaller(Func<T, byte[]> serializer, Func<byte[], T> deserializer)
    parameters:
    - id: serializer
      type: System.Func{{T},System.Byte[]}
      description: Function that will be used to serialize messages.
    - id: deserializer
      type: System.Func{System.Byte[],{T}}
      description: Function that will be used to deserialize messages.
    content.vb: Public Sub New(serializer As Func(Of T, Byte()), deserializer As Func(Of Byte(), T))
  overload: Grpc.Core.Marshaller`1.#ctor*
  nameWithType.vb: Marshaller(Of T).Marshaller(Func(Of T, Byte()), Func(Of Byte(), T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.Marshaller(Of T).Marshaller(System.Func(Of T, System.Byte()), System.Func(Of System.Byte(), T))
  name.vb: Marshaller(Func(Of T, Byte()), Func(Of Byte(), T))
- uid: Grpc.Core.Marshaller`1.Serializer
  commentId: P:Grpc.Core.Marshaller`1.Serializer
  id: Serializer
  parent: Grpc.Core.Marshaller`1
  langs:
  - csharp
  - vb
  name: Serializer
  nameWithType: Marshaller<T>.Serializer
  fullName: Grpc.Core.Marshaller<T>.Serializer
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Marshaller.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Serializer
    path: src/csharp/Grpc.Core/Marshaller.cs
    startLine: 45
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the serializer function.\n"
  example: []
  syntax:
    content: public Func<T, byte[]> Serializer { get; }
    parameters: []
    return:
      type: System.Func{{T},System.Byte[]}
    content.vb: Public ReadOnly Property Serializer As Func(Of T, Byte())
  overload: Grpc.Core.Marshaller`1.Serializer*
  nameWithType.vb: Marshaller(Of T).Serializer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Marshaller(Of T).Serializer
- uid: Grpc.Core.Marshaller`1.Deserializer
  commentId: P:Grpc.Core.Marshaller`1.Deserializer
  id: Deserializer
  parent: Grpc.Core.Marshaller`1
  langs:
  - csharp
  - vb
  name: Deserializer
  nameWithType: Marshaller<T>.Deserializer
  fullName: Grpc.Core.Marshaller<T>.Deserializer
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Marshaller.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Deserializer
    path: src/csharp/Grpc.Core/Marshaller.cs
    startLine: 56
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the deserializer function.\n"
  example: []
  syntax:
    content: public Func<byte[], T> Deserializer { get; }
    parameters: []
    return:
      type: System.Func{System.Byte[],{T}}
    content.vb: Public ReadOnly Property Deserializer As Func(Of Byte(), T)
  overload: Grpc.Core.Marshaller`1.Deserializer*
  nameWithType.vb: Marshaller(Of T).Deserializer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Marshaller(Of T).Deserializer
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.Marshaller`1.#ctor*
  commentId: Overload:Grpc.Core.Marshaller`1.#ctor
  isExternal: false
  name: Marshaller
  nameWithType: Marshaller<T>.Marshaller
  fullName: Grpc.Core.Marshaller<T>.Marshaller
  nameWithType.vb: Marshaller(Of T).Marshaller
  fullName.vb: Grpc.Core.Marshaller(Of T).Marshaller
- uid: System.Func{{T},System.Byte[]}
  commentId: T:System.Func{`0,System.Byte[]}
  parent: System
  definition: System.Func`2
  name: Func<T, Byte[]>
  nameWithType: Func<T, Byte[]>
  fullName: System.Func<T, System.Byte[]>
  nameWithType.vb: Func(Of T, Byte())
  fullName.vb: System.Func(Of T, System.Byte())
  name.vb: Func(Of T, Byte())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Byte[],{T}}
  commentId: T:System.Func{System.Byte[],`0}
  parent: System
  definition: System.Func`2
  name: Func<Byte[], T>
  nameWithType: Func<Byte[], T>
  fullName: System.Func<System.Byte[], T>
  nameWithType.vb: Func(Of Byte(), T)
  fullName.vb: System.Func(Of System.Byte(), T)
  name.vb: Func(Of Byte(), T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Marshaller`1.Serializer*
  commentId: Overload:Grpc.Core.Marshaller`1.Serializer
  isExternal: false
  name: Serializer
  nameWithType: Marshaller<T>.Serializer
  fullName: Grpc.Core.Marshaller<T>.Serializer
  nameWithType.vb: Marshaller(Of T).Serializer
  fullName.vb: Grpc.Core.Marshaller(Of T).Serializer
- uid: Grpc.Core.Marshaller`1.Deserializer*
  commentId: Overload:Grpc.Core.Marshaller`1.Deserializer
  isExternal: false
  name: Deserializer
  nameWithType: Marshaller<T>.Deserializer
  fullName: Grpc.Core.Marshaller<T>.Deserializer
  nameWithType.vb: Marshaller(Of T).Deserializer
  fullName.vb: Grpc.Core.Marshaller(Of T).Deserializer
