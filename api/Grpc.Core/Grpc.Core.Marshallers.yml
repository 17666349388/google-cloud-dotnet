### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Marshallers
  commentId: T:Grpc.Core.Marshallers
  id: Marshallers
  parent: Grpc.Core
  children:
  - Grpc.Core.Marshallers.Create``1(System.Func{``0,System.Byte[]},System.Func{System.Byte[],``0})
  - Grpc.Core.Marshallers.StringMarshaller
  langs:
  - csharp
  - vb
  name: Marshallers
  nameWithType: Marshallers
  fullName: Grpc.Core.Marshallers
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Marshaller.cs
      branch: v1.4.x
      repo: https://github.com/grpc/grpc
    id: Marshallers
    path: src/csharp/Grpc.Core/Marshaller.cs
    startLine: 83
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nUtilities for creating marshallers.\n"
  example: []
  syntax:
    content: public static class Marshallers
    content.vb: Public Module Marshallers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Grpc.Core.Marshallers.Create``1(System.Func{``0,System.Byte[]},System.Func{System.Byte[],``0})
  commentId: M:Grpc.Core.Marshallers.Create``1(System.Func{``0,System.Byte[]},System.Func{System.Byte[],``0})
  id: Create``1(System.Func{``0,System.Byte[]},System.Func{System.Byte[],``0})
  parent: Grpc.Core.Marshallers
  langs:
  - csharp
  - vb
  name: Create<T>(Func<T, Byte[]>, Func<Byte[], T>)
  nameWithType: Marshallers.Create<T>(Func<T, Byte[]>, Func<Byte[], T>)
  fullName: Grpc.Core.Marshallers.Create<T>(System.Func<T, System.Byte[]>, System.Func<System.Byte[], T>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Marshaller.cs
      branch: v1.4.x
      repo: https://github.com/grpc/grpc
    id: Create
    path: src/csharp/Grpc.Core/Marshaller.cs
    startLine: 88
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates a marshaller from specified serializer and deserializer.\n"
  example: []
  syntax:
    content: public static Marshaller<T> Create<T>(Func<T, byte[]> serializer, Func<byte[], T> deserializer)
    parameters:
    - id: serializer
      type: System.Func{{T},System.Byte[]}
    - id: deserializer
      type: System.Func{System.Byte[],{T}}
    typeParameters:
    - id: T
    return:
      type: Grpc.Core.Marshaller{{T}}
    content.vb: Public Shared Function Create(Of T)(serializer As Func(Of T, Byte()), deserializer As Func(Of Byte(), T)) As Marshaller(Of T)
  overload: Grpc.Core.Marshallers.Create*
  nameWithType.vb: Marshallers.Create(Of T)(Func(Of T, Byte()), Func(Of Byte(), T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Marshallers.Create(Of T)(System.Func(Of T, System.Byte()), System.Func(Of System.Byte(), T))
  name.vb: Create(Of T)(Func(Of T, Byte()), Func(Of Byte(), T))
- uid: Grpc.Core.Marshallers.StringMarshaller
  commentId: P:Grpc.Core.Marshallers.StringMarshaller
  id: StringMarshaller
  parent: Grpc.Core.Marshallers
  langs:
  - csharp
  - vb
  name: StringMarshaller
  nameWithType: Marshallers.StringMarshaller
  fullName: Grpc.Core.Marshallers.StringMarshaller
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Marshaller.cs
      branch: v1.4.x
      repo: https://github.com/grpc/grpc
    id: StringMarshaller
    path: src/csharp/Grpc.Core/Marshaller.cs
    startLine: 96
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nReturns a marshaller for <code>string</code> type. This is useful for testing.\n"
  example: []
  syntax:
    content: public static Marshaller<string> StringMarshaller { get; }
    parameters: []
    return:
      type: Grpc.Core.Marshaller{System.String}
    content.vb: Public Shared ReadOnly Property StringMarshaller As Marshaller(Of String)
  overload: Grpc.Core.Marshallers.StringMarshaller*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.Marshallers.Create*
  commentId: Overload:Grpc.Core.Marshallers.Create
  isExternal: false
  name: Create
  nameWithType: Marshallers.Create
  fullName: Grpc.Core.Marshallers.Create
- uid: System.Func{{T},System.Byte[]}
  commentId: T:System.Func{`0,System.Byte[]}
  parent: System
  definition: System.Func`2
  name: Func<T, Byte[]>
  nameWithType: Func<T, Byte[]>
  fullName: System.Func<T, System.Byte[]>
  nameWithType.vb: Func(Of T, Byte())
  fullName.vb: System.Func(Of T, System.Byte())
  name.vb: Func(Of T, Byte())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Byte[],{T}}
  commentId: T:System.Func{System.Byte[],`0}
  parent: System
  definition: System.Func`2
  name: Func<Byte[], T>
  nameWithType: Func<Byte[], T>
  fullName: System.Func<System.Byte[], T>
  nameWithType.vb: Func(Of Byte(), T)
  fullName.vb: System.Func(Of System.Byte(), T)
  name.vb: Func(Of Byte(), T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Marshaller{{T}}
  commentId: T:Grpc.Core.Marshaller{``0}
  parent: Grpc.Core
  definition: Grpc.Core.Marshaller`1
  name: Marshaller<T>
  nameWithType: Marshaller<T>
  fullName: Grpc.Core.Marshaller<T>
  nameWithType.vb: Marshaller(Of T)
  fullName.vb: Grpc.Core.Marshaller(Of T)
  name.vb: Marshaller(Of T)
  spec.csharp:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Marshaller`1
  commentId: T:Grpc.Core.Marshaller`1
  isExternal: false
  name: Marshaller<T>
  nameWithType: Marshaller<T>
  fullName: Grpc.Core.Marshaller<T>
  nameWithType.vb: Marshaller(Of T)
  fullName.vb: Grpc.Core.Marshaller(Of T)
  name.vb: Marshaller(Of T)
  spec.csharp:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Marshallers.StringMarshaller*
  commentId: Overload:Grpc.Core.Marshallers.StringMarshaller
  isExternal: false
  name: StringMarshaller
  nameWithType: Marshallers.StringMarshaller
  fullName: Grpc.Core.Marshallers.StringMarshaller
- uid: Grpc.Core.Marshaller{System.String}
  commentId: T:Grpc.Core.Marshaller{System.String}
  parent: Grpc.Core
  definition: Grpc.Core.Marshaller`1
  name: Marshaller<String>
  nameWithType: Marshaller<String>
  fullName: Grpc.Core.Marshaller<System.String>
  nameWithType.vb: Marshaller(Of String)
  fullName.vb: Grpc.Core.Marshaller(Of System.String)
  name.vb: Marshaller(Of String)
  spec.csharp:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Marshaller`1
    name: Marshaller
    nameWithType: Marshaller
    fullName: Grpc.Core.Marshaller
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
