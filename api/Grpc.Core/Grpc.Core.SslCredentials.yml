### YamlMime:ManagedReference
items:
- uid: Grpc.Core.SslCredentials
  commentId: T:Grpc.Core.SslCredentials
  id: SslCredentials
  parent: Grpc.Core
  children:
  - Grpc.Core.SslCredentials.#ctor
  - Grpc.Core.SslCredentials.#ctor(System.String)
  - Grpc.Core.SslCredentials.#ctor(System.String,Grpc.Core.KeyCertificatePair)
  - Grpc.Core.SslCredentials.KeyCertificatePair
  - Grpc.Core.SslCredentials.RootCertificates
  langs:
  - csharp
  - vb
  name: SslCredentials
  nameWithType: SslCredentials
  fullName: Grpc.Core.SslCredentials
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/ChannelCredentials.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: SslCredentials
    path: src/csharp/Grpc.Core/ChannelCredentials.cs
    startLine: 85
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nClient-side SSL credentials.\n"
  example: []
  syntax:
    content: 'public sealed class SslCredentials : ChannelCredentials'
    content.vb: >-
      Public NotInheritable Class SslCredentials
          Inherits ChannelCredentials
  inheritance:
  - System.Object
  - Grpc.Core.ChannelCredentials
  inheritedMembers:
  - Grpc.Core.ChannelCredentials.Insecure
  - Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Grpc.Core.SslCredentials.#ctor
  commentId: M:Grpc.Core.SslCredentials.#ctor
  id: '#ctor'
  parent: Grpc.Core.SslCredentials
  langs:
  - csharp
  - vb
  name: SslCredentials()
  nameWithType: SslCredentials.SslCredentials()
  fullName: Grpc.Core.SslCredentials.SslCredentials()
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ChannelCredentials.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ChannelCredentials.cs
    startLine: 95
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates client-side SSL credentials loaded from\ndisk file pointed to by the GRPC_DEFAULT_SSL_ROOTS_FILE_PATH environment variable.\nIf that fails, gets the roots certificates from a well known place on disk.\n"
  example: []
  syntax:
    content: public SslCredentials()
    content.vb: Public Sub New
  overload: Grpc.Core.SslCredentials.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.SslCredentials.#ctor(System.String)
  commentId: M:Grpc.Core.SslCredentials.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Grpc.Core.SslCredentials
  langs:
  - csharp
  - vb
  name: SslCredentials(String)
  nameWithType: SslCredentials.SslCredentials(String)
  fullName: Grpc.Core.SslCredentials.SslCredentials(System.String)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ChannelCredentials.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ChannelCredentials.cs
    startLine: 103
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates client-side SSL credentials from\na string containing PEM encoded root certificates.\n"
  example: []
  syntax:
    content: public SslCredentials(string rootCertificates)
    parameters:
    - id: rootCertificates
      type: System.String
    content.vb: Public Sub New(rootCertificates As String)
  overload: Grpc.Core.SslCredentials.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.SslCredentials.#ctor(System.String,Grpc.Core.KeyCertificatePair)
  commentId: M:Grpc.Core.SslCredentials.#ctor(System.String,Grpc.Core.KeyCertificatePair)
  id: '#ctor(System.String,Grpc.Core.KeyCertificatePair)'
  parent: Grpc.Core.SslCredentials
  langs:
  - csharp
  - vb
  name: SslCredentials(String, KeyCertificatePair)
  nameWithType: SslCredentials.SslCredentials(String, KeyCertificatePair)
  fullName: Grpc.Core.SslCredentials.SslCredentials(System.String, Grpc.Core.KeyCertificatePair)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ChannelCredentials.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ChannelCredentials.cs
    startLine: 112
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates client-side SSL credentials.\n"
  example: []
  syntax:
    content: public SslCredentials(string rootCertificates, KeyCertificatePair keyCertificatePair)
    parameters:
    - id: rootCertificates
      type: System.String
      description: string containing PEM encoded server root certificates.
    - id: keyCertificatePair
      type: Grpc.Core.KeyCertificatePair
      description: a key certificate pair.
    content.vb: Public Sub New(rootCertificates As String, keyCertificatePair As KeyCertificatePair)
  overload: Grpc.Core.SslCredentials.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.SslCredentials.RootCertificates
  commentId: P:Grpc.Core.SslCredentials.RootCertificates
  id: RootCertificates
  parent: Grpc.Core.SslCredentials
  langs:
  - csharp
  - vb
  name: RootCertificates
  nameWithType: SslCredentials.RootCertificates
  fullName: Grpc.Core.SslCredentials.RootCertificates
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ChannelCredentials.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: RootCertificates
    path: src/csharp/Grpc.Core/ChannelCredentials.cs
    startLine: 121
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nPEM encoding of the server root certificates.\n"
  example: []
  syntax:
    content: public string RootCertificates { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property RootCertificates As String
  overload: Grpc.Core.SslCredentials.RootCertificates*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.SslCredentials.KeyCertificatePair
  commentId: P:Grpc.Core.SslCredentials.KeyCertificatePair
  id: KeyCertificatePair
  parent: Grpc.Core.SslCredentials
  langs:
  - csharp
  - vb
  name: KeyCertificatePair
  nameWithType: SslCredentials.KeyCertificatePair
  fullName: Grpc.Core.SslCredentials.KeyCertificatePair
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/ChannelCredentials.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: KeyCertificatePair
    path: src/csharp/Grpc.Core/ChannelCredentials.cs
    startLine: 133
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nClient side key and certificate pair.\nIf null, client will not use key and certificate pair.\n"
  example: []
  syntax:
    content: public KeyCertificatePair KeyCertificatePair { get; }
    parameters: []
    return:
      type: Grpc.Core.KeyCertificatePair
    content.vb: Public ReadOnly Property KeyCertificatePair As KeyCertificatePair
  overload: Grpc.Core.SslCredentials.KeyCertificatePair*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Grpc.Core.ChannelCredentials
  commentId: T:Grpc.Core.ChannelCredentials
  parent: Grpc.Core
  isExternal: false
  name: ChannelCredentials
  nameWithType: ChannelCredentials
  fullName: Grpc.Core.ChannelCredentials
- uid: Grpc.Core.ChannelCredentials.Insecure
  commentId: P:Grpc.Core.ChannelCredentials.Insecure
  parent: Grpc.Core.ChannelCredentials
  isExternal: false
  name: Insecure
  nameWithType: ChannelCredentials.Insecure
  fullName: Grpc.Core.ChannelCredentials.Insecure
- uid: Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)
  commentId: M:Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)
  parent: Grpc.Core.ChannelCredentials
  isExternal: false
  name: Create(ChannelCredentials, CallCredentials)
  nameWithType: ChannelCredentials.Create(ChannelCredentials, CallCredentials)
  fullName: Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials, Grpc.Core.CallCredentials)
  spec.csharp:
  - uid: Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)
    name: Create
    nameWithType: ChannelCredentials.Create
    fullName: Grpc.Core.ChannelCredentials.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.ChannelCredentials
    name: ChannelCredentials
    nameWithType: ChannelCredentials
    fullName: Grpc.Core.ChannelCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Grpc.Core.CallCredentials
    name: CallCredentials
    nameWithType: CallCredentials
    fullName: Grpc.Core.CallCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)
    name: Create
    nameWithType: ChannelCredentials.Create
    fullName: Grpc.Core.ChannelCredentials.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.ChannelCredentials
    name: ChannelCredentials
    nameWithType: ChannelCredentials
    fullName: Grpc.Core.ChannelCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Grpc.Core.CallCredentials
    name: CallCredentials
    nameWithType: CallCredentials
    fullName: Grpc.Core.CallCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.SslCredentials.#ctor*
  commentId: Overload:Grpc.Core.SslCredentials.#ctor
  isExternal: false
  name: SslCredentials
  nameWithType: SslCredentials.SslCredentials
  fullName: Grpc.Core.SslCredentials.SslCredentials
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Grpc.Core.KeyCertificatePair
  commentId: T:Grpc.Core.KeyCertificatePair
  parent: Grpc.Core
  isExternal: false
  name: KeyCertificatePair
  nameWithType: KeyCertificatePair
  fullName: Grpc.Core.KeyCertificatePair
- uid: Grpc.Core.SslCredentials.RootCertificates*
  commentId: Overload:Grpc.Core.SslCredentials.RootCertificates
  isExternal: false
  name: RootCertificates
  nameWithType: SslCredentials.RootCertificates
  fullName: Grpc.Core.SslCredentials.RootCertificates
- uid: Grpc.Core.SslCredentials.KeyCertificatePair*
  commentId: Overload:Grpc.Core.SslCredentials.KeyCertificatePair
  isExternal: false
  name: KeyCertificatePair
  nameWithType: SslCredentials.KeyCertificatePair
  fullName: Grpc.Core.SslCredentials.KeyCertificatePair
