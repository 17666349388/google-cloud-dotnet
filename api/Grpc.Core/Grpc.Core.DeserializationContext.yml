### YamlMime:ManagedReference
items:
- uid: Grpc.Core.DeserializationContext
  commentId: T:Grpc.Core.DeserializationContext
  id: DeserializationContext
  parent: Grpc.Core
  children:
  - Grpc.Core.DeserializationContext.PayloadAsNewBuffer
  - Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence
  - Grpc.Core.DeserializationContext.PayloadLength
  langs:
  - csharp
  - vb
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: Grpc.Core.DeserializationContext
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: DeserializationContext
    path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
    startLine: 25
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nProvides access to the payload being deserialized when deserializing messages.\n"
  example: []
  syntax:
    content: public abstract class DeserializationContext
    content.vb: Public MustInherit Class DeserializationContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Grpc.Core.DeserializationContext.PayloadLength
  commentId: P:Grpc.Core.DeserializationContext.PayloadLength
  id: PayloadLength
  parent: Grpc.Core.DeserializationContext
  langs:
  - csharp
  - vb
  name: PayloadLength
  nameWithType: DeserializationContext.PayloadLength
  fullName: Grpc.Core.DeserializationContext.PayloadLength
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: PayloadLength
    path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
    startLine: 30
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nGet the total length of the payload in bytes.\n"
  example: []
  syntax:
    content: public abstract int PayloadLength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public MustOverride ReadOnly Property PayloadLength As Integer
  overload: Grpc.Core.DeserializationContext.PayloadLength*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Grpc.Core.DeserializationContext.PayloadAsNewBuffer
  commentId: M:Grpc.Core.DeserializationContext.PayloadAsNewBuffer
  id: PayloadAsNewBuffer
  parent: Grpc.Core.DeserializationContext
  langs:
  - csharp
  - vb
  name: PayloadAsNewBuffer()
  nameWithType: DeserializationContext.PayloadAsNewBuffer()
  fullName: Grpc.Core.DeserializationContext.PayloadAsNewBuffer()
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: PayloadAsNewBuffer
    path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
    startLine: 45
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nGets the entire payload as a newly allocated byte array.\nOnce the byte array is returned, the byte array becomes owned by the caller and won&apos;t be ever accessed or reused by gRPC again.\nNOTE: Obtaining the buffer as a newly allocated byte array is the simplest way of accessing the payload,\nbut it can have important consequences in high-performance scenarios.\nIn particular, using this method usually requires copying of the entire buffer one extra time.\nAlso, allocating a new buffer each time can put excessive pressure on GC, especially if\nthe payload is more than 86700 bytes large (which means the newly allocated buffer will be placed in LOH,\nand LOH object can only be garbage collected via a full (&quot;stop the world&quot;) GC run).\nNOTE: Deserializers are expected not to call this method (or other payload accessor methods) more than once per received message\n(as there is no practical reason for doing so) and <code>DeserializationContext</code> implementations are free to assume so.\n"
  example: []
  syntax:
    content: public virtual byte[] PayloadAsNewBuffer()
    return:
      type: System.Byte[]
      description: byte array containing the entire payload.
    content.vb: Public Overridable Function PayloadAsNewBuffer As Byte()
  overload: Grpc.Core.DeserializationContext.PayloadAsNewBuffer*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence
  commentId: M:Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence
  id: PayloadAsReadOnlySequence
  parent: Grpc.Core.DeserializationContext
  langs:
  - csharp
  - vb
  name: PayloadAsReadOnlySequence()
  nameWithType: DeserializationContext.PayloadAsReadOnlySequence()
  fullName: Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence()
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: PayloadAsReadOnlySequence
    path: src/csharp/Grpc.Core.Api/DeserializationContext.cs
    startLine: 60
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nGets the entire payload as a ReadOnlySequence.\nThe ReadOnlySequence is only valid for the duration of the deserializer routine and the caller must not access it after the deserializer returns.\nUsing the read only sequence is the most efficient way to access the message payload. Where possible it allows directly\naccessing the received payload without needing to perform any buffer copying or buffer allocations.\nNOTE: When using this method, it is recommended to use C# 7.2 compiler to make it more useful (using Span type directly from your code requires C# 7.2).&quot;\nNOTE: Deserializers are expected not to call this method (or other payload accessor methods) more than once per received message\n(as there is no practical reason for doing so) and <code>DeserializationContext</code> implementations are free to assume so.\n"
  example: []
  syntax:
    content: public virtual Buffers.ReadOnlySequence<byte> PayloadAsReadOnlySequence()
    return:
      type: System.Buffers.ReadOnlySequence{System.Byte}
      description: read only sequence containing the entire payload.
    content.vb: Public Overridable Function PayloadAsReadOnlySequence As Buffers.ReadOnlySequence(Of Byte)
  overload: Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.DeserializationContext.PayloadLength*
  commentId: Overload:Grpc.Core.DeserializationContext.PayloadLength
  name: PayloadLength
  nameWithType: DeserializationContext.PayloadLength
  fullName: Grpc.Core.DeserializationContext.PayloadLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Grpc.Core.DeserializationContext.PayloadAsNewBuffer*
  commentId: Overload:Grpc.Core.DeserializationContext.PayloadAsNewBuffer
  name: PayloadAsNewBuffer
  nameWithType: DeserializationContext.PayloadAsNewBuffer
  fullName: Grpc.Core.DeserializationContext.PayloadAsNewBuffer
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence*
  commentId: Overload:Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence
  name: PayloadAsReadOnlySequence
  nameWithType: DeserializationContext.PayloadAsReadOnlySequence
  fullName: Grpc.Core.DeserializationContext.PayloadAsReadOnlySequence
- uid: System.Buffers.ReadOnlySequence{System.Byte}
  commentId: '!:System.Buffers.ReadOnlySequence{System.Byte}'
  definition: System.Buffers.ReadOnlySequence`1
  name: Buffers.ReadOnlySequence<Byte>
  nameWithType: Buffers.ReadOnlySequence<Byte>
  fullName: System.Buffers.ReadOnlySequence<System.Byte>
  nameWithType.vb: Buffers.ReadOnlySequence(Of Byte)
  fullName.vb: System.Buffers.ReadOnlySequence(Of System.Byte)
  name.vb: Buffers.ReadOnlySequence(Of Byte)
  spec.csharp:
  - uid: System.Buffers.ReadOnlySequence`1
    name: Buffers.ReadOnlySequence
    nameWithType: Buffers.ReadOnlySequence
    fullName: System.Buffers.ReadOnlySequence
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Buffers.ReadOnlySequence`1
    name: Buffers.ReadOnlySequence
    nameWithType: Buffers.ReadOnlySequence
    fullName: System.Buffers.ReadOnlySequence
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Buffers.ReadOnlySequence`1
  commentId: '!:System.Buffers.ReadOnlySequence`1'
  isExternal: true
  name: Buffers.ReadOnlySequence<>
  nameWithType: Buffers.ReadOnlySequence<>
  fullName: System.Buffers.ReadOnlySequence<>
  nameWithType.vb: Buffers.ReadOnlySequence(Of )
  fullName.vb: System.Buffers.ReadOnlySequence(Of )
  name.vb: Buffers.ReadOnlySequence(Of )
  spec.csharp:
  - uid: System.Buffers.ReadOnlySequence`1
    name: Buffers.ReadOnlySequence
    nameWithType: Buffers.ReadOnlySequence
    fullName: System.Buffers.ReadOnlySequence
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Buffers.ReadOnlySequence`1
    name: Buffers.ReadOnlySequence
    nameWithType: Buffers.ReadOnlySequence
    fullName: System.Buffers.ReadOnlySequence
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
