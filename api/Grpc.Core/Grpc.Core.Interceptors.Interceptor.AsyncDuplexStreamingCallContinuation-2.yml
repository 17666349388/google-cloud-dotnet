### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
  id: Interceptor.AsyncDuplexStreamingCallContinuation`2
  parent: Grpc.Core.Interceptors
  children: []
  langs:
  - csharp
  - vb
  name: Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  type: Delegate
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Interceptors/Interceptor.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: AsyncDuplexStreamingCallContinuation
    path: src/csharp/Grpc.Core.Api/Interceptors/Interceptor.cs
    startLine: 151
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core.Interceptors
  summary: "\nRepresents a continuation for intercepting asynchronous duplex invocations.\nA delegate of this type is passed to the AsyncDuplexStreamingCall method\nwhen an outgoing invocation is being intercepted and calling the\ndelegate will invoke the next interceptor in the chain, or the underlying\ncall invoker if called from the last interceptor. The interceptor is\nallowed to call it zero, one, or multiple times, passing it the appropriate\nrequest value and context as it sees fit.\n"
  example: []
  syntax:
    content: >-
      public delegate AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCallContinuation<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context)
          where TRequest : class where TResponse : class;
    parameters:
    - id: context
      type: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
      description: "\nThe <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\ninstance to pass to the next step in the invocation process.\n"
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
      description: "\nAn instance of <xref href=\"Grpc.Core.AsyncDuplexStreamingCall%602\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting an asynchronous invocation of a duplex-streaming RPC.\nThe interceptor can choose to return the same object returned from\nthe continuation delegate or an arbitrarily constructed instance as it sees fit.\n"
    content.vb: Public Delegate Function AsyncDuplexStreamingCallContinuation(Of TRequest As Class, TResponse As Class)(context As ClientInterceptorContext(Of TRequest, TResponse)) As AsyncDuplexStreamingCall(Of TRequest, TResponse)
  nameWithType.vb: Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
references:
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext`2
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncDuplexStreamingCall`2
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall`2
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors
  commentId: N:Grpc.Core.Interceptors
  name: Grpc.Core.Interceptors
  nameWithType: Grpc.Core.Interceptors
  fullName: Grpc.Core.Interceptors
- uid: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.ClientInterceptorContext`2
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncDuplexStreamingCall`2
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
