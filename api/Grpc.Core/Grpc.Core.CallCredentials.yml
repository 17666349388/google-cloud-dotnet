### YamlMime:ManagedReference
items:
- uid: Grpc.Core.CallCredentials
  commentId: T:Grpc.Core.CallCredentials
  id: CallCredentials
  parent: Grpc.Core
  children:
  - Grpc.Core.CallCredentials.Compose(Grpc.Core.CallCredentials[])
  - Grpc.Core.CallCredentials.FromInterceptor(Grpc.Core.AsyncAuthInterceptor)
  langs:
  - csharp
  - vb
  name: CallCredentials
  nameWithType: CallCredentials
  fullName: Grpc.Core.CallCredentials
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/CallCredentials.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: CallCredentials
    path: src/csharp/Grpc.Core/CallCredentials.cs
    startLine: 30
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nClient-side call credentials. Provide authorization with per-call granularity.\n"
  example: []
  syntax:
    content: public abstract class CallCredentials
    content.vb: Public MustInherit Class CallCredentials
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Grpc.Core.CallCredentials.Compose(Grpc.Core.CallCredentials[])
  commentId: M:Grpc.Core.CallCredentials.Compose(Grpc.Core.CallCredentials[])
  id: Compose(Grpc.Core.CallCredentials[])
  parent: Grpc.Core.CallCredentials
  langs:
  - csharp
  - vb
  name: Compose(CallCredentials[])
  nameWithType: CallCredentials.Compose(CallCredentials[])
  fullName: Grpc.Core.CallCredentials.Compose(Grpc.Core.CallCredentials[])
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/CallCredentials.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: Compose
    path: src/csharp/Grpc.Core/CallCredentials.cs
    startLine: 38
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nComposes multiple multiple <code>CallCredentials</code> objects into\na single <code>CallCredentials</code> object.\n"
  example: []
  syntax:
    content: public static CallCredentials Compose(params CallCredentials[] credentials)
    parameters:
    - id: credentials
      type: Grpc.Core.CallCredentials[]
      description: credentials to compose
    return:
      type: Grpc.Core.CallCredentials
      description: The new <code>CompositeCallCredentials</code>
    content.vb: Public Shared Function Compose(ParamArray credentials As CallCredentials()) As CallCredentials
  overload: Grpc.Core.CallCredentials.Compose*
  nameWithType.vb: CallCredentials.Compose(CallCredentials())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.CallCredentials.Compose(Grpc.Core.CallCredentials())
  name.vb: Compose(CallCredentials())
- uid: Grpc.Core.CallCredentials.FromInterceptor(Grpc.Core.AsyncAuthInterceptor)
  commentId: M:Grpc.Core.CallCredentials.FromInterceptor(Grpc.Core.AsyncAuthInterceptor)
  id: FromInterceptor(Grpc.Core.AsyncAuthInterceptor)
  parent: Grpc.Core.CallCredentials
  langs:
  - csharp
  - vb
  name: FromInterceptor(AsyncAuthInterceptor)
  nameWithType: CallCredentials.FromInterceptor(AsyncAuthInterceptor)
  fullName: Grpc.Core.CallCredentials.FromInterceptor(Grpc.Core.AsyncAuthInterceptor)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/CallCredentials.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: FromInterceptor
    path: src/csharp/Grpc.Core/CallCredentials.cs
    startLine: 48
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates a new instance of <code>CallCredentials</code> class from an\ninterceptor that can attach metadata to outgoing calls.\n"
  example: []
  syntax:
    content: public static CallCredentials FromInterceptor(AsyncAuthInterceptor interceptor)
    parameters:
    - id: interceptor
      type: Grpc.Core.AsyncAuthInterceptor
      description: authentication interceptor
    return:
      type: Grpc.Core.CallCredentials
    content.vb: Public Shared Function FromInterceptor(interceptor As AsyncAuthInterceptor) As CallCredentials
  overload: Grpc.Core.CallCredentials.FromInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.CallCredentials.Compose*
  commentId: Overload:Grpc.Core.CallCredentials.Compose
  isExternal: false
  name: Compose
  nameWithType: CallCredentials.Compose
  fullName: Grpc.Core.CallCredentials.Compose
- uid: Grpc.Core.CallCredentials[]
  name: CallCredentials[]
  nameWithType: CallCredentials[]
  fullName: Grpc.Core.CallCredentials[]
  nameWithType.vb: CallCredentials()
  fullName.vb: Grpc.Core.CallCredentials()
  name.vb: CallCredentials()
  spec.csharp:
  - uid: Grpc.Core.CallCredentials
    name: CallCredentials
    nameWithType: CallCredentials
    fullName: Grpc.Core.CallCredentials
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Grpc.Core.CallCredentials
    name: CallCredentials
    nameWithType: CallCredentials
    fullName: Grpc.Core.CallCredentials
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Grpc.Core.CallCredentials
  commentId: T:Grpc.Core.CallCredentials
  parent: Grpc.Core
  isExternal: false
  name: CallCredentials
  nameWithType: CallCredentials
  fullName: Grpc.Core.CallCredentials
- uid: Grpc.Core.CallCredentials.FromInterceptor*
  commentId: Overload:Grpc.Core.CallCredentials.FromInterceptor
  isExternal: false
  name: FromInterceptor
  nameWithType: CallCredentials.FromInterceptor
  fullName: Grpc.Core.CallCredentials.FromInterceptor
- uid: Grpc.Core.AsyncAuthInterceptor
  commentId: T:Grpc.Core.AsyncAuthInterceptor
  parent: Grpc.Core
  isExternal: false
  name: AsyncAuthInterceptor
  nameWithType: AsyncAuthInterceptor
  fullName: Grpc.Core.AsyncAuthInterceptor
