### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Metadata
  commentId: T:Grpc.Core.Metadata
  id: Metadata
  parent: Grpc.Core
  children:
  - Grpc.Core.Metadata.#ctor
  - Grpc.Core.Metadata.Add(Grpc.Core.Metadata.Entry)
  - Grpc.Core.Metadata.Add(System.String,System.Byte[])
  - Grpc.Core.Metadata.Add(System.String,System.String)
  - Grpc.Core.Metadata.BinaryHeaderSuffix
  - Grpc.Core.Metadata.Clear
  - Grpc.Core.Metadata.Contains(Grpc.Core.Metadata.Entry)
  - Grpc.Core.Metadata.CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)
  - Grpc.Core.Metadata.Count
  - Grpc.Core.Metadata.Empty
  - Grpc.Core.Metadata.GetEnumerator
  - Grpc.Core.Metadata.IndexOf(Grpc.Core.Metadata.Entry)
  - Grpc.Core.Metadata.Insert(System.Int32,Grpc.Core.Metadata.Entry)
  - Grpc.Core.Metadata.IsReadOnly
  - Grpc.Core.Metadata.Item(System.Int32)
  - Grpc.Core.Metadata.Remove(Grpc.Core.Metadata.Entry)
  - Grpc.Core.Metadata.RemoveAt(System.Int32)
  - Grpc.Core.Metadata.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: Metadata
  fullName: Grpc.Core.Metadata
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Metadata
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 35
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nA collection of metadata entries that can be exchanged during a call.\ngRPC supports these types of metadata:\n<ul><li>Request headersare sent by the client at the beginning of a remote call before any request messages are sent.</li><li>Response headersare sent by the server at the beginning of a remote call handler before any response messages are sent.</li><li>Response trailersare sent by the server at the end of a remote call along with resulting call status.</li></ul>\n"
  example: []
  syntax:
    content: 'public sealed class Metadata : IList<Metadata.Entry>, ICollection<Metadata.Entry>, IEnumerable<Metadata.Entry>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class Metadata
          Implements IList(Of Metadata.Entry), ICollection(Of Metadata.Entry), IEnumerable(Of Metadata.Entry), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  - System.Collections.Generic.IEnumerable{Grpc.Core.Metadata.Entry}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Grpc.Core.Metadata.BinaryHeaderSuffix
  commentId: F:Grpc.Core.Metadata.BinaryHeaderSuffix
  id: BinaryHeaderSuffix
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: BinaryHeaderSuffix
  nameWithType: Metadata.BinaryHeaderSuffix
  fullName: Grpc.Core.Metadata.BinaryHeaderSuffix
  type: Field
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: BinaryHeaderSuffix
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 40
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAll binary headers should have this suffix.\n"
  example: []
  syntax:
    content: public const string BinaryHeaderSuffix = "-bin"
    return:
      type: System.String
    content.vb: Public Const BinaryHeaderSuffix As String = "-bin"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Grpc.Core.Metadata.Empty
  commentId: F:Grpc.Core.Metadata.Empty
  id: Empty
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Metadata.Empty
  fullName: Grpc.Core.Metadata.Empty
  type: Field
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Empty
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 45
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAn read-only instance of metadata containing no entries.\n"
  example: []
  syntax:
    content: public static readonly Metadata Empty
    return:
      type: Grpc.Core.Metadata
    content.vb: Public Shared ReadOnly Empty As Metadata
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Grpc.Core.Metadata.#ctor
  commentId: M:Grpc.Core.Metadata.#ctor
  id: '#ctor'
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Metadata()
  nameWithType: Metadata.Metadata()
  fullName: Grpc.Core.Metadata.Metadata()
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 61
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of <code>Metadata</code>.\n"
  example: []
  syntax:
    content: public Metadata()
    content.vb: Public Sub New
  overload: Grpc.Core.Metadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.IndexOf(Grpc.Core.Metadata.Entry)
  commentId: M:Grpc.Core.Metadata.IndexOf(Grpc.Core.Metadata.Entry)
  id: IndexOf(Grpc.Core.Metadata.Entry)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: IndexOf(Metadata.Entry)
  nameWithType: Metadata.IndexOf(Metadata.Entry)
  fullName: Grpc.Core.Metadata.IndexOf(Grpc.Core.Metadata.Entry)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: IndexOf
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 84
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public int IndexOf(Metadata.Entry item)
    parameters:
    - id: item
      type: Grpc.Core.Metadata.Entry
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As Metadata.Entry) As Integer
  overload: Grpc.Core.Metadata.IndexOf*
  implements:
  - System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.IndexOf(Grpc.Core.Metadata.Entry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.Insert(System.Int32,Grpc.Core.Metadata.Entry)
  commentId: M:Grpc.Core.Metadata.Insert(System.Int32,Grpc.Core.Metadata.Entry)
  id: Insert(System.Int32,Grpc.Core.Metadata.Entry)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Insert(Int32, Metadata.Entry)
  nameWithType: Metadata.Insert(Int32, Metadata.Entry)
  fullName: Grpc.Core.Metadata.Insert(System.Int32, Grpc.Core.Metadata.Entry)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Insert
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 92
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Insert(int index, Metadata.Entry item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: Grpc.Core.Metadata.Entry
    content.vb: Public Sub Insert(index As Integer, item As Metadata.Entry)
  overload: Grpc.Core.Metadata.Insert*
  implements:
  - System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.Insert(System.Int32,Grpc.Core.Metadata.Entry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.RemoveAt(System.Int32)
  commentId: M:Grpc.Core.Metadata.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: Metadata.RemoveAt(Int32)
  fullName: Grpc.Core.Metadata.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: RemoveAt
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 102
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Grpc.Core.Metadata.RemoveAt*
  implements:
  - System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.Item(System.Int32)
  commentId: P:Grpc.Core.Metadata.Item(System.Int32)
  id: Item(System.Int32)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: Metadata.Item[Int32]
  fullName: Grpc.Core.Metadata.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: this[]
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 111
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Metadata.Entry this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: Grpc.Core.Metadata.Entry
    content.vb: Public Property Item(index As Integer) As Metadata.Entry
  overload: Grpc.Core.Metadata.Item*
  implements:
  - System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.Item(System.Int32)
  nameWithType.vb: Metadata.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.Metadata.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Grpc.Core.Metadata.Add(Grpc.Core.Metadata.Entry)
  commentId: M:Grpc.Core.Metadata.Add(Grpc.Core.Metadata.Entry)
  id: Add(Grpc.Core.Metadata.Entry)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Add(Metadata.Entry)
  nameWithType: Metadata.Add(Metadata.Entry)
  fullName: Grpc.Core.Metadata.Add(Grpc.Core.Metadata.Entry)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Add
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 129
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Add(Metadata.Entry item)
    parameters:
    - id: item
      type: Grpc.Core.Metadata.Entry
    content.vb: Public Sub Add(item As Metadata.Entry)
  overload: Grpc.Core.Metadata.Add*
  implements:
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Add(Grpc.Core.Metadata.Entry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.Add(System.String,System.String)
  commentId: M:Grpc.Core.Metadata.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Add(String, String)
  nameWithType: Metadata.Add(String, String)
  fullName: Grpc.Core.Metadata.Add(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Add
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 139
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAdds a new ASCII-valued metadata entry. See <code>Metadata.Entry</code> constructor for params.\n"
  example: []
  syntax:
    content: public void Add(string key, string value)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.String
    content.vb: Public Sub Add(key As String, value As String)
  overload: Grpc.Core.Metadata.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.Add(System.String,System.Byte[])
  commentId: M:Grpc.Core.Metadata.Add(System.String,System.Byte[])
  id: Add(System.String,System.Byte[])
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Add(String, Byte[])
  nameWithType: Metadata.Add(String, Byte[])
  fullName: Grpc.Core.Metadata.Add(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Add
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 147
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\nAdds a new binary-valued metadata entry. See <code>Metadata.Entry</code> constructor for params.\n"
  example: []
  syntax:
    content: public void Add(string key, byte[] valueBytes)
    parameters:
    - id: key
      type: System.String
    - id: valueBytes
      type: System.Byte[]
    content.vb: Public Sub Add(key As String, valueBytes As Byte())
  overload: Grpc.Core.Metadata.Add*
  nameWithType.vb: Metadata.Add(String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.Metadata.Add(System.String, System.Byte())
  name.vb: Add(String, Byte())
- uid: Grpc.Core.Metadata.Clear
  commentId: M:Grpc.Core.Metadata.Clear
  id: Clear
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Metadata.Clear()
  fullName: Grpc.Core.Metadata.Clear()
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Clear
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 155
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Grpc.Core.Metadata.Clear*
  implements:
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.Contains(Grpc.Core.Metadata.Entry)
  commentId: M:Grpc.Core.Metadata.Contains(Grpc.Core.Metadata.Entry)
  id: Contains(Grpc.Core.Metadata.Entry)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Contains(Metadata.Entry)
  nameWithType: Metadata.Contains(Metadata.Entry)
  fullName: Grpc.Core.Metadata.Contains(Grpc.Core.Metadata.Entry)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Contains
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 164
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool Contains(Metadata.Entry item)
    parameters:
    - id: item
      type: Grpc.Core.Metadata.Entry
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As Metadata.Entry) As Boolean
  overload: Grpc.Core.Metadata.Contains*
  implements:
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Contains(Grpc.Core.Metadata.Entry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)
  commentId: M:Grpc.Core.Metadata.CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)
  id: CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: CopyTo(Metadata.Entry[], Int32)
  nameWithType: Metadata.CopyTo(Metadata.Entry[], Int32)
  fullName: Grpc.Core.Metadata.CopyTo(Grpc.Core.Metadata.Entry[], System.Int32)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: CopyTo
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 172
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void CopyTo(Metadata.Entry[] array, int arrayIndex)
    parameters:
    - id: array
      type: Grpc.Core.Metadata.Entry[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As Metadata.Entry(), arrayIndex As Integer)
  overload: Grpc.Core.Metadata.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)
  nameWithType.vb: Metadata.CopyTo(Metadata.Entry(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.Metadata.CopyTo(Grpc.Core.Metadata.Entry(), System.Int32)
  name.vb: CopyTo(Metadata.Entry(), Int32)
- uid: Grpc.Core.Metadata.Count
  commentId: P:Grpc.Core.Metadata.Count
  id: Count
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Metadata.Count
  fullName: Grpc.Core.Metadata.Count
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Count
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 180
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Grpc.Core.Metadata.Count*
  implements:
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.Metadata.IsReadOnly
  commentId: P:Grpc.Core.Metadata.IsReadOnly
  id: IsReadOnly
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: Metadata.IsReadOnly
  fullName: Grpc.Core.Metadata.IsReadOnly
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: IsReadOnly
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 188
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Grpc.Core.Metadata.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.Metadata.Remove(Grpc.Core.Metadata.Entry)
  commentId: M:Grpc.Core.Metadata.Remove(Grpc.Core.Metadata.Entry)
  id: Remove(Grpc.Core.Metadata.Entry)
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: Remove(Metadata.Entry)
  nameWithType: Metadata.Remove(Metadata.Entry)
  fullName: Grpc.Core.Metadata.Remove(Grpc.Core.Metadata.Entry)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Remove
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 196
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool Remove(Metadata.Entry item)
    parameters:
    - id: item
      type: Grpc.Core.Metadata.Entry
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As Metadata.Entry) As Boolean
  overload: Grpc.Core.Metadata.Remove*
  implements:
  - System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Remove(Grpc.Core.Metadata.Entry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.GetEnumerator
  commentId: M:Grpc.Core.Metadata.GetEnumerator
  id: GetEnumerator
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Metadata.GetEnumerator()
  fullName: Grpc.Core.Metadata.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: GetEnumerator
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 205
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  summary: "\n<xref href=\"IList%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public IEnumerator<Metadata.Entry> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Grpc.Core.Metadata.Entry}
    content.vb: Public Function GetEnumerator As IEnumerator(Of Metadata.Entry)
  overload: Grpc.Core.Metadata.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Grpc.Core.Metadata.Entry}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Grpc.Core.Metadata.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Grpc.Core.Metadata
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Metadata.IEnumerable.GetEnumerator()
  fullName: Grpc.Core.Metadata.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Metadata.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/csharp/Grpc.Core.Api/Metadata.cs
    startLine: 210
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Grpc.Core.Metadata.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Metadata.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}
  commentId: T:System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Metadata.Entry>
  nameWithType: IList<Metadata.Entry>
  fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>
  nameWithType.vb: IList(Of Metadata.Entry)
  fullName.vb: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry)
  name.vb: IList(Of Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  commentId: T:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Metadata.Entry>
  nameWithType: ICollection<Metadata.Entry>
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>
  nameWithType.vb: ICollection(Of Metadata.Entry)
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry)
  name.vb: ICollection(Of Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Grpc.Core.Metadata.Entry}
  commentId: T:System.Collections.Generic.IEnumerable{Grpc.Core.Metadata.Entry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Metadata.Entry>
  nameWithType: IEnumerable<Metadata.Entry>
  fullName: System.Collections.Generic.IEnumerable<Grpc.Core.Metadata.Entry>
  nameWithType.vb: IEnumerable(Of Metadata.Entry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Grpc.Core.Metadata.Entry)
  name.vb: IEnumerable(Of Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Grpc.Core.Metadata
  commentId: T:Grpc.Core.Metadata
  parent: Grpc.Core
  name: Metadata
  nameWithType: Metadata
  fullName: Grpc.Core.Metadata
- uid: Grpc.Core.Metadata.#ctor*
  commentId: Overload:Grpc.Core.Metadata.#ctor
  name: Metadata
  nameWithType: Metadata.Metadata
  fullName: Grpc.Core.Metadata.Metadata
- uid: IList`1
  commentId: T:IList`1
  isExternal: true
- uid: Grpc.Core.Metadata.IndexOf*
  commentId: Overload:Grpc.Core.Metadata.IndexOf
  name: IndexOf
  nameWithType: Metadata.IndexOf
  fullName: Grpc.Core.Metadata.IndexOf
- uid: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.IndexOf(Grpc.Core.Metadata.Entry)
  commentId: M:System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.IndexOf(Grpc.Core.Metadata.Entry)
  parent: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(Metadata.Entry)
  nameWithType: IList<Metadata.Entry>.IndexOf(Metadata.Entry)
  fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.IndexOf(Grpc.Core.Metadata.Entry)
  nameWithType.vb: IList(Of Metadata.Entry).IndexOf(Metadata.Entry)
  fullName.vb: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).IndexOf(Grpc.Core.Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<Metadata.Entry>.IndexOf
    fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of Metadata.Entry).IndexOf
    fullName: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Entry
  commentId: T:Grpc.Core.Metadata.Entry
  parent: Grpc.Core
  name: Metadata.Entry
  nameWithType: Metadata.Entry
  fullName: Grpc.Core.Metadata.Entry
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Insert*
  commentId: Overload:Grpc.Core.Metadata.Insert
  name: Insert
  nameWithType: Metadata.Insert
  fullName: Grpc.Core.Metadata.Insert
- uid: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.Insert(System.Int32,Grpc.Core.Metadata.Entry)
  commentId: M:System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.Insert(System.Int32,Grpc.Core.Metadata.Entry)
  parent: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, Metadata.Entry)
  nameWithType: IList<Metadata.Entry>.Insert(Int32, Metadata.Entry)
  fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.Insert(System.Int32, Grpc.Core.Metadata.Entry)
  nameWithType.vb: IList(Of Metadata.Entry).Insert(Int32, Metadata.Entry)
  fullName.vb: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).Insert(System.Int32, Grpc.Core.Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<Metadata.Entry>.Insert
    fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of Metadata.Entry).Insert
    fullName: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.RemoveAt*
  commentId: Overload:Grpc.Core.Metadata.RemoveAt
  name: RemoveAt
  nameWithType: Metadata.RemoveAt
  fullName: Grpc.Core.Metadata.RemoveAt
- uid: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<Metadata.Entry>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of Metadata.Entry).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<Metadata.Entry>.RemoveAt
    fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of Metadata.Entry).RemoveAt
    fullName: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Item*
  commentId: Overload:Grpc.Core.Metadata.Item
  name: Item
  nameWithType: Metadata.Item
  fullName: Grpc.Core.Metadata.Item
- uid: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}.Item(System.Int32)
  parent: System.Collections.Generic.IList{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<Metadata.Entry>.Item[Int32]
  fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.Item[System.Int32]
  nameWithType.vb: IList(Of Metadata.Entry).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<Metadata.Entry>.Item
    fullName: System.Collections.Generic.IList<Grpc.Core.Metadata.Entry>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of Metadata.Entry).Item
    fullName: System.Collections.Generic.IList(Of Grpc.Core.Metadata.Entry).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Add*
  commentId: Overload:Grpc.Core.Metadata.Add
  name: Add
  nameWithType: Metadata.Add
  fullName: Grpc.Core.Metadata.Add
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Add(Grpc.Core.Metadata.Entry)
  commentId: M:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Add(Grpc.Core.Metadata.Entry)
  parent: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(Metadata.Entry)
  nameWithType: ICollection<Metadata.Entry>.Add(Metadata.Entry)
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Add(Grpc.Core.Metadata.Entry)
  nameWithType.vb: ICollection(Of Metadata.Entry).Add(Metadata.Entry)
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Add(Grpc.Core.Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<Metadata.Entry>.Add
    fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of Metadata.Entry).Add
    fullName: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Grpc.Core.Metadata.Clear*
  commentId: Overload:Grpc.Core.Metadata.Clear
  name: Clear
  nameWithType: Metadata.Clear
  fullName: Grpc.Core.Metadata.Clear
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Clear
  commentId: M:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Clear
  parent: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<Metadata.Entry>.Clear()
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Clear()
  nameWithType.vb: ICollection(Of Metadata.Entry).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<Metadata.Entry>.Clear
    fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of Metadata.Entry).Clear
    fullName: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Contains*
  commentId: Overload:Grpc.Core.Metadata.Contains
  name: Contains
  nameWithType: Metadata.Contains
  fullName: Grpc.Core.Metadata.Contains
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Contains(Grpc.Core.Metadata.Entry)
  commentId: M:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Contains(Grpc.Core.Metadata.Entry)
  parent: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(Metadata.Entry)
  nameWithType: ICollection<Metadata.Entry>.Contains(Metadata.Entry)
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Contains(Grpc.Core.Metadata.Entry)
  nameWithType.vb: ICollection(Of Metadata.Entry).Contains(Metadata.Entry)
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Contains(Grpc.Core.Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<Metadata.Entry>.Contains
    fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of Metadata.Entry).Contains
    fullName: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.CopyTo*
  commentId: Overload:Grpc.Core.Metadata.CopyTo
  name: CopyTo
  nameWithType: Metadata.CopyTo
  fullName: Grpc.Core.Metadata.CopyTo
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)
  parent: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Metadata.Entry[], Int32)
  nameWithType: ICollection<Metadata.Entry>.CopyTo(Metadata.Entry[], Int32)
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.CopyTo(Grpc.Core.Metadata.Entry[], System.Int32)
  nameWithType.vb: ICollection(Of Metadata.Entry).CopyTo(Metadata.Entry(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).CopyTo(Grpc.Core.Metadata.Entry(), System.Int32)
  name.vb: CopyTo(Metadata.Entry(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<Metadata.Entry>.CopyTo
    fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of Metadata.Entry).CopyTo
    fullName: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Entry[]
  isExternal: true
  name: Metadata.Entry[]
  nameWithType: Metadata.Entry[]
  fullName: Grpc.Core.Metadata.Entry[]
  nameWithType.vb: Metadata.Entry()
  fullName.vb: Grpc.Core.Metadata.Entry()
  name.vb: Metadata.Entry()
  spec.csharp:
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Count*
  commentId: Overload:Grpc.Core.Metadata.Count
  name: Count
  nameWithType: Metadata.Count
  fullName: Grpc.Core.Metadata.Count
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Count
  commentId: P:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Count
  parent: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<Metadata.Entry>.Count
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Count
  nameWithType.vb: ICollection(Of Metadata.Entry).Count
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Grpc.Core.Metadata.IsReadOnly*
  commentId: Overload:Grpc.Core.Metadata.IsReadOnly
  name: IsReadOnly
  nameWithType: Metadata.IsReadOnly
  fullName: Grpc.Core.Metadata.IsReadOnly
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.IsReadOnly
  parent: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<Metadata.Entry>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.IsReadOnly
  nameWithType.vb: ICollection(Of Metadata.Entry).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Grpc.Core.Metadata.Remove*
  commentId: Overload:Grpc.Core.Metadata.Remove
  name: Remove
  nameWithType: Metadata.Remove
  fullName: Grpc.Core.Metadata.Remove
- uid: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Remove(Grpc.Core.Metadata.Entry)
  commentId: M:System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}.Remove(Grpc.Core.Metadata.Entry)
  parent: System.Collections.Generic.ICollection{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(Metadata.Entry)
  nameWithType: ICollection<Metadata.Entry>.Remove(Metadata.Entry)
  fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Remove(Grpc.Core.Metadata.Entry)
  nameWithType.vb: ICollection(Of Metadata.Entry).Remove(Metadata.Entry)
  fullName.vb: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Remove(Grpc.Core.Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<Metadata.Entry>.Remove
    fullName: System.Collections.Generic.ICollection<Grpc.Core.Metadata.Entry>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of Metadata.Entry).Remove
    fullName: System.Collections.Generic.ICollection(Of Grpc.Core.Metadata.Entry).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.GetEnumerator*
  commentId: Overload:Grpc.Core.Metadata.GetEnumerator
  name: GetEnumerator
  nameWithType: Metadata.GetEnumerator
  fullName: Grpc.Core.Metadata.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Grpc.Core.Metadata.Entry}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Grpc.Core.Metadata.Entry}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Grpc.Core.Metadata.Entry}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Metadata.Entry>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Grpc.Core.Metadata.Entry>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Metadata.Entry).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Grpc.Core.Metadata.Entry).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Metadata.Entry>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Grpc.Core.Metadata.Entry>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Metadata.Entry).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Grpc.Core.Metadata.Entry).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Grpc.Core.Metadata.Entry}
  commentId: T:System.Collections.Generic.IEnumerator{Grpc.Core.Metadata.Entry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Metadata.Entry>
  nameWithType: IEnumerator<Metadata.Entry>
  fullName: System.Collections.Generic.IEnumerator<Grpc.Core.Metadata.Entry>
  nameWithType.vb: IEnumerator(Of Metadata.Entry)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Grpc.Core.Metadata.Entry)
  name.vb: IEnumerator(Of Metadata.Entry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.Metadata.Entry
    name: Metadata.Entry
    nameWithType: Metadata.Entry
    fullName: Grpc.Core.Metadata.Entry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Grpc.Core.Metadata.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Metadata.IEnumerable.GetEnumerator
  fullName: Grpc.Core.Metadata.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Metadata.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
