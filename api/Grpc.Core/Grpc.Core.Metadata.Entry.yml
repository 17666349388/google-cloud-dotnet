### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Metadata.Entry
  commentId: T:Grpc.Core.Metadata.Entry
  id: Metadata.Entry
  parent: Grpc.Core
  children:
  - Grpc.Core.Metadata.Entry.#ctor(System.String,System.Byte[])
  - Grpc.Core.Metadata.Entry.#ctor(System.String,System.String)
  - Grpc.Core.Metadata.Entry.IsBinary
  - Grpc.Core.Metadata.Entry.Key
  - Grpc.Core.Metadata.Entry.ToString
  - Grpc.Core.Metadata.Entry.Value
  - Grpc.Core.Metadata.Entry.ValueBytes
  langs:
  - csharp
  - vb
  name: Metadata.Entry
  nameWithType: Metadata.Entry
  fullName: Grpc.Core.Metadata.Entry
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Entry
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 225
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nMetadata entry\n"
  example: []
  syntax:
    content: public class Entry
    content.vb: Public Class Entry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Grpc.Core.Metadata.Entry.#ctor(System.String,System.Byte[])
  commentId: M:Grpc.Core.Metadata.Entry.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: Grpc.Core.Metadata.Entry
  langs:
  - csharp
  - vb
  name: Entry(String, Byte[])
  nameWithType: Metadata.Entry.Entry(String, Byte[])
  fullName: Grpc.Core.Metadata.Entry.Entry(System.String, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 245
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of the <xref href=\"Grpc.Core.Metadata.Entry\" data-throw-if-not-resolved=\"false\"></xref> struct with a binary value.\n"
  example: []
  syntax:
    content: public Entry(string key, byte[] valueBytes)
    parameters:
    - id: key
      type: System.String
      description: Metadata key, needs to have suffix indicating a binary valued metadata entry.
    - id: valueBytes
      type: System.Byte[]
      description: Value bytes.
    content.vb: Public Sub New(key As String, valueBytes As Byte())
  overload: Grpc.Core.Metadata.Entry.#ctor*
  nameWithType.vb: Metadata.Entry.Entry(String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.Metadata.Entry.Entry(System.String, System.Byte())
  name.vb: Entry(String, Byte())
- uid: Grpc.Core.Metadata.Entry.#ctor(System.String,System.String)
  commentId: M:Grpc.Core.Metadata.Entry.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Grpc.Core.Metadata.Entry
  langs:
  - csharp
  - vb
  name: Entry(String, String)
  nameWithType: Metadata.Entry.Entry(String, String)
  fullName: Grpc.Core.Metadata.Entry.Entry(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 261
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of the <xref href=\"Grpc.Core.Metadata.Entry\" data-throw-if-not-resolved=\"false\"></xref> struct holding an ASCII value.\n"
  example: []
  syntax:
    content: public Entry(string key, string value)
    parameters:
    - id: key
      type: System.String
      description: Metadata key, must not use suffix indicating a binary valued metadata entry.
    - id: value
      type: System.String
      description: Value string. Only ASCII characters are allowed.
    content.vb: Public Sub New(key As String, value As String)
  overload: Grpc.Core.Metadata.Entry.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Grpc.Core.Metadata.Entry.Key
  commentId: P:Grpc.Core.Metadata.Entry.Key
  id: Key
  parent: Grpc.Core.Metadata.Entry
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: Metadata.Entry.Key
  fullName: Grpc.Core.Metadata.Entry.Key
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Key
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 273
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the metadata entry key.\n"
  example: []
  syntax:
    content: public string Key { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Key As String
  overload: Grpc.Core.Metadata.Entry.Key*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.Metadata.Entry.ValueBytes
  commentId: P:Grpc.Core.Metadata.Entry.ValueBytes
  id: ValueBytes
  parent: Grpc.Core.Metadata.Entry
  langs:
  - csharp
  - vb
  name: ValueBytes
  nameWithType: Metadata.Entry.ValueBytes
  fullName: Grpc.Core.Metadata.Entry.ValueBytes
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: ValueBytes
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 284
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the binary value of this metadata entry.\n"
  example: []
  syntax:
    content: public byte[] ValueBytes { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property ValueBytes As Byte()
  overload: Grpc.Core.Metadata.Entry.ValueBytes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.Metadata.Entry.Value
  commentId: P:Grpc.Core.Metadata.Entry.Value
  id: Value
  parent: Grpc.Core.Metadata.Entry
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Metadata.Entry.Value
  fullName: Grpc.Core.Metadata.Entry.Value
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Value
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 303
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGets the string value of this metadata entry.\n"
  example: []
  syntax:
    content: public string Value { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Value As String
  overload: Grpc.Core.Metadata.Entry.Value*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.Metadata.Entry.IsBinary
  commentId: P:Grpc.Core.Metadata.Entry.IsBinary
  id: IsBinary
  parent: Grpc.Core.Metadata.Entry
  langs:
  - csharp
  - vb
  name: IsBinary
  nameWithType: Metadata.Entry.IsBinary
  fullName: Grpc.Core.Metadata.Entry.IsBinary
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: IsBinary
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 315
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nReturns <code>true</code> if this entry is a binary-value entry.\n"
  example: []
  syntax:
    content: public bool IsBinary { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsBinary As Boolean
  overload: Grpc.Core.Metadata.Entry.IsBinary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Grpc.Core.Metadata.Entry.ToString
  commentId: M:Grpc.Core.Metadata.Entry.ToString
  id: ToString
  parent: Grpc.Core.Metadata.Entry
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Metadata.Entry.ToString()
  fullName: Grpc.Core.Metadata.Entry.ToString()
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Metadata.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: ToString
    path: src/csharp/Grpc.Core/Metadata.cs
    startLine: 326
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"Grpc.Core.Metadata.Entry\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Grpc.Core.Metadata.Entry.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.Metadata.Entry
  commentId: T:Grpc.Core.Metadata.Entry
  parent: Grpc.Core
  isExternal: false
  name: Metadata.Entry
  nameWithType: Metadata.Entry
  fullName: Grpc.Core.Metadata.Entry
- uid: Grpc.Core.Metadata.Entry.#ctor*
  commentId: Overload:Grpc.Core.Metadata.Entry.#ctor
  isExternal: false
  name: Entry
  nameWithType: Metadata.Entry.Entry
  fullName: Grpc.Core.Metadata.Entry.Entry
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Grpc.Core.Metadata.Entry.Key*
  commentId: Overload:Grpc.Core.Metadata.Entry.Key
  isExternal: false
  name: Key
  nameWithType: Metadata.Entry.Key
  fullName: Grpc.Core.Metadata.Entry.Key
- uid: Grpc.Core.Metadata.Entry.ValueBytes*
  commentId: Overload:Grpc.Core.Metadata.Entry.ValueBytes
  isExternal: false
  name: ValueBytes
  nameWithType: Metadata.Entry.ValueBytes
  fullName: Grpc.Core.Metadata.Entry.ValueBytes
- uid: Grpc.Core.Metadata.Entry.Value*
  commentId: Overload:Grpc.Core.Metadata.Entry.Value
  isExternal: false
  name: Value
  nameWithType: Metadata.Entry.Value
  fullName: Grpc.Core.Metadata.Entry.Value
- uid: Grpc.Core.Metadata.Entry.IsBinary*
  commentId: Overload:Grpc.Core.Metadata.Entry.IsBinary
  isExternal: false
  name: IsBinary
  nameWithType: Metadata.Entry.IsBinary
  fullName: Grpc.Core.Metadata.Entry.IsBinary
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Metadata.Entry.ToString*
  commentId: Overload:Grpc.Core.Metadata.Entry.ToString
  isExternal: false
  name: ToString
  nameWithType: Metadata.Entry.ToString
  fullName: Grpc.Core.Metadata.Entry.ToString
