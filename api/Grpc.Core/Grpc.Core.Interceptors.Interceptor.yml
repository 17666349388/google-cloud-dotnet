### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Interceptors.Interceptor
  commentId: T:Grpc.Core.Interceptors.Interceptor
  id: Interceptor
  parent: Grpc.Core.Interceptors
  children:
  - Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.ServerCallContext,Grpc.Core.ClientStreamingServerMethod{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler``2(``0,Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.ServerStreamingServerMethod{``0,``1})
  - Grpc.Core.Interceptors.Interceptor.UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})
  langs:
  - csharp
  - vb
  name: Interceptor
  nameWithType: Interceptor
  fullName: Grpc.Core.Interceptors.Interceptor
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: Interceptor
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 29
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nServes as the base class for gRPC interceptors.\nThis is an EXPERIMENTAL API.\n"
  example: []
  syntax:
    content: public abstract class Interceptor
    content.vb: Public MustInherit Class Interceptor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{``0,``1})
  id: BlockingUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: BlockingUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>)
  nameWithType: Interceptor.BlockingUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall<TRequest, TResponse>(TRequest, Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>, Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: BlockingUnaryCall
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 176
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nIntercepts a blocking invocation of a simple remote call.\n"
  example: []
  syntax:
    content: 'public virtual TResponse BlockingUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: request
      type: '{TRequest}'
      description: The request message of the invocation.
    - id: context
      type: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
      description: "\nThe <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\nassociated with the current invocation.\n"
    - id: continuation
      type: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{{TRequest},{TResponse}}
      description: "\nThe callback that continues the invocation process.\nThis can be invoked zero or more times by the interceptor.\nThe interceptor can invoke the continuation passing the given\nrequest value and context arguments, or substitute them as it sees fit.\n"
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: '{TResponse}'
      description: "\nThe response message of the current invocation.\nThe interceptor can simply return the return value of the\ncontinuation delegate passed to it intact, or an arbitrary\nvalue as it sees fit.\n"
    content.vb: Public Overridable Function BlockingUnaryCall(Of TRequest As Class, TResponse As Class)(request As TRequest, context As ClientInterceptorContext(Of TRequest, TResponse), continuation As Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse)) As TResponse
  overload: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall*
  nameWithType.vb: Interceptor.BlockingUnaryCall(Of TRequest, TResponse)(TRequest, ClientInterceptorContext(Of TRequest, TResponse), Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall(Of TRequest, TResponse)(TRequest, Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse), Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse))
  name.vb: BlockingUnaryCall(Of TRequest, TResponse)(TRequest, ClientInterceptorContext(Of TRequest, TResponse), Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{``0,``1})
  id: AsyncUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: AsyncUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>)
  nameWithType: Interceptor.AsyncUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall<TRequest, TResponse>(TRequest, Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>, Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: AsyncUnaryCall
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 204
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nIntercepts an asynchronous invocation of a simple remote call.\n"
  example: []
  syntax:
    content: 'public virtual AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: request
      type: '{TRequest}'
      description: The request message of the invocation.
    - id: context
      type: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
      description: "\nThe <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\nassociated with the current invocation.\n"
    - id: continuation
      type: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{{TRequest},{TResponse}}
      description: "\nThe callback that continues the invocation process.\nThis can be invoked zero or more times by the interceptor.\nThe interceptor can invoke the continuation passing the given\nrequest value and context arguments, or substitute them as it sees fit.\n"
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncUnaryCall{{TResponse}}
      description: "\nAn instance of <xref href=\"Grpc.Core.AsyncUnaryCall%601\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting an asynchronous unary invocation.\nThe interceptor can simply return the return value of the\ncontinuation delegate passed to it intact, or construct its\nown substitute as it sees fit.\n"
    content.vb: Public Overridable Function AsyncUnaryCall(Of TRequest As Class, TResponse As Class)(request As TRequest, context As ClientInterceptorContext(Of TRequest, TResponse), continuation As Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse)) As AsyncUnaryCall(Of TResponse)
  overload: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall*
  nameWithType.vb: Interceptor.AsyncUnaryCall(Of TRequest, TResponse)(TRequest, ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall(Of TRequest, TResponse)(TRequest, Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse), Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse))
  name.vb: AsyncUnaryCall(Of TRequest, TResponse)(TRequest, ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{``0,``1})
  id: AsyncServerStreamingCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: AsyncServerStreamingCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>)
  nameWithType: Interceptor.AsyncServerStreamingCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall<TRequest, TResponse>(TRequest, Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>, Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: AsyncServerStreamingCall
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 232
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nIntercepts an asynchronous invocation of a streaming remote call.\n"
  example: []
  syntax:
    content: 'public virtual AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: request
      type: '{TRequest}'
      description: The request message of the invocation.
    - id: context
      type: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
      description: "\nThe <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\nassociated with the current invocation.\n"
    - id: continuation
      type: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{{TRequest},{TResponse}}
      description: "\nThe callback that continues the invocation process.\nThis can be invoked zero or more times by the interceptor.\nThe interceptor can invoke the continuation passing the given\nrequest value and context arguments, or substitute them as it sees fit.\n"
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
      description: "\nAn instance of <xref href=\"Grpc.Core.AsyncServerStreamingCall%601\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting an asynchronous server-streaming invocation.\nThe interceptor can simply return the return value of the\ncontinuation delegate passed to it intact, or construct its\nown substitute as it sees fit.\n"
    content.vb: Public Overridable Function AsyncServerStreamingCall(Of TRequest As Class, TResponse As Class)(request As TRequest, context As ClientInterceptorContext(Of TRequest, TResponse), continuation As Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)) As AsyncServerStreamingCall(Of TResponse)
  overload: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall*
  nameWithType.vb: Interceptor.AsyncServerStreamingCall(Of TRequest, TResponse)(TRequest, ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall(Of TRequest, TResponse)(TRequest, Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse), Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse))
  name.vb: AsyncServerStreamingCall(Of TRequest, TResponse)(TRequest, ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{``0,``1})
  id: AsyncClientStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>)
  nameWithType: Interceptor.AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall<TRequest, TResponse>(Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>, Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: AsyncClientStreamingCall
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 259
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nIntercepts an asynchronous invocation of a client streaming call.\n"
  example: []
  syntax:
    content: 'public virtual AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: context
      type: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
      description: "\nThe <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\nassociated with the current invocation.\n"
    - id: continuation
      type: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{{TRequest},{TResponse}}
      description: "\nThe callback that continues the invocation process.\nThis can be invoked zero or more times by the interceptor.\nThe interceptor can invoke the continuation passing the given\ncontext argument, or substitute as it sees fit.\n"
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncClientStreamingCall{{TRequest},{TResponse}}
      description: "\nAn instance of <xref href=\"Grpc.Core.AsyncClientStreamingCall%602\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting an asynchronous client-streaming invocation.\nThe interceptor can simply return the return value of the\ncontinuation delegate passed to it intact, or construct its\nown substitute as it sees fit.\n"
    content.vb: Public Overridable Function AsyncClientStreamingCall(Of TRequest As Class, TResponse As Class)(context As ClientInterceptorContext(Of TRequest, TResponse), continuation As Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse)) As AsyncClientStreamingCall(Of TRequest, TResponse)
  overload: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall*
  nameWithType.vb: Interceptor.AsyncClientStreamingCall(Of TRequest, TResponse)(ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall(Of TRequest, TResponse)(Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse), Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse))
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)(ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{``0,``1})
  id: AsyncDuplexStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>)
  nameWithType: Interceptor.AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall<TRequest, TResponse>(Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>, Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: AsyncDuplexStreamingCall
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 286
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nIntercepts an asynchronous invocation of a duplex streaming call.\n"
  example: []
  syntax:
    content: 'public virtual AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: context
      type: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
      description: "\nThe <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\nassociated with the current invocation.\n"
    - id: continuation
      type: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{{TRequest},{TResponse}}
      description: "\nThe callback that continues the invocation process.\nThis can be invoked zero or more times by the interceptor.\nThe interceptor can invoke the continuation passing the given\ncontext argument, or substitute as it sees fit.\n"
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
      description: "\nAn instance of <xref href=\"Grpc.Core.AsyncDuplexStreamingCall%602\" data-throw-if-not-resolved=\"false\"></xref>\nrepresenting an asynchronous duplex-streaming invocation.\nThe interceptor can simply return the return value of the\ncontinuation delegate passed to it intact, or construct its\nown substitute as it sees fit.\n"
    content.vb: Public Overridable Function AsyncDuplexStreamingCall(Of TRequest As Class, TResponse As Class)(context As ClientInterceptorContext(Of TRequest, TResponse), continuation As Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)) As AsyncDuplexStreamingCall(Of TRequest, TResponse)
  overload: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall*
  nameWithType.vb: Interceptor.AsyncDuplexStreamingCall(Of TRequest, TResponse)(ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall(Of TRequest, TResponse)(Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse), Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse))
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)(ClientInterceptorContext(Of TRequest, TResponse), Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})
  id: UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: UnaryServerHandler<TRequest, TResponse>(TRequest, ServerCallContext, UnaryServerMethod<TRequest, TResponse>)
  nameWithType: Interceptor.UnaryServerHandler<TRequest, TResponse>(TRequest, ServerCallContext, UnaryServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.UnaryServerHandler<TRequest, TResponse>(TRequest, Grpc.Core.ServerCallContext, Grpc.Core.UnaryServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: UnaryServerHandler
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 315
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nServer-side handler for intercepting and incoming unary call.\n"
  example: []
  syntax:
    content: 'public virtual Task<TResponse> UnaryServerHandler<TRequest, TResponse>(TRequest request, ServerCallContext context, UnaryServerMethod<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: request
      type: '{TRequest}'
      description: The request value of the incoming invocation.
    - id: context
      type: Grpc.Core.ServerCallContext
      description: "\nAn instance of <xref href=\"Grpc.Core.ServerCallContext\" data-throw-if-not-resolved=\"false\"></xref> representing\nthe context of the invocation.\n"
    - id: continuation
      type: Grpc.Core.UnaryServerMethod{{TRequest},{TResponse}}
      description: "\nA delegate that asynchronously proceeds with the invocation, calling\nthe next interceptor in the chain, or the service request handler,\nin case of the last interceptor and return the response value of\nthe RPC. The interceptor can choose to call it zero or more times\nat its discretion.\n"
    typeParameters:
    - id: TRequest
      description: Request message type for this method.
    - id: TResponse
      description: Response message type for this method.
    return:
      type: System.Threading.Tasks.Task{{TResponse}}
      description: "\nA future representing the response value of the RPC. The interceptor\ncan simply return the return value from the continuation intact,\nor an arbitrary response value as it sees fit.\n"
    content.vb: Public Overridable Function UnaryServerHandler(Of TRequest As Class, TResponse As Class)(request As TRequest, context As ServerCallContext, continuation As UnaryServerMethod(Of TRequest, TResponse)) As Task(Of TResponse)
  overload: Grpc.Core.Interceptors.Interceptor.UnaryServerHandler*
  nameWithType.vb: Interceptor.UnaryServerHandler(Of TRequest, TResponse)(TRequest, ServerCallContext, UnaryServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.UnaryServerHandler(Of TRequest, TResponse)(TRequest, Grpc.Core.ServerCallContext, Grpc.Core.UnaryServerMethod(Of TRequest, TResponse))
  name.vb: UnaryServerHandler(Of TRequest, TResponse)(TRequest, ServerCallContext, UnaryServerMethod(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.ServerCallContext,Grpc.Core.ClientStreamingServerMethod{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.ServerCallContext,Grpc.Core.ClientStreamingServerMethod{``0,``1})
  id: ClientStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.ServerCallContext,Grpc.Core.ClientStreamingServerMethod{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, ServerCallContext, ClientStreamingServerMethod<TRequest, TResponse>)
  nameWithType: Interceptor.ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, ServerCallContext, ClientStreamingServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler<TRequest, TResponse>(Grpc.Core.IAsyncStreamReader<TRequest>, Grpc.Core.ServerCallContext, Grpc.Core.ClientStreamingServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: ClientStreamingServerHandler
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 346
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nServer-side handler for intercepting client streaming call.\n"
  example: []
  syntax:
    content: 'public virtual Task<TResponse> ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, ServerCallContext context, ClientStreamingServerMethod<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: requestStream
      type: Grpc.Core.IAsyncStreamReader{{TRequest}}
      description: The request stream of the incoming invocation.
    - id: context
      type: Grpc.Core.ServerCallContext
      description: "\nAn instance of <xref href=\"Grpc.Core.ServerCallContext\" data-throw-if-not-resolved=\"false\"></xref> representing\nthe context of the invocation.\n"
    - id: continuation
      type: Grpc.Core.ClientStreamingServerMethod{{TRequest},{TResponse}}
      description: "\nA delegate that asynchronously proceeds with the invocation, calling\nthe next interceptor in the chain, or the service request handler,\nin case of the last interceptor and return the response value of\nthe RPC. The interceptor can choose to call it zero or more times\nat its discretion.\n"
    typeParameters:
    - id: TRequest
      description: Request message type for this method.
    - id: TResponse
      description: Response message type for this method.
    return:
      type: System.Threading.Tasks.Task{{TResponse}}
      description: "\nA future representing the response value of the RPC. The interceptor\ncan simply return the return value from the continuation intact,\nor an arbitrary response value as it sees fit. The interceptor has\nthe ability to wrap or substitute the request stream when calling\nthe continuation.\n"
    content.vb: Public Overridable Function ClientStreamingServerHandler(Of TRequest As Class, TResponse As Class)(requestStream As IAsyncStreamReader(Of TRequest), context As ServerCallContext, continuation As ClientStreamingServerMethod(Of TRequest, TResponse)) As Task(Of TResponse)
  overload: Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler*
  nameWithType.vb: Interceptor.ClientStreamingServerHandler(Of TRequest, TResponse)(IAsyncStreamReader(Of TRequest), ServerCallContext, ClientStreamingServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler(Of TRequest, TResponse)(Grpc.Core.IAsyncStreamReader(Of TRequest), Grpc.Core.ServerCallContext, Grpc.Core.ClientStreamingServerMethod(Of TRequest, TResponse))
  name.vb: ClientStreamingServerHandler(Of TRequest, TResponse)(IAsyncStreamReader(Of TRequest), ServerCallContext, ClientStreamingServerMethod(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler``2(``0,Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.ServerStreamingServerMethod{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler``2(``0,Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.ServerStreamingServerMethod{``0,``1})
  id: ServerStreamingServerHandler``2(``0,Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.ServerStreamingServerMethod{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: ServerStreamingServerHandler<TRequest, TResponse>(TRequest, IServerStreamWriter<TResponse>, ServerCallContext, ServerStreamingServerMethod<TRequest, TResponse>)
  nameWithType: Interceptor.ServerStreamingServerHandler<TRequest, TResponse>(TRequest, IServerStreamWriter<TResponse>, ServerCallContext, ServerStreamingServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler<TRequest, TResponse>(TRequest, Grpc.Core.IServerStreamWriter<TResponse>, Grpc.Core.ServerCallContext, Grpc.Core.ServerStreamingServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: ServerStreamingServerHandler
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 372
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nServer-side handler for intercepting server streaming call.\n"
  example: []
  syntax:
    content: 'public virtual Task ServerStreamingServerHandler<TRequest, TResponse>(TRequest request, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, ServerStreamingServerMethod<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: request
      type: '{TRequest}'
      description: The request value of the incoming invocation.
    - id: responseStream
      type: Grpc.Core.IServerStreamWriter{{TResponse}}
      description: The response stream of the incoming invocation.
    - id: context
      type: Grpc.Core.ServerCallContext
      description: "\nAn instance of <xref href=\"Grpc.Core.ServerCallContext\" data-throw-if-not-resolved=\"false\"></xref> representing\nthe context of the invocation.\n"
    - id: continuation
      type: Grpc.Core.ServerStreamingServerMethod{{TRequest},{TResponse}}
      description: "\nA delegate that asynchronously proceeds with the invocation, calling\nthe next interceptor in the chain, or the service request handler,\nin case of the last interceptor and the interceptor can choose to\ncall it zero or more times at its discretion. The interceptor has\nthe ability to wrap or substitute the request value and the response stream\nwhen calling the continuation.\n"
    typeParameters:
    - id: TRequest
      description: Request message type for this method.
    - id: TResponse
      description: Response message type for this method.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function ServerStreamingServerHandler(Of TRequest As Class, TResponse As Class)(request As TRequest, responseStream As IServerStreamWriter(Of TResponse), context As ServerCallContext, continuation As ServerStreamingServerMethod(Of TRequest, TResponse)) As Task
  overload: Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler*
  nameWithType.vb: Interceptor.ServerStreamingServerHandler(Of TRequest, TResponse)(TRequest, IServerStreamWriter(Of TResponse), ServerCallContext, ServerStreamingServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler(Of TRequest, TResponse)(TRequest, Grpc.Core.IServerStreamWriter(Of TResponse), Grpc.Core.ServerCallContext, Grpc.Core.ServerStreamingServerMethod(Of TRequest, TResponse))
  name.vb: ServerStreamingServerHandler(Of TRequest, TResponse)(TRequest, IServerStreamWriter(Of TResponse), ServerCallContext, ServerStreamingServerMethod(Of TRequest, TResponse))
- uid: Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  commentId: M:Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  id: DuplexStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.DuplexStreamingServerMethod{``0,``1})
  parent: Grpc.Core.Interceptors.Interceptor
  langs:
  - csharp
  - vb
  name: DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, IServerStreamWriter<TResponse>, ServerCallContext, DuplexStreamingServerMethod<TRequest, TResponse>)
  nameWithType: Interceptor.DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, IServerStreamWriter<TResponse>, ServerCallContext, DuplexStreamingServerMethod<TRequest, TResponse>)
  fullName: Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler<TRequest, TResponse>(Grpc.Core.IAsyncStreamReader<TRequest>, Grpc.Core.IServerStreamWriter<TResponse>, Grpc.Core.ServerCallContext, Grpc.Core.DuplexStreamingServerMethod<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
      branch: v1.13.x
      repo: https://github.com/grpc/grpc
    id: DuplexStreamingServerHandler
    path: src/csharp/Grpc.Core/Interceptors/Interceptor.cs
    startLine: 398
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nServer-side handler for intercepting bidirectional streaming calls.\n"
  example: []
  syntax:
    content: 'public virtual Task DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, DuplexStreamingServerMethod<TRequest, TResponse> continuation)where TRequest : class where TResponse : class'
    parameters:
    - id: requestStream
      type: Grpc.Core.IAsyncStreamReader{{TRequest}}
      description: The request stream of the incoming invocation.
    - id: responseStream
      type: Grpc.Core.IServerStreamWriter{{TResponse}}
      description: The response stream of the incoming invocation.
    - id: context
      type: Grpc.Core.ServerCallContext
      description: "\nAn instance of <xref href=\"Grpc.Core.ServerCallContext\" data-throw-if-not-resolved=\"false\"></xref> representing\nthe context of the invocation.\n"
    - id: continuation
      type: Grpc.Core.DuplexStreamingServerMethod{{TRequest},{TResponse}}
      description: "\nA delegate that asynchronously proceeds with the invocation, calling\nthe next interceptor in the chain, or the service request handler,\nin case of the last interceptor and the interceptor can choose to\ncall it zero or more times at its discretion. The interceptor has\nthe ability to wrap or substitute the request and response streams\nwhen calling the continuation.\n"
    typeParameters:
    - id: TRequest
      description: Request message type for this method.
    - id: TResponse
      description: Response message type for this method.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DuplexStreamingServerHandler(Of TRequest As Class, TResponse As Class)(requestStream As IAsyncStreamReader(Of TRequest), responseStream As IServerStreamWriter(Of TResponse), context As ServerCallContext, continuation As DuplexStreamingServerMethod(Of TRequest, TResponse)) As Task
  overload: Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler*
  nameWithType.vb: Interceptor.DuplexStreamingServerHandler(Of TRequest, TResponse)(IAsyncStreamReader(Of TRequest), IServerStreamWriter(Of TResponse), ServerCallContext, DuplexStreamingServerMethod(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler(Of TRequest, TResponse)(Grpc.Core.IAsyncStreamReader(Of TRequest), Grpc.Core.IServerStreamWriter(Of TResponse), Grpc.Core.ServerCallContext, Grpc.Core.DuplexStreamingServerMethod(Of TRequest, TResponse))
  name.vb: DuplexStreamingServerHandler(Of TRequest, TResponse)(IAsyncStreamReader(Of TRequest), IServerStreamWriter(Of TResponse), ServerCallContext, DuplexStreamingServerMethod(Of TRequest, TResponse))
references:
- uid: Grpc.Core.Interceptors
  commentId: N:Grpc.Core.Interceptors
  isExternal: false
  name: Grpc.Core.Interceptors
  nameWithType: Grpc.Core.Interceptors
  fullName: Grpc.Core.Interceptors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext`2
  isExternal: false
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall
  isExternal: false
  name: BlockingUnaryCall
  nameWithType: Interceptor.BlockingUnaryCall
  fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: Grpc.Core.Interceptors.ClientInterceptorContext{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.ClientInterceptorContext`2
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2
  name: Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2
    name: Interceptor.BlockingUnaryCallContinuation
    nameWithType: Interceptor.BlockingUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2
    name: Interceptor.BlockingUnaryCallContinuation
    nameWithType: Interceptor.BlockingUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResponse}'
  commentId: '!:TResponse'
  definition: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: TRequest
  isExternal: false
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2
  commentId: T:Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2
  isExternal: false
  name: Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.BlockingUnaryCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2
    name: Interceptor.BlockingUnaryCallContinuation
    nameWithType: Interceptor.BlockingUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2
    name: Interceptor.BlockingUnaryCallContinuation
    nameWithType: Interceptor.BlockingUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: TResponse
  isExternal: false
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Grpc.Core.AsyncUnaryCall`1
  commentId: T:Grpc.Core.AsyncUnaryCall`1
  isExternal: false
  name: AsyncUnaryCall<TResponse>
  nameWithType: AsyncUnaryCall<TResponse>
  fullName: Grpc.Core.AsyncUnaryCall<TResponse>
  nameWithType.vb: AsyncUnaryCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncUnaryCall(Of TResponse)
  name.vb: AsyncUnaryCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall
  isExternal: false
  name: AsyncUnaryCall
  nameWithType: Interceptor.AsyncUnaryCall
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall
- uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2
  name: Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2
    name: Interceptor.AsyncUnaryCallContinuation
    nameWithType: Interceptor.AsyncUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2
    name: Interceptor.AsyncUnaryCallContinuation
    nameWithType: Interceptor.AsyncUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncUnaryCall{{TResponse}}
  commentId: T:Grpc.Core.AsyncUnaryCall{``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncUnaryCall`1
  name: AsyncUnaryCall<TResponse>
  nameWithType: AsyncUnaryCall<TResponse>
  fullName: Grpc.Core.AsyncUnaryCall<TResponse>
  nameWithType.vb: AsyncUnaryCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncUnaryCall(Of TResponse)
  name.vb: AsyncUnaryCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2
  isExternal: false
  name: Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncUnaryCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2
    name: Interceptor.AsyncUnaryCallContinuation
    nameWithType: Interceptor.AsyncUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2
    name: Interceptor.AsyncUnaryCallContinuation
    nameWithType: Interceptor.AsyncUnaryCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: Grpc.Core.AsyncServerStreamingCall`1
  commentId: T:Grpc.Core.AsyncServerStreamingCall`1
  isExternal: false
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall
  isExternal: false
  name: AsyncServerStreamingCall
  nameWithType: Interceptor.AsyncServerStreamingCall
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall
- uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
  name: Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
    name: Interceptor.AsyncServerStreamingCallContinuation
    nameWithType: Interceptor.AsyncServerStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
    name: Interceptor.AsyncServerStreamingCallContinuation
    nameWithType: Interceptor.AsyncServerStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
  commentId: T:Grpc.Core.AsyncServerStreamingCall{``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncServerStreamingCall`1
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
  isExternal: false
  name: Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncServerStreamingCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
    name: Interceptor.AsyncServerStreamingCallContinuation
    nameWithType: Interceptor.AsyncServerStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2
    name: Interceptor.AsyncServerStreamingCallContinuation
    nameWithType: Interceptor.AsyncServerStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncClientStreamingCall`2
  commentId: T:Grpc.Core.AsyncClientStreamingCall`2
  isExternal: false
  name: AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType: AsyncClientStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncClientStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall
  isExternal: false
  name: AsyncClientStreamingCall
  nameWithType: Interceptor.AsyncClientStreamingCall
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall
- uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2
  name: Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2
    name: Interceptor.AsyncClientStreamingCallContinuation
    nameWithType: Interceptor.AsyncClientStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2
    name: Interceptor.AsyncClientStreamingCallContinuation
    nameWithType: Interceptor.AsyncClientStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncClientStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncClientStreamingCall{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncClientStreamingCall`2
  name: AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType: AsyncClientStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncClientStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2
  isExternal: false
  name: Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncClientStreamingCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2
    name: Interceptor.AsyncClientStreamingCallContinuation
    nameWithType: Interceptor.AsyncClientStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2
    name: Interceptor.AsyncClientStreamingCallContinuation
    nameWithType: Interceptor.AsyncClientStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncDuplexStreamingCall`2
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall`2
  isExternal: false
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall
  isExternal: false
  name: AsyncDuplexStreamingCall
  nameWithType: Interceptor.AsyncDuplexStreamingCall
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall
- uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{``0,``1}
  parent: Grpc.Core.Interceptors
  definition: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
  name: Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
    name: Interceptor.AsyncDuplexStreamingCallContinuation
    nameWithType: Interceptor.AsyncDuplexStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
    name: Interceptor.AsyncDuplexStreamingCallContinuation
    nameWithType: Interceptor.AsyncDuplexStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncDuplexStreamingCall`2
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
  commentId: T:Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
  isExternal: false
  name: Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  nameWithType: Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>
  nameWithType.vb: Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  name.vb: Interceptor.AsyncDuplexStreamingCallContinuation(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
    name: Interceptor.AsyncDuplexStreamingCallContinuation
    nameWithType: Interceptor.AsyncDuplexStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2
    name: Interceptor.AsyncDuplexStreamingCallContinuation
    nameWithType: Interceptor.AsyncDuplexStreamingCallContinuation
    fullName: Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ServerCallContext
  commentId: T:Grpc.Core.ServerCallContext
  parent: Grpc.Core
  isExternal: false
  name: ServerCallContext
  nameWithType: ServerCallContext
  fullName: Grpc.Core.ServerCallContext
- uid: Grpc.Core.Interceptors.Interceptor.UnaryServerHandler*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.UnaryServerHandler
  isExternal: false
  name: UnaryServerHandler
  nameWithType: Interceptor.UnaryServerHandler
  fullName: Grpc.Core.Interceptors.Interceptor.UnaryServerHandler
- uid: Grpc.Core.UnaryServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.UnaryServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.UnaryServerMethod`2
  name: UnaryServerMethod<TRequest, TResponse>
  nameWithType: UnaryServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.UnaryServerMethod<TRequest, TResponse>
  nameWithType.vb: UnaryServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.UnaryServerMethod(Of TRequest, TResponse)
  name.vb: UnaryServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResponse}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResponse>
  nameWithType: Task<TResponse>
  fullName: System.Threading.Tasks.Task<TResponse>
  nameWithType.vb: Task(Of TResponse)
  fullName.vb: System.Threading.Tasks.Task(Of TResponse)
  name.vb: Task(Of TResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.UnaryServerMethod`2
  commentId: T:Grpc.Core.UnaryServerMethod`2
  isExternal: false
  name: UnaryServerMethod<TRequest, TResponse>
  nameWithType: UnaryServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.UnaryServerMethod<TRequest, TResponse>
  nameWithType.vb: UnaryServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.UnaryServerMethod(Of TRequest, TResponse)
  name.vb: UnaryServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.UnaryServerMethod`2
    name: UnaryServerMethod
    nameWithType: UnaryServerMethod
    fullName: Grpc.Core.UnaryServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler
  isExternal: false
  name: ClientStreamingServerHandler
  nameWithType: Interceptor.ClientStreamingServerHandler
  fullName: Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler
- uid: Grpc.Core.IAsyncStreamReader{{TRequest}}
  commentId: T:Grpc.Core.IAsyncStreamReader{`0}
  parent: Grpc.Core
  definition: Grpc.Core.IAsyncStreamReader`1
  name: IAsyncStreamReader<TRequest>
  nameWithType: IAsyncStreamReader<TRequest>
  fullName: Grpc.Core.IAsyncStreamReader<TRequest>
  nameWithType.vb: IAsyncStreamReader(Of TRequest)
  fullName.vb: Grpc.Core.IAsyncStreamReader(Of TRequest)
  name.vb: IAsyncStreamReader(Of TRequest)
  spec.csharp:
  - uid: Grpc.Core.IAsyncStreamReader`1
    name: IAsyncStreamReader
    nameWithType: IAsyncStreamReader
    fullName: Grpc.Core.IAsyncStreamReader
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.IAsyncStreamReader`1
    name: IAsyncStreamReader
    nameWithType: IAsyncStreamReader
    fullName: Grpc.Core.IAsyncStreamReader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ClientStreamingServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.ClientStreamingServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.ClientStreamingServerMethod`2
  name: ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType: ClientStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ClientStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.IAsyncStreamReader`1
  commentId: T:Grpc.Core.IAsyncStreamReader`1
  isExternal: false
  name: IAsyncStreamReader<T>
  nameWithType: IAsyncStreamReader<T>
  fullName: Grpc.Core.IAsyncStreamReader<T>
  nameWithType.vb: IAsyncStreamReader(Of T)
  fullName.vb: Grpc.Core.IAsyncStreamReader(Of T)
  name.vb: IAsyncStreamReader(Of T)
  spec.csharp:
  - uid: Grpc.Core.IAsyncStreamReader`1
    name: IAsyncStreamReader
    nameWithType: IAsyncStreamReader
    fullName: Grpc.Core.IAsyncStreamReader
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.IAsyncStreamReader`1
    name: IAsyncStreamReader
    nameWithType: IAsyncStreamReader
    fullName: Grpc.Core.IAsyncStreamReader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ClientStreamingServerMethod`2
  commentId: T:Grpc.Core.ClientStreamingServerMethod`2
  isExternal: false
  name: ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType: ClientStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ClientStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ClientStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ClientStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ClientStreamingServerMethod`2
    name: ClientStreamingServerMethod
    nameWithType: ClientStreamingServerMethod
    fullName: Grpc.Core.ClientStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler
  isExternal: false
  name: ServerStreamingServerHandler
  nameWithType: Interceptor.ServerStreamingServerHandler
  fullName: Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler
- uid: Grpc.Core.IServerStreamWriter{{TResponse}}
  commentId: T:Grpc.Core.IServerStreamWriter{`1}
  parent: Grpc.Core
  definition: Grpc.Core.IServerStreamWriter`1
  name: IServerStreamWriter<TResponse>
  nameWithType: IServerStreamWriter<TResponse>
  fullName: Grpc.Core.IServerStreamWriter<TResponse>
  nameWithType.vb: IServerStreamWriter(Of TResponse)
  fullName.vb: Grpc.Core.IServerStreamWriter(Of TResponse)
  name.vb: IServerStreamWriter(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: Grpc.Core.IServerStreamWriter
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: Grpc.Core.IServerStreamWriter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ServerStreamingServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.ServerStreamingServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.ServerStreamingServerMethod`2
  name: ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType: ServerStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ServerStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Grpc.Core.IServerStreamWriter`1
  commentId: T:Grpc.Core.IServerStreamWriter`1
  isExternal: false
  name: IServerStreamWriter<T>
  nameWithType: IServerStreamWriter<T>
  fullName: Grpc.Core.IServerStreamWriter<T>
  nameWithType.vb: IServerStreamWriter(Of T)
  fullName.vb: Grpc.Core.IServerStreamWriter(Of T)
  name.vb: IServerStreamWriter(Of T)
  spec.csharp:
  - uid: Grpc.Core.IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: Grpc.Core.IServerStreamWriter
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.IServerStreamWriter`1
    name: IServerStreamWriter
    nameWithType: IServerStreamWriter
    fullName: Grpc.Core.IServerStreamWriter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.ServerStreamingServerMethod`2
  commentId: T:Grpc.Core.ServerStreamingServerMethod`2
  isExternal: false
  name: ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType: ServerStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.ServerStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.ServerStreamingServerMethod(Of TRequest, TResponse)
  name.vb: ServerStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.ServerStreamingServerMethod`2
    name: ServerStreamingServerMethod
    nameWithType: ServerStreamingServerMethod
    fullName: Grpc.Core.ServerStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler*
  commentId: Overload:Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler
  isExternal: false
  name: DuplexStreamingServerHandler
  nameWithType: Interceptor.DuplexStreamingServerHandler
  fullName: Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler
- uid: Grpc.Core.DuplexStreamingServerMethod{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.DuplexStreamingServerMethod{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.DuplexStreamingServerMethod`2
  name: DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType: DuplexStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.DuplexStreamingServerMethod(Of TRequest, TResponse)
  name.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.DuplexStreamingServerMethod`2
  commentId: T:Grpc.Core.DuplexStreamingServerMethod`2
  isExternal: false
  name: DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType: DuplexStreamingServerMethod<TRequest, TResponse>
  fullName: Grpc.Core.DuplexStreamingServerMethod<TRequest, TResponse>
  nameWithType.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.DuplexStreamingServerMethod(Of TRequest, TResponse)
  name.vb: DuplexStreamingServerMethod(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.DuplexStreamingServerMethod`2
    name: DuplexStreamingServerMethod
    nameWithType: DuplexStreamingServerMethod
    fullName: Grpc.Core.DuplexStreamingServerMethod
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
