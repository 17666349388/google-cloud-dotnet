### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext`2
  id: ClientInterceptorContext`2
  parent: Grpc.Core.Interceptors
  children:
  - Grpc.Core.Interceptors.ClientInterceptorContext`2.#ctor(Grpc.Core.Method{`0,`1},System.String,Grpc.Core.CallOptions)
  - Grpc.Core.Interceptors.ClientInterceptorContext`2.Host
  - Grpc.Core.Interceptors.ClientInterceptorContext`2.Method
  - Grpc.Core.Interceptors.ClientInterceptorContext`2.Options
  langs:
  - csharp
  - vb
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  type: Struct
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: ClientInterceptorContext
    path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
    startLine: 28
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core.Interceptors
  summary: "\nCarries along the context associated with intercepted invocations on the client side.\n"
  example: []
  syntax:
    content: >-
      public struct ClientInterceptorContext<TRequest, TResponse>
          where TRequest : class where TResponse : class
    typeParameters:
    - id: TRequest
    - id: TResponse
    content.vb: Public Structure ClientInterceptorContext(Of TRequest As Class, TResponse As Class)
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.#ctor(Grpc.Core.Method{`0,`1},System.String,Grpc.Core.CallOptions)
  commentId: M:Grpc.Core.Interceptors.ClientInterceptorContext`2.#ctor(Grpc.Core.Method{`0,`1},System.String,Grpc.Core.CallOptions)
  id: '#ctor(Grpc.Core.Method{`0,`1},System.String,Grpc.Core.CallOptions)'
  parent: Grpc.Core.Interceptors.ClientInterceptorContext`2
  langs:
  - csharp
  - vb
  name: ClientInterceptorContext(Method<TRequest, TResponse>, String, CallOptions)
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.ClientInterceptorContext(Method<TRequest, TResponse>, String, CallOptions)
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.ClientInterceptorContext(Grpc.Core.Method<TRequest, TResponse>, System.String, Grpc.Core.CallOptions)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
    startLine: 39
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core.Interceptors
  summary: "\nCreates a new instance of <xref href=\"Grpc.Core.Interceptors.ClientInterceptorContext%602\" data-throw-if-not-resolved=\"false\"></xref>\nwith the specified method, host, and call options.\n"
  example: []
  syntax:
    content: public ClientInterceptorContext(Method<TRequest, TResponse> method, string host, CallOptions options)
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
      description: A <xref href="Grpc.Core.Method%602" data-throw-if-not-resolved="false"></xref> object representing the method to be invoked.
    - id: host
      type: System.String
      description: The host to dispatch the current call to.
    - id: options
      type: Grpc.Core.CallOptions
      description: A <xref href="Grpc.Core.CallOptions" data-throw-if-not-resolved="false"></xref> instance containing the call options of the current call.
    content.vb: Public Sub New(method As Method(Of TRequest, TResponse), host As String, options As CallOptions)
  overload: Grpc.Core.Interceptors.ClientInterceptorContext`2.#ctor*
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).ClientInterceptorContext(Method(Of TRequest, TResponse), String, CallOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).ClientInterceptorContext(Grpc.Core.Method(Of TRequest, TResponse), System.String, Grpc.Core.CallOptions)
  name.vb: ClientInterceptorContext(Method(Of TRequest, TResponse), String, CallOptions)
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.Method
  commentId: P:Grpc.Core.Interceptors.ClientInterceptorContext`2.Method
  id: Method
  parent: Grpc.Core.Interceptors.ClientInterceptorContext`2
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.Method
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.Method
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Method
    path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
    startLine: 50
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core.Interceptors
  summary: "\nGets the <xref href=\"Grpc.Core.Method%602\" data-throw-if-not-resolved=\"false\"></xref> instance\nrepresenting the method to be invoked.\n"
  example: []
  syntax:
    content: public Method<TRequest, TResponse> Method { get; }
    parameters: []
    return:
      type: Grpc.Core.Method{{TRequest},{TResponse}}
    content.vb: Public ReadOnly Property Method As Method(Of TRequest, TResponse)
  overload: Grpc.Core.Interceptors.ClientInterceptorContext`2.Method*
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).Method
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).Method
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.Host
  commentId: P:Grpc.Core.Interceptors.ClientInterceptorContext`2.Host
  id: Host
  parent: Grpc.Core.Interceptors.ClientInterceptorContext`2
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.Host
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.Host
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Host
    path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
    startLine: 55
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core.Interceptors
  summary: "\nGets the host that the currect invocation will be dispatched to.\n"
  example: []
  syntax:
    content: public string Host { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Host As String
  overload: Grpc.Core.Interceptors.ClientInterceptorContext`2.Host*
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).Host
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).Host
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.Options
  commentId: P:Grpc.Core.Interceptors.ClientInterceptorContext`2.Options
  id: Options
  parent: Grpc.Core.Interceptors.ClientInterceptorContext`2
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.Options
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.Options
  type: Property
  source:
    remote:
      path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Options
    path: src/csharp/Grpc.Core.Api/Interceptors/ClientInterceptorContext.cs
    startLine: 61
  assemblies:
  - Grpc.Core.Api
  namespace: Grpc.Core.Interceptors
  summary: "\nGets the <xref href=\"Grpc.Core.CallOptions\" data-throw-if-not-resolved=\"false\"></xref> structure representing the\ncall options associated with the current invocation.\n"
  example: []
  syntax:
    content: public CallOptions Options { get; }
    parameters: []
    return:
      type: Grpc.Core.CallOptions
    content.vb: Public ReadOnly Property Options As CallOptions
  overload: Grpc.Core.Interceptors.ClientInterceptorContext`2.Options*
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).Options
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).Options
references:
- uid: Grpc.Core.Interceptors
  commentId: N:Grpc.Core.Interceptors
  name: Grpc.Core.Interceptors
  nameWithType: Grpc.Core.Interceptors
  fullName: Grpc.Core.Interceptors
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
  commentId: T:Grpc.Core.Interceptors.ClientInterceptorContext`2
  name: ClientInterceptorContext<TRequest, TResponse>
  nameWithType: ClientInterceptorContext<TRequest, TResponse>
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse)
  name.vb: ClientInterceptorContext(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Interceptors.ClientInterceptorContext`2
    name: ClientInterceptorContext
    nameWithType: ClientInterceptorContext
    fullName: Grpc.Core.Interceptors.ClientInterceptorContext
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Method`2
  commentId: T:Grpc.Core.Method`2
  name: Method<TRequest, TResponse>
  nameWithType: Method<TRequest, TResponse>
  fullName: Grpc.Core.Method<TRequest, TResponse>
  nameWithType.vb: Method(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse)
  name.vb: Method(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.CallOptions
  commentId: T:Grpc.Core.CallOptions
  parent: Grpc.Core
  name: CallOptions
  nameWithType: CallOptions
  fullName: Grpc.Core.CallOptions
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.#ctor*
  commentId: Overload:Grpc.Core.Interceptors.ClientInterceptorContext`2.#ctor
  name: ClientInterceptorContext
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.ClientInterceptorContext
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.ClientInterceptorContext
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).ClientInterceptorContext
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).ClientInterceptorContext
- uid: Grpc.Core.Method{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Method{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.Method`2
  name: Method<TRequest, TResponse>
  nameWithType: Method<TRequest, TResponse>
  fullName: Grpc.Core.Method<TRequest, TResponse>
  nameWithType.vb: Method(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse)
  name.vb: Method(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.Method*
  commentId: Overload:Grpc.Core.Interceptors.ClientInterceptorContext`2.Method
  name: Method
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.Method
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.Method
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).Method
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).Method
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.Host*
  commentId: Overload:Grpc.Core.Interceptors.ClientInterceptorContext`2.Host
  name: Host
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.Host
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.Host
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).Host
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).Host
- uid: Grpc.Core.Interceptors.ClientInterceptorContext`2.Options*
  commentId: Overload:Grpc.Core.Interceptors.ClientInterceptorContext`2.Options
  name: Options
  nameWithType: ClientInterceptorContext<TRequest, TResponse>.Options
  fullName: Grpc.Core.Interceptors.ClientInterceptorContext<TRequest, TResponse>.Options
  nameWithType.vb: ClientInterceptorContext(Of TRequest, TResponse).Options
  fullName.vb: Grpc.Core.Interceptors.ClientInterceptorContext(Of TRequest, TResponse).Options
