### YamlMime:ManagedReference
items:
- uid: Grpc.Core.ClientBase`1
  commentId: T:Grpc.Core.ClientBase`1
  id: ClientBase`1
  parent: Grpc.Core
  children:
  - Grpc.Core.ClientBase`1.#ctor
  - Grpc.Core.ClientBase`1.#ctor(Grpc.Core.CallInvoker)
  - Grpc.Core.ClientBase`1.#ctor(Grpc.Core.Channel)
  - Grpc.Core.ClientBase`1.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)
  - Grpc.Core.ClientBase`1.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)
  - Grpc.Core.ClientBase`1.WithHost(System.String)
  langs:
  - csharp
  - vb
  name: ClientBase<T>
  nameWithType: ClientBase<T>
  fullName: Grpc.Core.ClientBase<T>
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/ClientBase.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: ClientBase
    path: src/csharp/Grpc.Core/ClientBase.cs
    startLine: 28
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nGeneric base class for client-side stubs.\n"
  example: []
  syntax:
    content: 'public abstract class ClientBase<T> : ClientBase where T : ClientBase<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class ClientBase(Of T As ClientBase(Of T))
          Inherits ClientBase
  inheritance:
  - System.Object
  - Grpc.Core.ClientBase
  inheritedMembers:
  - Grpc.Core.ClientBase.CallInvoker
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ClientBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Grpc.Core.ClientBase(Of T)
  name.vb: ClientBase(Of T)
- uid: Grpc.Core.ClientBase`1.#ctor
  commentId: M:Grpc.Core.ClientBase`1.#ctor
  id: '#ctor'
  parent: Grpc.Core.ClientBase`1
  langs:
  - csharp
  - vb
  name: ClientBase()
  nameWithType: ClientBase<T>.ClientBase()
  fullName: Grpc.Core.ClientBase<T>.ClientBase()
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ClientBase.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ClientBase.cs
    startLine: 37
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of <code>ClientBase</code> class that\nthrows <code>NotImplementedException</code> upon invocation of any RPC.\nThis constructor is only provided to allow creation of test doubles\nfor client classes (e.g. mocking requires a parameterless constructor).\n"
  example: []
  syntax:
    content: protected ClientBase()
    content.vb: Protected Sub New
  overload: Grpc.Core.ClientBase`1.#ctor*
  nameWithType.vb: ClientBase(Of T).ClientBase()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Grpc.Core.ClientBase(Of T).ClientBase()
- uid: Grpc.Core.ClientBase`1.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)
  commentId: M:Grpc.Core.ClientBase`1.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)
  id: '#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)'
  parent: Grpc.Core.ClientBase`1
  langs:
  - csharp
  - vb
  name: ClientBase(ClientBase.ClientBaseConfiguration)
  nameWithType: ClientBase<T>.ClientBase(ClientBase.ClientBaseConfiguration)
  fullName: Grpc.Core.ClientBase<T>.ClientBase(Grpc.Core.ClientBase.ClientBaseConfiguration)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ClientBase.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ClientBase.cs
    startLine: 45
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of <code>ClientBase</code> class.\n"
  example: []
  syntax:
    content: protected ClientBase(ClientBase.ClientBaseConfiguration configuration)
    parameters:
    - id: configuration
      type: Grpc.Core.ClientBase.ClientBaseConfiguration
      description: The configuration.
    content.vb: Protected Sub New(configuration As ClientBase.ClientBaseConfiguration)
  overload: Grpc.Core.ClientBase`1.#ctor*
  nameWithType.vb: ClientBase(Of T).ClientBase(ClientBase.ClientBaseConfiguration)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Grpc.Core.ClientBase(Of T).ClientBase(Grpc.Core.ClientBase.ClientBaseConfiguration)
- uid: Grpc.Core.ClientBase`1.#ctor(Grpc.Core.Channel)
  commentId: M:Grpc.Core.ClientBase`1.#ctor(Grpc.Core.Channel)
  id: '#ctor(Grpc.Core.Channel)'
  parent: Grpc.Core.ClientBase`1
  langs:
  - csharp
  - vb
  name: ClientBase(Channel)
  nameWithType: ClientBase<T>.ClientBase(Channel)
  fullName: Grpc.Core.ClientBase<T>.ClientBase(Grpc.Core.Channel)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ClientBase.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ClientBase.cs
    startLine: 53
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of <code>ClientBase</code> class.\n"
  example: []
  syntax:
    content: public ClientBase(Channel channel)
    parameters:
    - id: channel
      type: Grpc.Core.Channel
      description: The channel to use for remote call invocation.
    content.vb: Public Sub New(channel As Channel)
  overload: Grpc.Core.ClientBase`1.#ctor*
  nameWithType.vb: ClientBase(Of T).ClientBase(Channel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.ClientBase(Of T).ClientBase(Grpc.Core.Channel)
- uid: Grpc.Core.ClientBase`1.#ctor(Grpc.Core.CallInvoker)
  commentId: M:Grpc.Core.ClientBase`1.#ctor(Grpc.Core.CallInvoker)
  id: '#ctor(Grpc.Core.CallInvoker)'
  parent: Grpc.Core.ClientBase`1
  langs:
  - csharp
  - vb
  name: ClientBase(CallInvoker)
  nameWithType: ClientBase<T>.ClientBase(CallInvoker)
  fullName: Grpc.Core.ClientBase<T>.ClientBase(Grpc.Core.CallInvoker)
  type: Constructor
  source:
    remote:
      path: src/csharp/Grpc.Core/ClientBase.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: .ctor
    path: src/csharp/Grpc.Core/ClientBase.cs
    startLine: 61
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInitializes a new instance of <code>ClientBase</code> class.\n"
  example: []
  syntax:
    content: public ClientBase(CallInvoker callInvoker)
    parameters:
    - id: callInvoker
      type: Grpc.Core.CallInvoker
      description: The <code>CallInvoker</code> for remote call invocation.
    content.vb: Public Sub New(callInvoker As CallInvoker)
  overload: Grpc.Core.ClientBase`1.#ctor*
  nameWithType.vb: ClientBase(Of T).ClientBase(CallInvoker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.ClientBase(Of T).ClientBase(Grpc.Core.CallInvoker)
- uid: Grpc.Core.ClientBase`1.WithHost(System.String)
  commentId: M:Grpc.Core.ClientBase`1.WithHost(System.String)
  id: WithHost(System.String)
  parent: Grpc.Core.ClientBase`1
  langs:
  - csharp
  - vb
  name: WithHost(String)
  nameWithType: ClientBase<T>.WithHost(String)
  fullName: Grpc.Core.ClientBase<T>.WithHost(System.String)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/ClientBase.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: WithHost
    path: src/csharp/Grpc.Core/ClientBase.cs
    startLine: 71
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates a new client that sets host field for calls explicitly.\ngRPC supports multiple &quot;hosts&quot; being served by a single server.\nBy default (if a client was not created by calling this method),\nhost <code>null</code> with the meaning &quot;use default host&quot; is used.\n"
  example: []
  syntax:
    content: public T WithHost(string host)
    parameters:
    - id: host
      type: System.String
    return:
      type: '{T}'
    content.vb: Public Function WithHost(host As String) As T
  overload: Grpc.Core.ClientBase`1.WithHost*
  nameWithType.vb: ClientBase(Of T).WithHost(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Grpc.Core.ClientBase(Of T).WithHost(System.String)
- uid: Grpc.Core.ClientBase`1.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)
  commentId: M:Grpc.Core.ClientBase`1.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)
  id: NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)
  parent: Grpc.Core.ClientBase`1
  langs:
  - csharp
  - vb
  name: NewInstance(ClientBase.ClientBaseConfiguration)
  nameWithType: ClientBase<T>.NewInstance(ClientBase.ClientBaseConfiguration)
  fullName: Grpc.Core.ClientBase<T>.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/ClientBase.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: NewInstance
    path: src/csharp/Grpc.Core/ClientBase.cs
    startLine: 80
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nCreates a new instance of client from given <code>ClientBaseConfiguration</code>.\n"
  example: []
  syntax:
    content: protected abstract T NewInstance(ClientBase.ClientBaseConfiguration configuration)
    parameters:
    - id: configuration
      type: Grpc.Core.ClientBase.ClientBaseConfiguration
    return:
      type: '{T}'
    content.vb: Protected MustOverride Function NewInstance(configuration As ClientBase.ClientBaseConfiguration) As T
  overload: Grpc.Core.ClientBase`1.NewInstance*
  nameWithType.vb: ClientBase(Of T).NewInstance(ClientBase.ClientBaseConfiguration)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Grpc.Core.ClientBase(Of T).NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Grpc.Core.ClientBase
  commentId: T:Grpc.Core.ClientBase
  parent: Grpc.Core
  name: ClientBase
  nameWithType: ClientBase
  fullName: Grpc.Core.ClientBase
- uid: Grpc.Core.ClientBase.CallInvoker
  commentId: P:Grpc.Core.ClientBase.CallInvoker
  parent: Grpc.Core.ClientBase
  name: CallInvoker
  nameWithType: ClientBase.CallInvoker
  fullName: Grpc.Core.ClientBase.CallInvoker
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.ClientBase`1.#ctor*
  commentId: Overload:Grpc.Core.ClientBase`1.#ctor
  name: ClientBase
  nameWithType: ClientBase<T>.ClientBase
  fullName: Grpc.Core.ClientBase<T>.ClientBase
  nameWithType.vb: ClientBase(Of T).ClientBase
  fullName.vb: Grpc.Core.ClientBase(Of T).ClientBase
- uid: Grpc.Core.ClientBase.ClientBaseConfiguration
  commentId: T:Grpc.Core.ClientBase.ClientBaseConfiguration
  parent: Grpc.Core
  name: ClientBase.ClientBaseConfiguration
  nameWithType: ClientBase.ClientBaseConfiguration
  fullName: Grpc.Core.ClientBase.ClientBaseConfiguration
- uid: Grpc.Core.Channel
  commentId: T:Grpc.Core.Channel
  parent: Grpc.Core
  name: Channel
  nameWithType: Channel
  fullName: Grpc.Core.Channel
- uid: Grpc.Core.CallInvoker
  commentId: T:Grpc.Core.CallInvoker
  parent: Grpc.Core
  name: CallInvoker
  nameWithType: CallInvoker
  fullName: Grpc.Core.CallInvoker
- uid: Grpc.Core.ClientBase`1.WithHost*
  commentId: Overload:Grpc.Core.ClientBase`1.WithHost
  name: WithHost
  nameWithType: ClientBase<T>.WithHost
  fullName: Grpc.Core.ClientBase<T>.WithHost
  nameWithType.vb: ClientBase(Of T).WithHost
  fullName.vb: Grpc.Core.ClientBase(Of T).WithHost
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Grpc.Core.ClientBase`1.NewInstance*
  commentId: Overload:Grpc.Core.ClientBase`1.NewInstance
  name: NewInstance
  nameWithType: ClientBase<T>.NewInstance
  fullName: Grpc.Core.ClientBase<T>.NewInstance
  nameWithType.vb: ClientBase(Of T).NewInstance
  fullName.vb: Grpc.Core.ClientBase(Of T).NewInstance
