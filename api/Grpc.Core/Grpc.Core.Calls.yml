### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Calls
  commentId: T:Grpc.Core.Calls
  id: Calls
  parent: Grpc.Core
  children:
  - Grpc.Core.Calls.AsyncClientStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  - Grpc.Core.Calls.AsyncDuplexStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  - Grpc.Core.Calls.AsyncServerStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  - Grpc.Core.Calls.AsyncUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  - Grpc.Core.Calls.BlockingUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  langs:
  - csharp
  - vb
  name: Calls
  nameWithType: Calls
  fullName: Grpc.Core.Calls
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Calls.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: Calls
    path: src/csharp/Grpc.Core/Calls.cs
    startLine: 30
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nHelper methods for generated clients to make RPC calls.\nMost users will use this class only indirectly and will be \nmaking calls using client object generated from protocol\nbuffer definition files.\n"
  example: []
  syntax:
    content: public static class Calls
    content.vb: Public Module Calls
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Grpc.Core.Calls.BlockingUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  commentId: M:Grpc.Core.Calls.BlockingUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  id: BlockingUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  parent: Grpc.Core.Calls
  langs:
  - csharp
  - vb
  name: BlockingUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest)
  nameWithType: Calls.BlockingUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest)
  fullName: Grpc.Core.Calls.BlockingUnaryCall<TRequest, TResponse>(Grpc.Core.CallInvocationDetails<TRequest, TResponse>, TRequest)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Calls.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: BlockingUnaryCall
    path: src/csharp/Grpc.Core/Calls.cs
    startLine: 40
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a simple remote call in a blocking fashion.\n"
  example: []
  syntax:
    content: >-
      public static TResponse BlockingUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call, TRequest req)
          where TRequest : class where TResponse : class
    parameters:
    - id: call
      type: Grpc.Core.CallInvocationDetails{{TRequest},{TResponse}}
      description: The call definition.
    - id: req
      type: '{TRequest}'
      description: Request message.
    typeParameters:
    - id: TRequest
      description: Type of request message.
    - id: TResponse
      description: The of response message.
    return:
      type: '{TResponse}'
      description: The response.
    content.vb: Public Shared Function BlockingUnaryCall(Of TRequest As Class, TResponse As Class)(call As CallInvocationDetails(Of TRequest, TResponse), req As TRequest) As TResponse
  overload: Grpc.Core.Calls.BlockingUnaryCall*
  nameWithType.vb: Calls.BlockingUnaryCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse), TRequest)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Calls.BlockingUnaryCall(Of TRequest, TResponse)(Grpc.Core.CallInvocationDetails(Of TRequest, TResponse), TRequest)
  name.vb: BlockingUnaryCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse), TRequest)
- uid: Grpc.Core.Calls.AsyncUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  commentId: M:Grpc.Core.Calls.AsyncUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  id: AsyncUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  parent: Grpc.Core.Calls
  langs:
  - csharp
  - vb
  name: AsyncUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest)
  nameWithType: Calls.AsyncUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest)
  fullName: Grpc.Core.Calls.AsyncUnaryCall<TRequest, TResponse>(Grpc.Core.CallInvocationDetails<TRequest, TResponse>, TRequest)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Calls.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AsyncUnaryCall
    path: src/csharp/Grpc.Core/Calls.cs
    startLine: 56
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a simple remote call asynchronously.\n"
  example: []
  syntax:
    content: >-
      public static AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call, TRequest req)
          where TRequest : class where TResponse : class
    parameters:
    - id: call
      type: Grpc.Core.CallInvocationDetails{{TRequest},{TResponse}}
      description: The call definition.
    - id: req
      type: '{TRequest}'
      description: Request message.
    typeParameters:
    - id: TRequest
      description: Type of request message.
    - id: TResponse
      description: The of response message.
    return:
      type: Grpc.Core.AsyncUnaryCall{{TResponse}}
      description: An awaitable call object providing access to the response.
    content.vb: Public Shared Function AsyncUnaryCall(Of TRequest As Class, TResponse As Class)(call As CallInvocationDetails(Of TRequest, TResponse), req As TRequest) As AsyncUnaryCall(Of TResponse)
  overload: Grpc.Core.Calls.AsyncUnaryCall*
  nameWithType.vb: Calls.AsyncUnaryCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse), TRequest)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Calls.AsyncUnaryCall(Of TRequest, TResponse)(Grpc.Core.CallInvocationDetails(Of TRequest, TResponse), TRequest)
  name.vb: AsyncUnaryCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse), TRequest)
- uid: Grpc.Core.Calls.AsyncServerStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  commentId: M:Grpc.Core.Calls.AsyncServerStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  id: AsyncServerStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)
  parent: Grpc.Core.Calls
  langs:
  - csharp
  - vb
  name: AsyncServerStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest)
  nameWithType: Calls.AsyncServerStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>, TRequest)
  fullName: Grpc.Core.Calls.AsyncServerStreamingCall<TRequest, TResponse>(Grpc.Core.CallInvocationDetails<TRequest, TResponse>, TRequest)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Calls.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AsyncServerStreamingCall
    path: src/csharp/Grpc.Core/Calls.cs
    startLine: 77
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a server streaming call asynchronously.\nIn server streaming scenario, client sends on request and server responds with a stream of responses.\n"
  example: []
  syntax:
    content: >-
      public static AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call, TRequest req)
          where TRequest : class where TResponse : class
    parameters:
    - id: call
      type: Grpc.Core.CallInvocationDetails{{TRequest},{TResponse}}
      description: The call definition.
    - id: req
      type: '{TRequest}'
      description: Request message.
    typeParameters:
    - id: TRequest
      description: Type of request message.
    - id: TResponse
      description: The of response messages.
    return:
      type: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
      description: A call object providing access to the asynchronous response stream.
    content.vb: Public Shared Function AsyncServerStreamingCall(Of TRequest As Class, TResponse As Class)(call As CallInvocationDetails(Of TRequest, TResponse), req As TRequest) As AsyncServerStreamingCall(Of TResponse)
  overload: Grpc.Core.Calls.AsyncServerStreamingCall*
  nameWithType.vb: Calls.AsyncServerStreamingCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse), TRequest)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Calls.AsyncServerStreamingCall(Of TRequest, TResponse)(Grpc.Core.CallInvocationDetails(Of TRequest, TResponse), TRequest)
  name.vb: AsyncServerStreamingCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse), TRequest)
- uid: Grpc.Core.Calls.AsyncClientStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  commentId: M:Grpc.Core.Calls.AsyncClientStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  id: AsyncClientStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  parent: Grpc.Core.Calls
  langs:
  - csharp
  - vb
  name: AsyncClientStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>)
  nameWithType: Calls.AsyncClientStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>)
  fullName: Grpc.Core.Calls.AsyncClientStreamingCall<TRequest, TResponse>(Grpc.Core.CallInvocationDetails<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Calls.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AsyncClientStreamingCall
    path: src/csharp/Grpc.Core/Calls.cs
    startLine: 98
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a client streaming call asynchronously.\nIn client streaming scenario, client sends a stream of requests and server responds with a single response.\n"
  example: []
  syntax:
    content: >-
      public static AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call)
          where TRequest : class where TResponse : class
    parameters:
    - id: call
      type: Grpc.Core.CallInvocationDetails{{TRequest},{TResponse}}
      description: The call definition.
    typeParameters:
    - id: TRequest
      description: Type of request messages.
    - id: TResponse
      description: The of response message.
    return:
      type: Grpc.Core.AsyncClientStreamingCall{{TRequest},{TResponse}}
      description: An awaitable call object providing access to the response.
    content.vb: Public Shared Function AsyncClientStreamingCall(Of TRequest As Class, TResponse As Class)(call As CallInvocationDetails(Of TRequest, TResponse)) As AsyncClientStreamingCall(Of TRequest, TResponse)
  overload: Grpc.Core.Calls.AsyncClientStreamingCall*
  nameWithType.vb: Calls.AsyncClientStreamingCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Calls.AsyncClientStreamingCall(Of TRequest, TResponse)(Grpc.Core.CallInvocationDetails(Of TRequest, TResponse))
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse))
- uid: Grpc.Core.Calls.AsyncDuplexStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  commentId: M:Grpc.Core.Calls.AsyncDuplexStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  id: AsyncDuplexStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})
  parent: Grpc.Core.Calls
  langs:
  - csharp
  - vb
  name: AsyncDuplexStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>)
  nameWithType: Calls.AsyncDuplexStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse>)
  fullName: Grpc.Core.Calls.AsyncDuplexStreamingCall<TRequest, TResponse>(Grpc.Core.CallInvocationDetails<TRequest, TResponse>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Calls.cs
      branch: v1.27.x
      repo: https://github.com/grpc/grpc
    id: AsyncDuplexStreamingCall
    path: src/csharp/Grpc.Core/Calls.cs
    startLine: 120
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a duplex streaming call asynchronously.\nIn duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses.\nThe response stream is completely independent and both side can be sending messages at the same time.\n"
  example: []
  syntax:
    content: >-
      public static AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(CallInvocationDetails<TRequest, TResponse> call)
          where TRequest : class where TResponse : class
    parameters:
    - id: call
      type: Grpc.Core.CallInvocationDetails{{TRequest},{TResponse}}
      description: The call definition.
    typeParameters:
    - id: TRequest
      description: Type of request messages.
    - id: TResponse
      description: Type of responsemessages.
    return:
      type: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
      description: A call object providing access to the asynchronous request and response streams.
    content.vb: Public Shared Function AsyncDuplexStreamingCall(Of TRequest As Class, TResponse As Class)(call As CallInvocationDetails(Of TRequest, TResponse)) As AsyncDuplexStreamingCall(Of TRequest, TResponse)
  overload: Grpc.Core.Calls.AsyncDuplexStreamingCall*
  nameWithType.vb: Calls.AsyncDuplexStreamingCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Calls.AsyncDuplexStreamingCall(Of TRequest, TResponse)(Grpc.Core.CallInvocationDetails(Of TRequest, TResponse))
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)(CallInvocationDetails(Of TRequest, TResponse))
references:
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.Calls.BlockingUnaryCall*
  commentId: Overload:Grpc.Core.Calls.BlockingUnaryCall
  name: BlockingUnaryCall
  nameWithType: Calls.BlockingUnaryCall
  fullName: Grpc.Core.Calls.BlockingUnaryCall
- uid: Grpc.Core.CallInvocationDetails{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.CallInvocationDetails{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.CallInvocationDetails`2
  name: CallInvocationDetails<TRequest, TResponse>
  nameWithType: CallInvocationDetails<TRequest, TResponse>
  fullName: Grpc.Core.CallInvocationDetails<TRequest, TResponse>
  nameWithType.vb: CallInvocationDetails(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.CallInvocationDetails(Of TRequest, TResponse)
  name.vb: CallInvocationDetails(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.CallInvocationDetails`2
    name: CallInvocationDetails
    nameWithType: CallInvocationDetails
    fullName: Grpc.Core.CallInvocationDetails
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.CallInvocationDetails`2
    name: CallInvocationDetails
    nameWithType: CallInvocationDetails
    fullName: Grpc.Core.CallInvocationDetails
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: '{TResponse}'
  commentId: '!:TResponse'
  definition: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Grpc.Core.CallInvocationDetails`2
  commentId: T:Grpc.Core.CallInvocationDetails`2
  parent: Grpc.Core
  name: CallInvocationDetails<TRequest, TResponse>
  nameWithType: CallInvocationDetails<TRequest, TResponse>
  fullName: Grpc.Core.CallInvocationDetails<TRequest, TResponse>
  nameWithType.vb: CallInvocationDetails(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.CallInvocationDetails(Of TRequest, TResponse)
  name.vb: CallInvocationDetails(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.CallInvocationDetails`2
    name: CallInvocationDetails
    nameWithType: CallInvocationDetails
    fullName: Grpc.Core.CallInvocationDetails
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.CallInvocationDetails`2
    name: CallInvocationDetails
    nameWithType: CallInvocationDetails
    fullName: Grpc.Core.CallInvocationDetails
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Grpc.Core.Calls.AsyncUnaryCall*
  commentId: Overload:Grpc.Core.Calls.AsyncUnaryCall
  name: AsyncUnaryCall
  nameWithType: Calls.AsyncUnaryCall
  fullName: Grpc.Core.Calls.AsyncUnaryCall
- uid: Grpc.Core.AsyncUnaryCall{{TResponse}}
  commentId: T:Grpc.Core.AsyncUnaryCall{``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncUnaryCall`1
  name: AsyncUnaryCall<TResponse>
  nameWithType: AsyncUnaryCall<TResponse>
  fullName: Grpc.Core.AsyncUnaryCall<TResponse>
  nameWithType.vb: AsyncUnaryCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncUnaryCall(Of TResponse)
  name.vb: AsyncUnaryCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncUnaryCall`1
  commentId: T:Grpc.Core.AsyncUnaryCall`1
  name: AsyncUnaryCall<TResponse>
  nameWithType: AsyncUnaryCall<TResponse>
  fullName: Grpc.Core.AsyncUnaryCall<TResponse>
  nameWithType.vb: AsyncUnaryCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncUnaryCall(Of TResponse)
  name.vb: AsyncUnaryCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Calls.AsyncServerStreamingCall*
  commentId: Overload:Grpc.Core.Calls.AsyncServerStreamingCall
  name: AsyncServerStreamingCall
  nameWithType: Calls.AsyncServerStreamingCall
  fullName: Grpc.Core.Calls.AsyncServerStreamingCall
- uid: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
  commentId: T:Grpc.Core.AsyncServerStreamingCall{``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncServerStreamingCall`1
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncServerStreamingCall`1
  commentId: T:Grpc.Core.AsyncServerStreamingCall`1
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Calls.AsyncClientStreamingCall*
  commentId: Overload:Grpc.Core.Calls.AsyncClientStreamingCall
  name: AsyncClientStreamingCall
  nameWithType: Calls.AsyncClientStreamingCall
  fullName: Grpc.Core.Calls.AsyncClientStreamingCall
- uid: Grpc.Core.AsyncClientStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncClientStreamingCall{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncClientStreamingCall`2
  name: AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType: AsyncClientStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncClientStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncClientStreamingCall`2
  commentId: T:Grpc.Core.AsyncClientStreamingCall`2
  name: AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType: AsyncClientStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncClientStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.Calls.AsyncDuplexStreamingCall*
  commentId: Overload:Grpc.Core.Calls.AsyncDuplexStreamingCall
  name: AsyncDuplexStreamingCall
  nameWithType: Calls.AsyncDuplexStreamingCall
  fullName: Grpc.Core.Calls.AsyncDuplexStreamingCall
- uid: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncDuplexStreamingCall`2
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncDuplexStreamingCall`2
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall`2
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
