### YamlMime:ManagedReference
items:
- uid: Grpc.Core.CallInvoker
  commentId: T:Grpc.Core.CallInvoker
  id: CallInvoker
  parent: Grpc.Core
  children:
  - Grpc.Core.CallInvoker.AsyncClientStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  - Grpc.Core.CallInvoker.AsyncDuplexStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  - Grpc.Core.CallInvoker.AsyncServerStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  - Grpc.Core.CallInvoker.AsyncUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  - Grpc.Core.CallInvoker.BlockingUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  langs:
  - csharp
  - vb
  name: CallInvoker
  nameWithType: CallInvoker
  fullName: Grpc.Core.CallInvoker
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/CallInvoker.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: CallInvoker
    path: src/csharp/Grpc.Core/CallInvoker.cs
    startLine: 27
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nAbstraction of client-side RPC invocation.\n"
  example: []
  syntax:
    content: public abstract class CallInvoker
    content.vb: Public MustInherit Class CallInvoker
  seealso:
  - linkId: Grpc.Core.Calls
    commentId: T:Grpc.Core.Calls
  inheritance:
  - System.Object
  derivedClasses:
  - Grpc.Core.DefaultCallInvoker
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Grpc.Core.CallInvoker.BlockingUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  commentId: M:Grpc.Core.CallInvoker.BlockingUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  id: BlockingUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  parent: Grpc.Core.CallInvoker
  langs:
  - csharp
  - vb
  name: BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest)
  nameWithType: CallInvoker.BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest)
  fullName: Grpc.Core.CallInvoker.BlockingUnaryCall<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, System.String, Grpc.Core.CallOptions, TRequest)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/CallInvoker.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: BlockingUnaryCall
    path: src/csharp/Grpc.Core/CallInvoker.cs
    startLine: 32
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a simple remote call in a blocking fashion.\n"
  example: []
  syntax:
    content: 'public abstract TResponse BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request)where TRequest : class where TResponse : class'
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
    - id: host
      type: System.String
    - id: options
      type: Grpc.Core.CallOptions
    - id: request
      type: '{TRequest}'
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: '{TResponse}'
    content.vb: Public MustOverride Function BlockingUnaryCall(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), host As String, options As CallOptions, request As TRequest) As TResponse
  overload: Grpc.Core.CallInvoker.BlockingUnaryCall*
  nameWithType.vb: CallInvoker.BlockingUnaryCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions, TRequest)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Grpc.Core.CallInvoker.BlockingUnaryCall(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), System.String, Grpc.Core.CallOptions, TRequest)
  name.vb: BlockingUnaryCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions, TRequest)
- uid: Grpc.Core.CallInvoker.AsyncUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  commentId: M:Grpc.Core.CallInvoker.AsyncUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  id: AsyncUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  parent: Grpc.Core.CallInvoker
  langs:
  - csharp
  - vb
  name: AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest)
  nameWithType: CallInvoker.AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest)
  fullName: Grpc.Core.CallInvoker.AsyncUnaryCall<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, System.String, Grpc.Core.CallOptions, TRequest)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/CallInvoker.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: AsyncUnaryCall
    path: src/csharp/Grpc.Core/CallInvoker.cs
    startLine: 39
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a simple remote call asynchronously.\n"
  example: []
  syntax:
    content: 'public abstract AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request)where TRequest : class where TResponse : class'
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
    - id: host
      type: System.String
    - id: options
      type: Grpc.Core.CallOptions
    - id: request
      type: '{TRequest}'
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncUnaryCall{{TResponse}}
    content.vb: Public MustOverride Function AsyncUnaryCall(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), host As String, options As CallOptions, request As TRequest) As AsyncUnaryCall(Of TResponse)
  overload: Grpc.Core.CallInvoker.AsyncUnaryCall*
  nameWithType.vb: CallInvoker.AsyncUnaryCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions, TRequest)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Grpc.Core.CallInvoker.AsyncUnaryCall(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), System.String, Grpc.Core.CallOptions, TRequest)
  name.vb: AsyncUnaryCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions, TRequest)
- uid: Grpc.Core.CallInvoker.AsyncServerStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  commentId: M:Grpc.Core.CallInvoker.AsyncServerStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  id: AsyncServerStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)
  parent: Grpc.Core.CallInvoker
  langs:
  - csharp
  - vb
  name: AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest)
  nameWithType: CallInvoker.AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest)
  fullName: Grpc.Core.CallInvoker.AsyncServerStreamingCall<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, System.String, Grpc.Core.CallOptions, TRequest)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/CallInvoker.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: AsyncServerStreamingCall
    path: src/csharp/Grpc.Core/CallInvoker.cs
    startLine: 47
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a server streaming call asynchronously.\nIn server streaming scenario, client sends on request and server responds with a stream of responses.\n"
  example: []
  syntax:
    content: 'public abstract AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request)where TRequest : class where TResponse : class'
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
    - id: host
      type: System.String
    - id: options
      type: Grpc.Core.CallOptions
    - id: request
      type: '{TRequest}'
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
    content.vb: Public MustOverride Function AsyncServerStreamingCall(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), host As String, options As CallOptions, request As TRequest) As AsyncServerStreamingCall(Of TResponse)
  overload: Grpc.Core.CallInvoker.AsyncServerStreamingCall*
  nameWithType.vb: CallInvoker.AsyncServerStreamingCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions, TRequest)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Grpc.Core.CallInvoker.AsyncServerStreamingCall(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), System.String, Grpc.Core.CallOptions, TRequest)
  name.vb: AsyncServerStreamingCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions, TRequest)
- uid: Grpc.Core.CallInvoker.AsyncClientStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  commentId: M:Grpc.Core.CallInvoker.AsyncClientStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  id: AsyncClientStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  parent: Grpc.Core.CallInvoker
  langs:
  - csharp
  - vb
  name: AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions)
  nameWithType: CallInvoker.AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions)
  fullName: Grpc.Core.CallInvoker.AsyncClientStreamingCall<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, System.String, Grpc.Core.CallOptions)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/CallInvoker.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: AsyncClientStreamingCall
    path: src/csharp/Grpc.Core/CallInvoker.cs
    startLine: 55
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a client streaming call asynchronously.\nIn client streaming scenario, client sends a stream of requests and server responds with a single response.\n"
  example: []
  syntax:
    content: 'public abstract AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options)where TRequest : class where TResponse : class'
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
    - id: host
      type: System.String
    - id: options
      type: Grpc.Core.CallOptions
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncClientStreamingCall{{TRequest},{TResponse}}
    content.vb: Public MustOverride Function AsyncClientStreamingCall(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), host As String, options As CallOptions) As AsyncClientStreamingCall(Of TRequest, TResponse)
  overload: Grpc.Core.CallInvoker.AsyncClientStreamingCall*
  nameWithType.vb: CallInvoker.AsyncClientStreamingCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Grpc.Core.CallInvoker.AsyncClientStreamingCall(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), System.String, Grpc.Core.CallOptions)
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions)
- uid: Grpc.Core.CallInvoker.AsyncDuplexStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  commentId: M:Grpc.Core.CallInvoker.AsyncDuplexStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  id: AsyncDuplexStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)
  parent: Grpc.Core.CallInvoker
  langs:
  - csharp
  - vb
  name: AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions)
  nameWithType: CallInvoker.AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions)
  fullName: Grpc.Core.CallInvoker.AsyncDuplexStreamingCall<TRequest, TResponse>(Grpc.Core.Method<TRequest, TResponse>, System.String, Grpc.Core.CallOptions)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/CallInvoker.cs
      branch: v1.6.x
      repo: https://github.com/grpc/grpc
    id: AsyncDuplexStreamingCall
    path: src/csharp/Grpc.Core/CallInvoker.cs
    startLine: 64
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core
  summary: "\nInvokes a duplex streaming call asynchronously.\nIn duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses.\nThe response stream is completely independent and both side can be sending messages at the same time.\n"
  example: []
  syntax:
    content: 'public abstract AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options)where TRequest : class where TResponse : class'
    parameters:
    - id: method
      type: Grpc.Core.Method{{TRequest},{TResponse}}
    - id: host
      type: System.String
    - id: options
      type: Grpc.Core.CallOptions
    typeParameters:
    - id: TRequest
    - id: TResponse
    return:
      type: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
    content.vb: Public MustOverride Function AsyncDuplexStreamingCall(Of TRequest As Class, TResponse As Class)(method As Method(Of TRequest, TResponse), host As String, options As CallOptions) As AsyncDuplexStreamingCall(Of TRequest, TResponse)
  overload: Grpc.Core.CallInvoker.AsyncDuplexStreamingCall*
  nameWithType.vb: CallInvoker.AsyncDuplexStreamingCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Grpc.Core.CallInvoker.AsyncDuplexStreamingCall(Of TRequest, TResponse)(Grpc.Core.Method(Of TRequest, TResponse), System.String, Grpc.Core.CallOptions)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)(Method(Of TRequest, TResponse), String, CallOptions)
references:
- uid: Grpc.Core.Calls
  commentId: T:Grpc.Core.Calls
  isExternal: false
  name: Calls
  nameWithType: Calls
  fullName: Grpc.Core.Calls
- uid: Grpc.Core
  commentId: N:Grpc.Core
  isExternal: false
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.CallInvoker.BlockingUnaryCall*
  commentId: Overload:Grpc.Core.CallInvoker.BlockingUnaryCall
  isExternal: false
  name: BlockingUnaryCall
  nameWithType: CallInvoker.BlockingUnaryCall
  fullName: Grpc.Core.CallInvoker.BlockingUnaryCall
- uid: Grpc.Core.Method{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.Method{`0,`1}
  parent: Grpc.Core
  definition: Grpc.Core.Method`2
  name: Method<TRequest, TResponse>
  nameWithType: Method<TRequest, TResponse>
  fullName: Grpc.Core.Method<TRequest, TResponse>
  nameWithType.vb: Method(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse)
  name.vb: Method(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Grpc.Core.CallOptions
  commentId: T:Grpc.Core.CallOptions
  parent: Grpc.Core
  isExternal: false
  name: CallOptions
  nameWithType: CallOptions
  fullName: Grpc.Core.CallOptions
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: '{TResponse}'
  commentId: '!:TResponse'
  definition: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Grpc.Core.Method`2
  commentId: T:Grpc.Core.Method`2
  isExternal: false
  name: Method<TRequest, TResponse>
  nameWithType: Method<TRequest, TResponse>
  fullName: Grpc.Core.Method<TRequest, TResponse>
  nameWithType.vb: Method(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.Method(Of TRequest, TResponse)
  name.vb: Method(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.Method`2
    name: Method
    nameWithType: Method
    fullName: Grpc.Core.Method
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: TRequest
  isExternal: false
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: TResponse
  isExternal: false
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Grpc.Core.CallInvoker.AsyncUnaryCall*
  commentId: Overload:Grpc.Core.CallInvoker.AsyncUnaryCall
  isExternal: false
  name: AsyncUnaryCall
  nameWithType: CallInvoker.AsyncUnaryCall
  fullName: Grpc.Core.CallInvoker.AsyncUnaryCall
- uid: Grpc.Core.AsyncUnaryCall{{TResponse}}
  commentId: T:Grpc.Core.AsyncUnaryCall{``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncUnaryCall`1
  name: AsyncUnaryCall<TResponse>
  nameWithType: AsyncUnaryCall<TResponse>
  fullName: Grpc.Core.AsyncUnaryCall<TResponse>
  nameWithType.vb: AsyncUnaryCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncUnaryCall(Of TResponse)
  name.vb: AsyncUnaryCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncUnaryCall`1
  commentId: T:Grpc.Core.AsyncUnaryCall`1
  isExternal: false
  name: AsyncUnaryCall<TResponse>
  nameWithType: AsyncUnaryCall<TResponse>
  fullName: Grpc.Core.AsyncUnaryCall<TResponse>
  nameWithType.vb: AsyncUnaryCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncUnaryCall(Of TResponse)
  name.vb: AsyncUnaryCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncUnaryCall`1
    name: AsyncUnaryCall
    nameWithType: AsyncUnaryCall
    fullName: Grpc.Core.AsyncUnaryCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.CallInvoker.AsyncServerStreamingCall*
  commentId: Overload:Grpc.Core.CallInvoker.AsyncServerStreamingCall
  isExternal: false
  name: AsyncServerStreamingCall
  nameWithType: CallInvoker.AsyncServerStreamingCall
  fullName: Grpc.Core.CallInvoker.AsyncServerStreamingCall
- uid: Grpc.Core.AsyncServerStreamingCall{{TResponse}}
  commentId: T:Grpc.Core.AsyncServerStreamingCall{``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncServerStreamingCall`1
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncServerStreamingCall`1
  commentId: T:Grpc.Core.AsyncServerStreamingCall`1
  isExternal: false
  name: AsyncServerStreamingCall<TResponse>
  nameWithType: AsyncServerStreamingCall<TResponse>
  fullName: Grpc.Core.AsyncServerStreamingCall<TResponse>
  nameWithType.vb: AsyncServerStreamingCall(Of TResponse)
  fullName.vb: Grpc.Core.AsyncServerStreamingCall(Of TResponse)
  name.vb: AsyncServerStreamingCall(Of TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncServerStreamingCall`1
    name: AsyncServerStreamingCall
    nameWithType: AsyncServerStreamingCall
    fullName: Grpc.Core.AsyncServerStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.CallInvoker.AsyncClientStreamingCall*
  commentId: Overload:Grpc.Core.CallInvoker.AsyncClientStreamingCall
  isExternal: false
  name: AsyncClientStreamingCall
  nameWithType: CallInvoker.AsyncClientStreamingCall
  fullName: Grpc.Core.CallInvoker.AsyncClientStreamingCall
- uid: Grpc.Core.AsyncClientStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncClientStreamingCall{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncClientStreamingCall`2
  name: AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType: AsyncClientStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncClientStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncClientStreamingCall`2
  commentId: T:Grpc.Core.AsyncClientStreamingCall`2
  isExternal: false
  name: AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType: AsyncClientStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncClientStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncClientStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncClientStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncClientStreamingCall`2
    name: AsyncClientStreamingCall
    nameWithType: AsyncClientStreamingCall
    fullName: Grpc.Core.AsyncClientStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.CallInvoker.AsyncDuplexStreamingCall*
  commentId: Overload:Grpc.Core.CallInvoker.AsyncDuplexStreamingCall
  isExternal: false
  name: AsyncDuplexStreamingCall
  nameWithType: CallInvoker.AsyncDuplexStreamingCall
  fullName: Grpc.Core.CallInvoker.AsyncDuplexStreamingCall
- uid: Grpc.Core.AsyncDuplexStreamingCall{{TRequest},{TResponse}}
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall{``0,``1}
  parent: Grpc.Core
  definition: Grpc.Core.AsyncDuplexStreamingCall`2
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Grpc.Core.AsyncDuplexStreamingCall`2
  commentId: T:Grpc.Core.AsyncDuplexStreamingCall`2
  isExternal: false
  name: AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType: AsyncDuplexStreamingCall<TRequest, TResponse>
  fullName: Grpc.Core.AsyncDuplexStreamingCall<TRequest, TResponse>
  nameWithType.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  fullName.vb: Grpc.Core.AsyncDuplexStreamingCall(Of TRequest, TResponse)
  name.vb: AsyncDuplexStreamingCall(Of TRequest, TResponse)
  spec.csharp:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Grpc.Core.AsyncDuplexStreamingCall`2
    name: AsyncDuplexStreamingCall
    nameWithType: AsyncDuplexStreamingCall
    fullName: Grpc.Core.AsyncDuplexStreamingCall
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
