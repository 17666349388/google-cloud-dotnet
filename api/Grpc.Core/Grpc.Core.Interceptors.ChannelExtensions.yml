### YamlMime:ManagedReference
items:
- uid: Grpc.Core.Interceptors.ChannelExtensions
  commentId: T:Grpc.Core.Interceptors.ChannelExtensions
  id: ChannelExtensions
  parent: Grpc.Core.Interceptors
  children:
  - Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor)
  - Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor[])
  - Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata})
  langs:
  - csharp
  - vb
  name: ChannelExtensions
  nameWithType: ChannelExtensions
  fullName: Grpc.Core.Interceptors.ChannelExtensions
  type: Class
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: ChannelExtensions
    path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
    startLine: 25
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nProvides extension methods to make it easy to register interceptors on Channel objects.\n"
  example: []
  syntax:
    content: public static class ChannelExtensions
    content.vb: Public Module ChannelExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor)
  commentId: M:Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor)
  id: Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor)
  isExtensionMethod: true
  parent: Grpc.Core.Interceptors.ChannelExtensions
  langs:
  - csharp
  - vb
  name: Intercept(Channel, Interceptor)
  nameWithType: ChannelExtensions.Intercept(Channel, Interceptor)
  fullName: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel, Grpc.Core.Interceptors.Interceptor)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Intercept
    path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
    startLine: 40
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nReturns a <xref href=\"Grpc.Core.CallInvoker\" data-throw-if-not-resolved=\"false\"></xref> instance that intercepts\nthe channel with the given interceptor.\n"
  remarks: "\nMultiple interceptors can be added on top of each other by calling\n&quot;channel.Intercept(a, b, c)&quot;.  The order of invocation will be &quot;a&quot;, &quot;b&quot;, and then &quot;c&quot;.\nInterceptors can be later added to an existing intercepted channel, effectively\nbuilding a chain like &quot;channel.Intercept(c).Intercept(b).Intercept(a)&quot;.  Note that\nin this case, the last interceptor added will be the first to take control.\n"
  example: []
  syntax:
    content: public static CallInvoker Intercept(this Channel channel, Interceptor interceptor)
    parameters:
    - id: channel
      type: Grpc.Core.Channel
      description: The channel to intercept.
    - id: interceptor
      type: Grpc.Core.Interceptors.Interceptor
      description: The interceptor to intercept the channel with.
    return:
      type: Grpc.Core.CallInvoker
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intercept(channel As Channel, interceptor As Interceptor) As CallInvoker
  overload: Grpc.Core.Interceptors.ChannelExtensions.Intercept*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor[])
  commentId: M:Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor[])
  id: Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor[])
  isExtensionMethod: true
  parent: Grpc.Core.Interceptors.ChannelExtensions
  langs:
  - csharp
  - vb
  name: Intercept(Channel, Interceptor[])
  nameWithType: ChannelExtensions.Intercept(Channel, Interceptor[])
  fullName: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel, Grpc.Core.Interceptors.Interceptor[])
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Intercept
    path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
    startLine: 61
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nReturns a <xref href=\"Grpc.Core.CallInvoker\" data-throw-if-not-resolved=\"false\"></xref> instance that intercepts\nthe channel with the given interceptors.\n"
  remarks: "\nMultiple interceptors can be added on top of each other by calling\n&quot;channel.Intercept(a, b, c)&quot;.  The order of invocation will be &quot;a&quot;, &quot;b&quot;, and then &quot;c&quot;.\nInterceptors can be later added to an existing intercepted channel, effectively\nbuilding a chain like &quot;channel.Intercept(c).Intercept(b).Intercept(a)&quot;.  Note that\nin this case, the last interceptor added will be the first to take control.\n"
  example: []
  syntax:
    content: public static CallInvoker Intercept(this Channel channel, params Interceptor[] interceptors)
    parameters:
    - id: channel
      type: Grpc.Core.Channel
      description: The channel to intercept.
    - id: interceptors
      type: Grpc.Core.Interceptors.Interceptor[]
      description: "\nAn array of interceptors to intercept the channel with.\nControl is passed to the interceptors in the order specified.\n"
    return:
      type: Grpc.Core.CallInvoker
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intercept(channel As Channel, ParamArray interceptors As Interceptor()) As CallInvoker
  overload: Grpc.Core.Interceptors.ChannelExtensions.Intercept*
  nameWithType.vb: ChannelExtensions.Intercept(Channel, Interceptor())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel, Grpc.Core.Interceptors.Interceptor())
  name.vb: Intercept(Channel, Interceptor())
- uid: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata})
  commentId: M:Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata})
  id: Intercept(Grpc.Core.Channel,System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata})
  isExtensionMethod: true
  parent: Grpc.Core.Interceptors.ChannelExtensions
  langs:
  - csharp
  - vb
  name: Intercept(Channel, Func<Metadata, Metadata>)
  nameWithType: ChannelExtensions.Intercept(Channel, Func<Metadata, Metadata>)
  fullName: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel, System.Func<Grpc.Core.Metadata, Grpc.Core.Metadata>)
  type: Method
  source:
    remote:
      path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
      branch: v1.22.x
      repo: https://github.com/grpc/grpc
    id: Intercept
    path: src/csharp/Grpc.Core/Interceptors/ChannelExtensions.cs
    startLine: 81
  assemblies:
  - Grpc.Core
  namespace: Grpc.Core.Interceptors
  summary: "\nReturns a <xref href=\"Grpc.Core.CallInvoker\" data-throw-if-not-resolved=\"false\"></xref> instance that intercepts\nthe invoker with the given interceptor.\n"
  remarks: "\nMultiple interceptors can be added on top of each other by\nbuilding a chain like &quot;channel.Intercept(c).Intercept(b).Intercept(a)&quot;.  Note that\nin this case, the last interceptor added will be the first to take control.\n"
  example: []
  syntax:
    content: public static CallInvoker Intercept(this Channel channel, Func<Metadata, Metadata> interceptor)
    parameters:
    - id: channel
      type: Grpc.Core.Channel
      description: The channel to intercept.
    - id: interceptor
      type: System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata}
      description: "\nAn interceptor delegate that takes the request metadata to be sent with an outgoing call\nand returns a <xref href=\"Grpc.Core.Metadata\" data-throw-if-not-resolved=\"false\"></xref> instance that will replace the existing\ninvocation metadata.\n"
    return:
      type: Grpc.Core.CallInvoker
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intercept(channel As Channel, interceptor As Func(Of Metadata, Metadata)) As CallInvoker
  overload: Grpc.Core.Interceptors.ChannelExtensions.Intercept*
  nameWithType.vb: ChannelExtensions.Intercept(Channel, Func(Of Metadata, Metadata))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel, System.Func(Of Grpc.Core.Metadata, Grpc.Core.Metadata))
  name.vb: Intercept(Channel, Func(Of Metadata, Metadata))
references:
- uid: Grpc.Core.Interceptors
  commentId: N:Grpc.Core.Interceptors
  name: Grpc.Core.Interceptors
  nameWithType: Grpc.Core.Interceptors
  fullName: Grpc.Core.Interceptors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Grpc.Core.CallInvoker
  commentId: T:Grpc.Core.CallInvoker
  parent: Grpc.Core
  name: CallInvoker
  nameWithType: CallInvoker
  fullName: Grpc.Core.CallInvoker
- uid: Grpc.Core.Interceptors.ChannelExtensions.Intercept*
  commentId: Overload:Grpc.Core.Interceptors.ChannelExtensions.Intercept
  name: Intercept
  nameWithType: ChannelExtensions.Intercept
  fullName: Grpc.Core.Interceptors.ChannelExtensions.Intercept
- uid: Grpc.Core.Channel
  commentId: T:Grpc.Core.Channel
  parent: Grpc.Core
  name: Channel
  nameWithType: Channel
  fullName: Grpc.Core.Channel
- uid: Grpc.Core.Interceptors.Interceptor
  commentId: T:Grpc.Core.Interceptors.Interceptor
  parent: Grpc.Core.Interceptors
  name: Interceptor
  nameWithType: Interceptor
  fullName: Grpc.Core.Interceptors.Interceptor
- uid: Grpc.Core
  commentId: N:Grpc.Core
  name: Grpc.Core
  nameWithType: Grpc.Core
  fullName: Grpc.Core
- uid: Grpc.Core.Interceptors.Interceptor[]
  isExternal: true
  name: Interceptor[]
  nameWithType: Interceptor[]
  fullName: Grpc.Core.Interceptors.Interceptor[]
  nameWithType.vb: Interceptor()
  fullName.vb: Grpc.Core.Interceptors.Interceptor()
  name.vb: Interceptor()
  spec.csharp:
  - uid: Grpc.Core.Interceptors.Interceptor
    name: Interceptor
    nameWithType: Interceptor
    fullName: Grpc.Core.Interceptors.Interceptor
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Grpc.Core.Interceptors.Interceptor
    name: Interceptor
    nameWithType: Interceptor
    fullName: Grpc.Core.Interceptors.Interceptor
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Grpc.Core.Metadata
  commentId: T:Grpc.Core.Metadata
  isExternal: true
- uid: System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata}
  commentId: T:System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata}
  parent: System
  definition: System.Func`2
  name: Func<Metadata, Metadata>
  nameWithType: Func<Metadata, Metadata>
  fullName: System.Func<Grpc.Core.Metadata, Grpc.Core.Metadata>
  nameWithType.vb: Func(Of Metadata, Metadata)
  fullName.vb: System.Func(Of Grpc.Core.Metadata, Grpc.Core.Metadata)
  name.vb: Func(Of Metadata, Metadata)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Grpc.Core.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Grpc.Core.Metadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Grpc.Core.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Grpc.Core.Metadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Grpc.Core.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Grpc.Core.Metadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Grpc.Core.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Grpc.Core.Metadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
